<?xml version="1.0" encoding="utf-8"?>
<TestRun id="0ed20700-c7c9-4c30-8f0f-2a13c97d86a5" name="runneradmin@fv-az1387-11 2024-05-09 07:55:40" runUser="fv-az1387-11\runneradmin" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2024-05-09T07:55:40.8186276+00:00" queuing="2024-05-09T07:55:40.8186280+00:00" start="2024-05-09T07:55:39.5864665+00:00" finish="2024-05-09T07:56:25.0637360+00:00" />
  <TestSettings name="default" id="23cac01e-dc43-4d60-aab0-2546b19497ce">
    <Deployment runDeploymentRoot="runneradmin_fv-az1387-11_2024-05-09_07_55_40" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="925adf05-25ae-4708-899a-f07d8f477ec2" testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" testName="RevokeExistingValidToken" computerName="fv-az1387-11" duration="00:00:00.0168880" startTime="2024-05-09T07:56:24.7558772+00:00" endTime="2024-05-09T07:56:24.7727650+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="925adf05-25ae-4708-899a-f07d8f477ec2">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="00e299e3-40f0-4194-9afe-fb15358d2a04" testId="02e294ba-02db-f21e-dc59-8e7c9444841f" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0033150" startTime="2024-05-09T07:55:40.8412198+00:00" endTime="2024-05-09T07:55:40.8445342+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00e299e3-40f0-4194-9afe-fb15358d2a04">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f025b499-d27e-4bdc-a746-9155bed360e2" testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0032180" startTime="2024-05-09T07:55:40.8721042+00:00" endTime="2024-05-09T07:55:40.8753217+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f025b499-d27e-4bdc-a746-9155bed360e2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2157b4fa-1828-42bf-a30f-346b1554419d" testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0036750" startTime="2024-05-09T07:55:40.8586247+00:00" endTime="2024-05-09T07:55:40.8622993+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2157b4fa-1828-42bf-a30f-346b1554419d">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e8651fa8-8b1d-4828-b56a-59f6390bb4d4" testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" testName="ManageMembershipsForAUUID" computerName="fv-az1387-11" duration="00:00:00.0335100" startTime="2024-05-09T07:56:24.3605753+00:00" endTime="2024-05-09T07:56:24.3940851+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8651fa8-8b1d-4828-b56a-59f6390bb4d4">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03b2537a-395f-44ba-996d-5854e111e5bb" testId="1680f939-c9a3-3184-e5e6-300d132ea901" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0033250" startTime="2024-05-09T07:55:40.7117551+00:00" endTime="2024-05-09T07:55:40.7150799+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03b2537a-395f-44ba-996d-5854e111e5bb">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="63f1146f-11fc-44e7-b35d-aa5cf58eb2bd" testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" testName="GetMembershipsForCurrentUser" computerName="fv-az1387-11" duration="00:00:00.0427520" startTime="2024-05-09T07:56:24.2492878+00:00" endTime="2024-05-09T07:56:24.2920389+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="63f1146f-11fc-44e7-b35d-aa5cf58eb2bd">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="13be7bb9-6240-4ecd-b0a6-1d6d45a960ef" testId="78a2948f-1e6f-bc34-da6a-7718af2fe45b" testName="CompleteHandshakeFailure" computerName="fv-az1387-11" duration="00:00:10.1045100" startTime="2024-05-09T07:55:40.8967844+00:00" endTime="2024-05-09T07:55:51.0012022+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="13be7bb9-6240-4ecd-b0a6-1d6d45a960ef">
      <Output>
        <StdOut>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I subscribe&#xD;
PNSubscribeOperation PNConnectionErrorCategory 0&#xD;
-&gt; done: EventEngineSteps.WhenISubscribe() (10.0s)&#xD;
Then I receive an error in my subscribe response&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveAnErrorInMySubscribeResponse() (0.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                        |&#xD;
  | event      | SUBSCRIPTION_CHANGED        |&#xD;
  | invocation | HANDSHAKE                   |&#xD;
  | event      | HANDSHAKE_FAILURE           |&#xD;
  | invocation | CANCEL_HANDSHAKE            |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_FAILURE |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_FAILURE |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_FAILURE |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_GIVEUP  |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | EMIT_STATUS                 |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c5a8de5-7745-478a-99fc-1a0a7c8c1c4c" testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" testName="GetMembersForAChannel" computerName="fv-az1387-11" duration="00:00:00.0364690" startTime="2024-05-09T07:56:24.0508986+00:00" endTime="2024-05-09T07:56:24.0873673+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c5a8de5-7745-478a-99fc-1a0a7c8c1c4c">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3b6f81ea-6e6b-45a7-a364-02844c53008d" testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" testName="RemoveAUUIDMetadataIdStoredInConfig" computerName="fv-az1387-11" duration="00:00:00.0194830" startTime="2024-05-09T07:56:24.6659002+00:00" endTime="2024-05-09T07:56:24.6853826+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b6f81ea-6e6b-45a7-a364-02844c53008d">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0deb134d-9ed1-43ff-87dd-390ec4ca8c0d" testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" testName="RevokeATokenWithCharactersThatRequireUrlEncoding" computerName="fv-az1387-11" duration="00:00:00.0171820" startTime="2024-05-09T07:56:24.7386589+00:00" endTime="2024-05-09T07:56:24.7558406+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0deb134d-9ed1-43ff-87dd-390ec4ca8c0d">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="db3d4fbf-885b-4980-93e8-d49b5e389e5b" testId="07a0b332-7585-5132-2931-ba67f585bbfd" testName="RemoveAUUIDMetadataForId" computerName="fv-az1387-11" duration="00:00:00.0222620" startTime="2024-05-09T07:56:24.6436019+00:00" endTime="2024-05-09T07:56:24.6658632+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="db3d4fbf-885b-4980-93e8-d49b5e389e5b">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9cfa9f78-5f71-4f66-90fe-589cc1bd49f0" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0036030" startTime="2024-05-09T07:55:40.8474590+00:00" endTime="2024-05-09T07:55:40.8510621+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9cfa9f78-5f71-4f66-90fe-589cc1bd49f0">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14fb2463-5590-4b16-ab46-12b644fa26e0" testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0031260" startTime="2024-05-09T07:55:40.7151072+00:00" endTime="2024-05-09T07:55:40.7182330+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14fb2463-5590-4b16-ab46-12b644fa26e0">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="202c6fcf-7db5-4d95-861c-a6c0769e5288" testId="31dac960-539b-5857-5a33-455fe8d5a38f" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0075480" startTime="2024-05-09T07:55:40.6776057+00:00" endTime="2024-05-09T07:55:40.6851531+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="202c6fcf-7db5-4d95-861c-a6c0769e5288">
      <Output>
        <StdOut>Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c53fd0c-a587-4f90-978f-9b6b4906ef9a" testId="ed3513bd-2d36-bad0-70c5-813865e78b06" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0045050" startTime="2024-05-09T07:55:40.6445316+00:00" endTime="2024-05-09T07:55:40.6490365+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c53fd0c-a587-4f90-978f-9b6b4906ef9a">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="413b7429-52a5-4f1c-bb52-f4654f87a739" testId="219f8da3-cc63-e002-72df-e2f549e52967" testName="GetAllUUIDMetadata" computerName="fv-az1387-11" duration="00:00:00.0274120" startTime="2024-05-09T07:56:24.5454743+00:00" endTime="2024-05-09T07:56:24.5728856+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="413b7429-52a5-4f1c-bb52-f4654f87a739">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd1cf21a-9705-4616-ba73-db4100946916" testId="f114629c-3c3b-e71d-e1df-1b4312712d85" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0108670" startTime="2024-05-09T07:55:40.6666889+00:00" endTime="2024-05-09T07:55:40.6775549+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd1cf21a-9705-4616-ba73-db4100946916">
      <Output>
        <StdOut>Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="399537cd-26e2-4316-9f11-9f52af4d3539" testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" testName="RemoveMemberForAChannel" computerName="fv-az1387-11" duration="00:00:00.0266880" startTime="2024-05-09T07:56:24.1581562+00:00" endTime="2024-05-09T07:56:24.1848440+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="399537cd-26e2-4316-9f11-9f52af4d3539">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d45c7a73-e77e-4ed2-99d0-59468e47e69d" testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0031150" startTime="2024-05-09T07:55:40.7320742+00:00" endTime="2024-05-09T07:55:40.7351890+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d45c7a73-e77e-4ed2-99d0-59468e47e69d">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8361444b-b7be-48e6-af62-567c862954e3" testId="be80e17e-abe8-75e0-46d0-fbe19949d37d" testName="SuccessfullyReceiveMessages" computerName="fv-az1387-11" duration="00:00:01.0337130" startTime="2024-05-09T07:55:59.2530233+00:00" endTime="2024-05-09T07:56:00.2867280+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8361444b-b7be-48e6-af62-567c862954e3">
      <Output>
        <StdOut>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
When I subscribe&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribe() (0.0s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"hello","Timetoken":0,"Publisher":"a","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (1.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                    |&#xD;
  | event      | SUBSCRIPTION_CHANGED    |&#xD;
  | invocation | HANDSHAKE               |&#xD;
  | event      | HANDSHAKE_SUCCESS       |&#xD;
  | invocation | CANCEL_HANDSHAKE        |&#xD;
  | invocation | EMIT_STATUS             |&#xD;
  | invocation | RECEIVE_MESSAGES        |&#xD;
  | event      | RECEIVE_SUCCESS         |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES |&#xD;
  | invocation | EMIT_MESSAGES           |&#xD;
  | invocation | RECEIVE_MESSAGES        |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06b6191a-1fdf-4cc2-8680-6df4d680f7d2" testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" testName="SetAUUIDMetadata" computerName="fv-az1387-11" duration="00:00:00.0272380" startTime="2024-05-09T07:56:24.6854214+00:00" endTime="2024-05-09T07:56:24.7126587+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06b6191a-1fdf-4cc2-8680-6df4d680f7d2">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7e5d36b1-0e44-43d5-9de8-4db4d197f26f" testId="e079e022-b7dd-5746-ddcb-acbf542a744e" testName="CompleteHandshakeFailure" computerName="fv-az1387-11" duration="00:00:09.0424160" startTime="2024-05-09T07:56:05.2595298+00:00" endTime="2024-05-09T07:56:14.3019049+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e5d36b1-0e44-43d5-9de8-4db4d197f26f">
      <Output>
        <StdOut>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '1', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("1", "60", "false") (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I join 'first', 'second', 'third' channels&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannels("first", "second", "third") (0.0s)&#xD;
Then I receive an error in my heartbeat response&#xD;
-&gt; done: EventEngineSteps.ThenHeartbeatErrorAsync() (9.0s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name                     |&#xD;
  | event      | JOINED                   |&#xD;
  | invocation | HEARTBEAT                |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_GIVEUP         |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="58492d09-7100-4fab-ab78-b0b286d907ab" testId="63f82b54-f147-1707-8ae8-1f771750a4c8" testName="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" computerName="fv-az1387-11" duration="00:00:00.0919290" startTime="2024-05-09T07:56:23.4388594+00:00" endTime="2024-05-09T07:56:23.5307875+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58492d09-7100-4fab-ab78-b0b286d907ab">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3810110e-956c-4b97-93be-369ad09a1643" testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0054799" startTime="2024-05-09T07:55:40.6323398+00:00" endTime="2024-05-09T07:55:40.6378193+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3810110e-956c-4b97-93be-369ad09a1643">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e8528848-4d10-407f-8b12-622cfcc7fa8d" testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0060510" startTime="2024-05-09T07:55:40.6379396+00:00" endTime="2024-05-09T07:55:40.6439907+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8528848-4d10-407f-8b12-622cfcc7fa8d">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="70938201-b7cb-4812-b339-433f028e9612" testId="50604149-da7b-7eb8-2563-57d2dd368452" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0035210" startTime="2024-05-09T07:55:40.8224913+00:00" endTime="2024-05-09T07:55:40.8260123+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70938201-b7cb-4812-b339-433f028e9612">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36f8f246-c078-408c-b208-411e161a0151" testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" testName="SetMemberWithCustomForAChannelAndUUIDWithCustom" computerName="fv-az1387-11" duration="00:00:00.0305810" startTime="2024-05-09T07:56:24.2165271+00:00" endTime="2024-05-09T07:56:24.2471080+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36f8f246-c078-408c-b208-411e161a0151">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f06f480-21f5-4a27-8eac-6d52fcbff84c" testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0040310" startTime="2024-05-09T07:55:40.8140604+00:00" endTime="2024-05-09T07:55:40.8180919+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f06f480-21f5-4a27-8eac-6d52fcbff84c">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b54b5c6-1788-4c19-9b42-823474a982b3" testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" testName="SetAChannelMetadata" computerName="fv-az1387-11" duration="00:00:00.0309910" startTime="2024-05-09T07:56:24.0172897+00:00" endTime="2024-05-09T07:56:24.0482802+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b54b5c6-1788-4c19-9b42-823474a982b3">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9849ab92-c42d-4f86-8afb-5d8caa723a9e" testId="1d07225f-97f1-fdcb-e603-fea46f8b9792" testName="JoiningAndLeavingChannels" computerName="fv-az1387-11" duration="00:00:03.0873700" startTime="2024-05-09T07:56:14.3221035+00:00" endTime="2024-05-09T07:56:17.4094611+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9849ab92-c42d-4f86-8afb-5d8caa723a9e">
      <Output>
        <StdOut>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '20', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("20", "60", "false") (0.0s)&#xD;
When I join 'first', 'second', 'third' channels with presence&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannelsWithPresence("first", "second", "third") (0.0s)&#xD;
Then I wait for getting Presence joined events&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413743419536,"Occupancy":1,"State":null,"Channel":"first","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
-&gt; done: EventEngineSteps.ThenIWaitForPresenceJoinEvents() (0.0s)&#xD;
Then I leave 'first' and 'second' channels with presence&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413743419854,"Occupancy":1,"State":null,"Channel":"second","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413743419940,"Occupancy":1,"State":null,"Channel":"third","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
-&gt; done: EventEngineSteps.ThenILeaveAndChannelsWithPresence("first", "second") (0.0s)&#xD;
Then I wait '3' seconds&#xD;
-&gt; done: EventEngineSteps.ThenIWaitAsync("3") (3.0s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name              |&#xD;
  | event      | JOINED            |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
  | event      | LEFT              |&#xD;
  | invocation | CANCEL_WAIT       |&#xD;
  | invocation | LEAVE             |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f88c86d3-00bb-49cb-90c5-ba8d1ea2042c" testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0074920" startTime="2024-05-09T07:55:40.7042171+00:00" endTime="2024-05-09T07:55:40.7117083+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f88c86d3-00bb-49cb-90c5-ba8d1ea2042c">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="530f95ef-bf5e-498c-9da1-dadb4528e35e" testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0188520" startTime="2024-05-09T07:55:40.6853366+00:00" endTime="2024-05-09T07:55:40.7041883+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="530f95ef-bf5e-498c-9da1-dadb4528e35e">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3431811c-3a05-414d-b151-f541ee923f7d" testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" testName="GetAllChannelMetadataWithCustom" computerName="fv-az1387-11" duration="00:00:00.0235830" startTime="2024-05-09T07:56:23.9709398+00:00" endTime="2024-05-09T07:56:23.9945228+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3431811c-3a05-414d-b151-f541ee923f7d">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f27efbc1-b812-4018-b4dc-a1f734288a1b" testId="9bb7c02e-b85a-d370-6cfc-0ac356d6be53" testName="HandshakeFailureRecovery" computerName="fv-az1387-11" duration="00:00:05.8641800" startTime="2024-05-09T07:55:51.0012455+00:00" endTime="2024-05-09T07:55:56.8653677+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f27efbc1-b812-4018-b4dc-a1f734288a1b">
      <Output>
        <StdOut>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I subscribe&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribe() (4.8s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"{\r\n  \"content\": \"Hello world!\"\r\n}","Timetoken":0,"Publisher":"tomato","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (1.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                        |&#xD;
  | event      | SUBSCRIPTION_CHANGED        |&#xD;
  | invocation | HANDSHAKE                   |&#xD;
  | event      | HANDSHAKE_FAILURE           |&#xD;
  | invocation | CANCEL_HANDSHAKE            |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_FAILURE |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_SUCCESS |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | EMIT_STATUS                 |&#xD;
  | invocation | RECEIVE_MESSAGES            |&#xD;
  | event      | RECEIVE_SUCCESS             |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES     |&#xD;
  | invocation | EMIT_MESSAGES               |&#xD;
  | invocation | RECEIVE_MESSAGES            |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2f7f23d7-5efa-44d7-965b-7275dc44337e" testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0058840" startTime="2024-05-09T07:55:40.8080030+00:00" endTime="2024-05-09T07:55:40.8138867+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2f7f23d7-5efa-44d7-965b-7275dc44337e">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa4220aa-053c-4e0b-8564-c776ccd53dc4" testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0034790" startTime="2024-05-09T07:55:40.7764898+00:00" endTime="2024-05-09T07:55:40.7799692+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa4220aa-053c-4e0b-8564-c776ccd53dc4">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a48ea615-dd19-4399-85c2-f5705dda1a3f" testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0074430" startTime="2024-05-09T07:55:40.7804577+00:00" endTime="2024-05-09T07:55:40.7879006+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a48ea615-dd19-4399-85c2-f5705dda1a3f">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="32350d56-08f9-468a-9538-d3bd208baba5" testId="d533b002-ecc8-a6e4-0a55-5406f8886899" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0029370" startTime="2024-05-09T07:55:40.8261550+00:00" endTime="2024-05-09T07:55:40.8290920+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="32350d56-08f9-468a-9538-d3bd208baba5">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fb0ceef8-7b69-404c-aa15-77773763012d" testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0027230" startTime="2024-05-09T07:55:40.8624172+00:00" endTime="2024-05-09T07:55:40.8651402+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fb0ceef8-7b69-404c-aa15-77773763012d">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d4161f18-1bda-4f7b-83ca-e302bc6b95f1" testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0029900" startTime="2024-05-09T07:55:40.8380660+00:00" endTime="2024-05-09T07:55:40.8410556+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4161f18-1bda-4f7b-83ca-e302bc6b95f1">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4fbd6062-bc3f-4507-b146-274c3d688b75" testId="2f407184-5438-edfb-bd06-dac05bac3790" testName="JoiningAFewChannelsWithHeartbeatIntervalSetTo0" computerName="fv-az1387-11" duration="00:00:00.0201150" startTime="2024-05-09T07:56:14.3019422+00:00" endTime="2024-05-09T07:56:14.3220567+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4fbd6062-bc3f-4507-b146-274c3d688b75">
      <Output>
        <StdOut>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '0', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("0", "60", "false") (0.0s)&#xD;
When I join 'first', 'second', 'third' channels&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannels("first", "second", "third") (0.0s)&#xD;
Then I don't observe any Events and Invocations of the Presence EE&#xD;
-&gt; done: EventEngineSteps.ThenIDontObserveAnyEventsAndInvocationsOfThePresenceEE() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fc254e41-53f5-4414-9340-6bdf491a8fed" testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" testName="GetMembershipsForUUIDWithCustomAndChannelCustom" computerName="fv-az1387-11" duration="00:00:00.0268660" startTime="2024-05-09T07:56:24.3336724+00:00" endTime="2024-05-09T07:56:24.3605380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fc254e41-53f5-4414-9340-6bdf491a8fed">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d594684-4e2b-4844-a5bd-8322c24aa737" testId="bee75210-e3b0-c570-b8a4-c27baac780a1" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0073730" startTime="2024-05-09T07:55:40.7583414+00:00" endTime="2024-05-09T07:55:40.7657140+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d594684-4e2b-4844-a5bd-8322c24aa737">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c2840422-9891-4638-862f-d424b8ed64f8" testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" testName="SetMembershipForCurrentUser" computerName="fv-az1387-11" duration="00:00:00.0245280" startTime="2024-05-09T07:56:24.5188575+00:00" endTime="2024-05-09T07:56:24.5433855+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2840422-9891-4638-862f-d424b8ed64f8">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="77edbfbc-a66d-494c-94d7-581ec91a6bc8" testId="cddd27ac-7387-0391-36be-b1b706556ac6" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0027100" startTime="2024-05-09T07:55:40.8753757+00:00" endTime="2024-05-09T07:55:40.8780856+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="77edbfbc-a66d-494c-94d7-581ec91a6bc8">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bbe341c9-a8e4-475e-a116-ecb35b3bcab5" testId="78605226-9a65-4701-5dbe-74fd1152b767" testName="GetAUUIDWithCustomMetadataIdStoredInConfig" computerName="fv-az1387-11" duration="00:00:00.0225910" startTime="2024-05-09T07:56:24.6209753+00:00" endTime="2024-05-09T07:56:24.6435657+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bbe341c9-a8e4-475e-a116-ecb35b3bcab5">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c9d74d7c-3d20-4f68-acbb-61d8a8cd7cb4" testId="798a8e71-c3a5-952d-b167-1f516fd90da6" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0104320" startTime="2024-05-09T07:55:40.6544122+00:00" endTime="2024-05-09T07:55:40.6648442+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9d74d7c-3d20-4f68-acbb-61d8a8cd7cb4">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1eebcc36-970d-4f4d-8416-c8227ba266b7" testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0051130" startTime="2024-05-09T07:55:40.8841449+00:00" endTime="2024-05-09T07:55:40.8892572+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1eebcc36-970d-4f4d-8416-c8227ba266b7">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="08b6fe72-8650-4e07-b40e-ada00955aa92" testId="f8d35157-2900-b4b5-1a17-900588c884a9" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0045480" startTime="2024-05-09T07:55:40.7535555+00:00" endTime="2024-05-09T07:55:40.7581035+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08b6fe72-8650-4e07-b40e-ada00955aa92">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa88708b-5a61-4309-9d85-35b364ab2ef6" testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0035540" startTime="2024-05-09T07:55:40.8893196+00:00" endTime="2024-05-09T07:55:40.8928734+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa88708b-5a61-4309-9d85-35b364ab2ef6">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a984f338-10b0-4ec4-a494-0d8001c04a67" testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0033770" startTime="2024-05-09T07:55:40.8188963+00:00" endTime="2024-05-09T07:55:40.8222732+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a984f338-10b0-4ec4-a494-0d8001c04a67">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f54371e7-7c83-43b3-8ead-4bbbc4d31fe3" testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0031750" startTime="2024-05-09T07:55:40.8652415+00:00" endTime="2024-05-09T07:55:40.8684169+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f54371e7-7c83-43b3-8ead-4bbbc4d31fe3">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="17708bfc-c0b1-40ee-8916-d87a5ce35e8b" testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" testName="GetAllChannelMetadata" computerName="fv-az1387-11" duration="00:00:00.0306300" startTime="2024-05-09T07:56:23.9402658+00:00" endTime="2024-05-09T07:56:23.9708952+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17708bfc-c0b1-40ee-8916-d87a5ce35e8b">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b69c1fb8-327a-4bec-b956-5fbf9dcd034f" testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" testName="GetAChannelMetadataForId" computerName="fv-az1387-11" duration="00:00:00.0453729" startTime="2024-05-09T07:56:23.8723071+00:00" endTime="2024-05-09T07:56:23.9176791+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b69c1fb8-327a-4bec-b956-5fbf9dcd034f">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0cd227a-6fd4-44dc-82ed-eb34cbae9347" testId="446be40b-3f39-dc72-f797-9a3aa2aac484" testName="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" computerName="fv-az1387-11" duration="00:00:00.0219750" startTime="2024-05-09T07:56:23.3793558+00:00" endTime="2024-05-09T07:56:23.4013305+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0cd227a-6fd4-44dc-82ed-eb34cbae9347">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4e286682-0132-4bff-b204-bbca26270c68" testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" testName="RemoveMembershipForCurrentUser" computerName="fv-az1387-11" duration="00:00:00.0712380" startTime="2024-05-09T07:56:24.4183010+00:00" endTime="2024-05-09T07:56:24.4895384+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4e286682-0132-4bff-b204-bbca26270c68">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.1s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b23cca1d-3e93-46bc-9140-415aa8a8e86b" testId="4f5e4dcd-026e-dbea-14fe-5aa5192c38da" testName="SuccessfullyRestoreSubscribeWithFailures" computerName="fv-az1387-11" duration="00:00:03.9398820" startTime="2024-05-09T07:56:01.3177695+00:00" endTime="2024-05-09T07:56:05.2576267+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b23cca1d-3e93-46bc-9140-415aa8a8e86b">
      <Output>
        <StdOut>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I subscribe with timetoken 12345678901234567&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribeWithTimetoken(12345678901234567) (2.9s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"{\r\n  \"content\": \"Hello world!\"\r\n}","Timetoken":0,"Publisher":"tomato","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (1.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                        |&#xD;
  | event      | SUBSCRIPTION_RESTORED       |&#xD;
  | invocation | HANDSHAKE                   |&#xD;
  | event      | HANDSHAKE_FAILURE           |&#xD;
  | invocation | CANCEL_HANDSHAKE            |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_SUCCESS |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | EMIT_STATUS                 |&#xD;
  | invocation | RECEIVE_MESSAGES            |&#xD;
  | event      | RECEIVE_SUCCESS             |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES     |&#xD;
  | invocation | EMIT_MESSAGES               |&#xD;
  | invocation | RECEIVE_MESSAGES            |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1e08622f-87c7-4944-bace-db853604035a" testId="7f798889-8174-9314-5795-cf39887a4d5e" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0703860" startTime="2024-05-09T07:55:40.5540368+00:00" endTime="2024-05-09T07:55:40.6243469+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e08622f-87c7-4944-bace-db853604035a">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="be80a73e-3d48-46f9-8e3e-480832863ea2" testId="17537441-5c46-b29c-7a15-7f733fa6a240" testName="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" computerName="fv-az1387-11" duration="00:00:00.0486680" startTime="2024-05-09T07:56:23.3306480+00:00" endTime="2024-05-09T07:56:23.3793151+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be80a73e-3d48-46f9-8e3e-480832863ea2">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="437c62fe-2188-48d3-a8c2-4901ac38e242" testId="5e071152-ee43-67c0-dc5d-67a966171b99" testName="GrantAnAccessTokenWithoutAnAuthorizedUuid" computerName="fv-az1387-11" duration="00:00:00.0351270" startTime="2024-05-09T07:56:23.8348037+00:00" endTime="2024-05-09T07:56:23.8699298+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="437c62fe-2188-48d3-a8c2-4901ac38e242">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="93ee0aa7-10eb-4249-82b9-6571b5a1a5bb" testId="785e20b7-0681-3d5e-8c02-431a4435768d" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0032860" startTime="2024-05-09T07:55:40.7658971+00:00" endTime="2024-05-09T07:55:40.7691830+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93ee0aa7-10eb-4249-82b9-6571b5a1a5bb">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6df5e8af-1931-4fbc-a35e-ae7b4af6a1b1" testId="8a1c2bbd-f61b-135c-270f-157e7106103a" testName="GetAChannelWithCustomMetadata" computerName="fv-az1387-11" duration="00:00:00.0225010" startTime="2024-05-09T07:56:23.9177186+00:00" endTime="2024-05-09T07:56:23.9402189+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6df5e8af-1931-4fbc-a35e-ae7b4af6a1b1">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="82c7ff40-b13e-4cfe-aaa3-e4ff3ebe0df8" testId="96ff7052-903d-d61a-0cb2-cdee63831172" testName="RemoveMembership" computerName="fv-az1387-11" duration="00:00:00.0241400" startTime="2024-05-09T07:56:24.3941240+00:00" endTime="2024-05-09T07:56:24.4182634+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="82c7ff40-b13e-4cfe-aaa3-e4ff3ebe0df8">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="143a2f80-65d9-48ed-83c0-008824448d3d" testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" testName="GetAllUUIDMetadataWithCustom" computerName="fv-az1387-11" duration="00:00:00.0229820" startTime="2024-05-09T07:56:24.5729227+00:00" endTime="2024-05-09T07:56:24.5959040+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="143a2f80-65d9-48ed-83c0-008824448d3d">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5013162-44ad-489c-a9ce-6ea075fb7706" testId="f753e1e9-3215-7499-f9d3-03db6fd8fec6" testName="SuccessfullyRestoreSubscribe" computerName="fv-az1387-11" duration="00:00:01.0309569" startTime="2024-05-09T07:56:00.2867740+00:00" endTime="2024-05-09T07:56:01.3177232+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5013162-44ad-489c-a9ce-6ea075fb7706">
      <Output>
        <StdOut>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
When I subscribe with timetoken 12345678901234567&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribeWithTimetoken(12345678901234567) (0.0s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"{\r\n  \"content\": \"Hello world!\"\r\n}","Timetoken":0,"Publisher":"tomato","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (1.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                    |&#xD;
  | event      | SUBSCRIPTION_RESTORED   |&#xD;
  | invocation | HANDSHAKE               |&#xD;
  | event      | HANDSHAKE_SUCCESS       |&#xD;
  | invocation | CANCEL_HANDSHAKE        |&#xD;
  | invocation | EMIT_STATUS             |&#xD;
  | invocation | RECEIVE_MESSAGES        |&#xD;
  | event      | RECEIVE_SUCCESS         |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES |&#xD;
  | invocation | EMIT_MESSAGES           |&#xD;
  | invocation | RECEIVE_MESSAGES        |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="35640f0a-3c81-44b4-891d-30c8fa308033" testId="fb67481e-37a3-f171-7a64-13ebf12d3989" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0030120" startTime="2024-05-09T07:55:40.7352088+00:00" endTime="2024-05-09T07:55:40.7382201+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="35640f0a-3c81-44b4-891d-30c8fa308033">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1173c13e-dd82-4199-b961-ea0ba2c439bd" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0031600" startTime="2024-05-09T07:55:40.8781464+00:00" endTime="2024-05-09T07:55:40.8813061+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1173c13e-dd82-4199-b961-ea0ba2c439bd">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9525e6e7-986b-49fa-9b90-743488d8c0f4" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0029050" startTime="2024-05-09T07:55:40.8515883+00:00" endTime="2024-05-09T07:55:40.8544929+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9525e6e7-986b-49fa-9b90-743488d8c0f4">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dd943947-b774-4f8e-8ee4-9dc23ddaa4a5" testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" testName="RevokeInvalidToken" computerName="fv-az1387-11" duration="00:00:00.0174800" startTime="2024-05-09T07:56:24.7728010+00:00" endTime="2024-05-09T07:56:24.7902804+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd943947-b774-4f8e-8ee4-9dc23ddaa4a5">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4df54f7c-0b88-4604-8e1e-9344ba6e02d0" testId="0992672a-4884-80d0-5142-7d4a75036ed9" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" computerName="fv-az1387-11" duration="00:00:00.0187220" startTime="2024-05-09T07:56:23.4201004+00:00" endTime="2024-05-09T07:56:23.4388215+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4df54f7c-0b88-4604-8e1e-9344ba6e02d0">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dba69f10-0475-4884-8220-b3e52657552e" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0026200" startTime="2024-05-09T07:55:40.8814494+00:00" endTime="2024-05-09T07:55:40.8840698+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dba69f10-0475-4884-8220-b3e52657552e">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a0a90b5b-c039-4fa2-9ae5-d13e0eab1f07" testId="d717777f-cd83-a14f-a06e-85ad7a167630" testName="GetAUUIDMetadataForId" computerName="fv-az1387-11" duration="00:00:00.0249969" startTime="2024-05-09T07:56:24.5959419+00:00" endTime="2024-05-09T07:56:24.6209384+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a0a90b5b-c039-4fa2-9ae5-d13e0eab1f07">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bec30858-cc35-41f6-8069-afe6dc243d37" testId="524c1966-6494-a6c3-e952-972895ca93c8" testName="RecoveryFromOneUnexpectedErrorAlongTheWay" computerName="fv-az1387-11" duration="00:00:02.8217870" startTime="2024-05-09T07:56:17.4095131+00:00" endTime="2024-05-09T07:56:20.2312786+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bec30858-cc35-41f6-8069-afe6dc243d37">
      <Output>
        <StdOut>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '1', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("1", "60", "false") (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I join 'first', 'second', 'third' channels with presence&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannelsWithPresence("first", "second", "third") (0.0s)&#xD;
Then I wait for getting Presence joined events&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413801993106,"Occupancy":1,"State":null,"Channel":"first","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
-&gt; done: EventEngineSteps.ThenIWaitForPresenceJoinEvents() (2.8s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name                     |&#xD;
  | event      | JOINED                   |&#xD;
  | invocation | HEARTBEAT                |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_SUCCESS        |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
  | invocation | WAIT                     |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413801993244,"Occupancy":1,"State":null,"Channel":"second","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413801993460,"Occupancy":1,"State":null,"Channel":"third","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a1ff8c7-547d-49a6-be56-0cf88743c7c1" testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0030200" startTime="2024-05-09T07:55:40.7880594+00:00" endTime="2024-05-09T07:55:40.7910791+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a1ff8c7-547d-49a6-be56-0cf88743c7c1">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7e656cf8-f3ac-47ea-b316-a6bf81ed7e35" testId="02189687-8985-6806-f35e-66f7f45f4e75" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0158130" startTime="2024-05-09T07:55:40.7913140+00:00" endTime="2024-05-09T07:55:40.8071261+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e656cf8-f3ac-47ea-b316-a6bf81ed7e35">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7aa1bbc-b5d3-4b6c-872c-4095e8b4f092" testId="84e090d8-441a-8861-c4e5-70620525fefd" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0071700" startTime="2024-05-09T07:55:40.7248776+00:00" endTime="2024-05-09T07:55:40.7320470+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7aa1bbc-b5d3-4b6c-872c-4095e8b4f092">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3ea24c34-55ab-482a-82c4-23cffc0ea1ae" testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" testName="ManageMembersForAChannel" computerName="fv-az1387-11" duration="00:00:00.0403980" startTime="2024-05-09T07:56:24.1177169+00:00" endTime="2024-05-09T07:56:24.1581139+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ea24c34-55ab-482a-82c4-23cffc0ea1ae">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ab192783-c72c-4ce5-8373-33655a55a64f" testId="c824fd41-84e4-6d43-8411-04262c295a77" testName="SetMembership" computerName="fv-az1387-11" duration="00:00:00.0281860" startTime="2024-05-09T07:56:24.4906354+00:00" endTime="2024-05-09T07:56:24.5188209+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab192783-c72c-4ce5-8373-33655a55a64f">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d692ceb1-fb02-499d-a45e-2afcfa79c6b3" testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0034730" startTime="2024-05-09T07:55:40.8338318+00:00" endTime="2024-05-09T07:55:40.8373054+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d692ceb1-fb02-499d-a45e-2afcfa79c6b3">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a73ece1a-0a6a-499b-a073-29ac8056dd74" testId="238d7046-3682-e357-765d-2a21c813602e" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" computerName="fv-az1387-11" duration="00:00:00.0186890" startTime="2024-05-09T07:56:23.4013749+00:00" endTime="2024-05-09T07:56:23.4200631+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a73ece1a-0a6a-499b-a073-29ac8056dd74">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f8f42c39-f8ce-4449-aeb3-e959a505ceb9" testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" testName="GetMembershipsForUUID" computerName="fv-az1387-11" duration="00:00:00.0415580" startTime="2024-05-09T07:56:24.2920759+00:00" endTime="2024-05-09T07:56:24.3336337+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8f42c39-f8ce-4449-aeb3-e959a505ceb9">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4a0223e6-283f-4e07-bed6-ac9cd97b3c70" testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0027260" startTime="2024-05-09T07:55:40.8446210+00:00" endTime="2024-05-09T07:55:40.8473471+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a0223e6-283f-4e07-bed6-ac9cd97b3c70">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="be7eb2d1-40f7-4f2f-829f-97b6a6efabbe" testId="be8b1c28-897b-72b1-79de-44eed3d3394f" testName="RemoveAChannelMetadataForId" computerName="fv-az1387-11" duration="00:00:00.0226910" startTime="2024-05-09T07:56:23.9945595+00:00" endTime="2024-05-09T07:56:24.0172501+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be7eb2d1-40f7-4f2f-829f-97b6a6efabbe">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8b386836-07e4-4a58-a4f5-762df3acc261" testId="ee450aac-5f02-8238-a55d-792600e33298" testName="RevokeATokenWhileItIsDisabledOnAServer" computerName="fv-az1387-11" duration="00:00:00.0242640" startTime="2024-05-09T07:56:24.7143572+00:00" endTime="2024-05-09T07:56:24.7386210+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8b386836-07e4-4a58-a4f5-762df3acc261">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11a201ab-9879-4416-8257-84964266e4bc" testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0066020" startTime="2024-05-09T07:55:40.7182522+00:00" endTime="2024-05-09T07:55:40.7248535+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11a201ab-9879-4416-8257-84964266e4bc">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="87df01cb-4192-4ded-8406-c9e99b19bc57" testId="42ca667a-a020-f899-567b-164563a5f68c" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0048950" startTime="2024-05-09T07:55:40.6493803+00:00" endTime="2024-05-09T07:55:40.6542748+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87df01cb-4192-4ded-8406-c9e99b19bc57">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bb96d5bd-3af5-4135-8378-caeedfef811b" testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" testName="SetMemberForAChannel" computerName="fv-az1387-11" duration="00:00:00.0315920" startTime="2024-05-09T07:56:24.1848898+00:00" endTime="2024-05-09T07:56:24.2164818+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb96d5bd-3af5-4135-8378-caeedfef811b">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="850c2f3e-a9aa-49f4-8715-e804c5a3070c" testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0032770" startTime="2024-05-09T07:55:40.8296372+00:00" endTime="2024-05-09T07:55:40.8329140+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="850c2f3e-a9aa-49f4-8715-e804c5a3070c">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f73542c6-339e-4a97-80c5-ea8bd3cafc9f" testId="60e5b02d-603e-8172-2213-6ea7fd0250af" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0060050" startTime="2024-05-09T07:55:40.6262998+00:00" endTime="2024-05-09T07:55:40.6323045+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f73542c6-339e-4a97-80c5-ea8bd3cafc9f">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ff0ecc7e-262c-4948-952a-ca8d184f77a1" testId="96d493fa-312d-9ae2-5c5a-5d6187729524" testName="SuccessfullyJoinedAFewChannelsWithPresence" computerName="fv-az1387-11" duration="00:00:00.0542060" startTime="2024-05-09T07:56:23.2738114+00:00" endTime="2024-05-09T07:56:23.3280170+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff0ecc7e-262c-4948-952a-ca8d184f77a1">
      <Output>
        <StdOut>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '1', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("1", "60", "false") (0.0s)&#xD;
When I join 'first', 'second', 'third' channels with presence&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannelsWithPresence("first", "second", "third") (0.0s)&#xD;
Then I wait for getting Presence joined events&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413832962858,"Occupancy":1,"State":null,"Channel":"first","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
-&gt; done: EventEngineSteps.ThenIWaitForPresenceJoinEvents() (0.0s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name              |&#xD;
  | event      | JOINED            |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413832962980,"Occupancy":1,"State":null,"Channel":"second","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413832963092,"Occupancy":1,"State":null,"Channel":"third","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d1563ee-da41-4072-bc3f-39d9802f807d" testId="9c112724-e910-9610-f068-0224805f3f30" testName="ReceivingFailureRecovery" computerName="fv-az1387-11" duration="00:00:02.3875690" startTime="2024-05-09T07:55:56.8654231+00:00" endTime="2024-05-09T07:55:59.2529735+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d1563ee-da41-4072-bc3f-39d9802f807d">
      <Output>
        <StdOut>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I subscribe&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribe() (0.0s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"{\r\n  \"content\": \"Hello world!\"\r\n}","Timetoken":0,"Publisher":"tomato","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (2.4s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                      |&#xD;
  | event      | SUBSCRIPTION_CHANGED      |&#xD;
  | invocation | HANDSHAKE                 |&#xD;
  | event      | HANDSHAKE_SUCCESS         |&#xD;
  | invocation | CANCEL_HANDSHAKE          |&#xD;
  | invocation | EMIT_STATUS               |&#xD;
  | invocation | RECEIVE_MESSAGES          |&#xD;
  | event      | RECEIVE_FAILURE           |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES   |&#xD;
  | invocation | RECEIVE_RECONNECT         |&#xD;
  | event      | RECEIVE_RECONNECT_SUCCESS |&#xD;
  | invocation | CANCEL_RECEIVE_RECONNECT  |&#xD;
  | invocation | EMIT_MESSAGES             |&#xD;
  | invocation | RECEIVE_MESSAGES          |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6459ae4e-9b18-4f03-ab76-6fda174ffbf1" testId="71353074-59f3-561d-2fde-c864cf9dfcb6" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0151650" startTime="2024-05-09T07:55:40.7382393+00:00" endTime="2024-05-09T07:55:40.7534038+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6459ae4e-9b18-4f03-ab76-6fda174ffbf1">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a772191-0990-4d28-bece-242717b3eec3" testId="4a51fa6c-5b4f-6c50-4ded-2a50ec351293" testName="SuccessfullyJoinedAFewChannels" computerName="fv-az1387-11" duration="00:00:03.0424800" startTime="2024-05-09T07:56:20.2313293+00:00" endTime="2024-05-09T07:56:23.2737674+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a772191-0990-4d28-bece-242717b3eec3">
      <Output>
        <StdOut>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '1', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("1", "60", "false") (0.0s)&#xD;
When I join 'first', 'second', 'third' channels&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannels("first", "second", "third") (0.0s)&#xD;
Then I wait '3' seconds&#xD;
-&gt; done: EventEngineSteps.ThenIWaitAsync("3") (3.0s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name              |&#xD;
  | event      | JOINED            |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
  | event      | TIMES_UP          |&#xD;
  | invocation | CANCEL_WAIT       |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
  | event      | TIMES_UP          |&#xD;
  | invocation | CANCEL_WAIT       |&#xD;
  | invocation | HEARTBEAT         |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d942499-123b-4e79-ae74-e6bf1584b6fa" testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0069650" startTime="2024-05-09T07:55:40.7693426+00:00" endTime="2024-05-09T07:55:40.7763076+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d942499-123b-4e79-ae74-e6bf1584b6fa">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fcbb1eb4-5555-4c9d-af85-26ed50786b21" testId="21d875cb-d7ef-e04a-3cc4-907443abf187" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0033430" startTime="2024-05-09T07:55:40.8685633+00:00" endTime="2024-05-09T07:55:40.8719063+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcbb1eb4-5555-4c9d-af85-26ed50786b21">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e21a630-b7be-4166-947d-abf79d923388" testId="85374129-b31e-6699-e3e3-35edfbf2f310" testName="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" computerName="fv-az1387-11" duration="00:00:00.3039380" startTime="2024-05-09T07:56:23.5308261+00:00" endTime="2024-05-09T07:56:23.8347605+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e21a630-b7be-4166-947d-abf79d923388">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7f3148b6-8d9b-4288-af90-6423cd7323ec" testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" testName="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" computerName="fv-az1387-11" duration="00:00:00.0302560" startTime="2024-05-09T07:56:24.0874082+00:00" endTime="2024-05-09T07:56:24.1176642+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f3148b6-8d9b-4288-af90-6423cd7323ec">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="da37ba8c-c665-4f46-9628-8a00bf87866e" testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1387-11" duration="00:00:00.0032700" startTime="2024-05-09T07:55:40.8546558+00:00" endTime="2024-05-09T07:55:40.8579254+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da37ba8c-c665-4f46-9628-8a00bf87866e">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="785e20b7-0681-3d5e-8c02-431a4435768d">
      <Execution id="93ee0aa7-10eb-4249-82b9-6571b5a1a5bb" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d9c0b4d-df8d-d917-f4fe-624101bd0d52">
      <Execution id="850c2f3e-a9aa-49f4-8715-e804c5a3070c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="2c1e01dd-81d9-12dc-ec1f-005830932e89">
      <Execution id="9cfa9f78-5f71-4f66-90fe-589cc1bd49f0" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="13df4a31-1d93-7796-89f0-9bafbf62cf1d">
      <Execution id="d45c7a73-e77e-4ed2-99d0-59468e47e69d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="31dac960-539b-5857-5a33-455fe8d5a38f">
      <Execution id="202c6fcf-7db5-4d95-861c-a6c0769e5288" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CompleteHandshakeFailure" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e079e022-b7dd-5746-ddcb-acbf542a744e">
      <Execution id="7e5d36b1-0e44-43d5-9de8-4db4d197f26f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.PresenceEventEngineFeature" name="CompleteHandshakeFailure" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="798a8e71-c3a5-952d-b167-1f516fd90da6">
      <Execution id="c9d74d7c-3d20-4f68-acbb-61d8a8cd7cb4" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bee75210-e3b0-c570-b8a4-c27baac780a1">
      <Execution id="6d594684-4e2b-4844-a5bd-8322c24aa737" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="SuccessfullyRestoreSubscribe" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f753e1e9-3215-7499-f9d3-03db6fd8fec6">
      <Execution id="f5013162-44ad-489c-a9ce-6ea075fb7706" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.EventEngineFeature" name="SuccessfullyRestoreSubscribe" />
    </UnitTest>
    <UnitTest name="RevokeInvalidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f6a7a690-af73-fab8-0ebf-059ccdbb5495">
      <Execution id="dd943947-b774-4f8e-8ee4-9dc23ddaa4a5" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeInvalidToken" />
    </UnitTest>
    <UnitTest name="JoiningAFewChannelsWithHeartbeatIntervalSetTo0" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="2f407184-5438-edfb-bd06-dac05bac3790">
      <Execution id="4fbd6062-bc3f-4507-b146-274c3d688b75" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.PresenceEventEngineFeature" name="JoiningAFewChannelsWithHeartbeatIntervalSetTo0" />
    </UnitTest>
    <UnitTest name="SetMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="c824fd41-84e4-6d43-8411-04262c295a77">
      <Execution id="ab192783-c72c-4ce5-8373-33655a55a64f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembership" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="17537441-5c46-b29c-7a15-7f733fa6a240">
      <Execution id="be80a73e-3d48-46f9-8e3e-480832863ea2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0153fbb0-e5a5-84d4-df77-b92e47c48a9b">
      <Execution id="5a1ff8c7-547d-49a6-be56-0cf88743c7c1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1500c2f1-f56e-3f8a-4b9e-769b5f983879">
      <Execution id="14fb2463-5590-4b16-ab46-12b644fa26e0" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="be8b1c28-897b-72b1-79de-44eed3d3394f">
      <Execution id="be7eb2d1-40f7-4f2f-829f-97b6a6efabbe" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="RemoveAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="SuccessfullyReceiveMessages" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="be80e17e-abe8-75e0-46d0-fbe19949d37d">
      <Execution id="8361444b-b7be-48e6-af62-567c862954e3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.EventEngineFeature" name="SuccessfullyReceiveMessages" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02189687-8985-6806-f35e-66f7f45f4e75">
      <Execution id="7e656cf8-f3ac-47ea-b316-a6bf81ed7e35" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeATokenWhileItIsDisabledOnAServer" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ee450aac-5f02-8238-a55d-792600e33298">
      <Execution id="8b386836-07e4-4a58-a4f5-762df3acc261" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWhileItIsDisabledOnAServer" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="60e5b02d-603e-8172-2213-6ea7fd0250af">
      <Execution id="f73542c6-339e-4a97-80c5-ea8bd3cafc9f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="50604149-da7b-7eb8-2563-57d2dd368452">
      <Execution id="70938201-b7cb-4812-b339-433f028e9612" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5ef88e91-8d77-e81e-f266-0337c81fc15e">
      <Execution id="f025b499-d27e-4bdc-a746-9155bed360e2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="cddd27ac-7387-0391-36be-b1b706556ac6">
      <Execution id="77edbfbc-a66d-494c-94d7-581ec91a6bc8" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d5ad5871-c66b-34c9-1371-544f7c37d8f6">
      <Execution id="2157b4fa-1828-42bf-a30f-346b1554419d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="ManageMembershipsForAUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="aea0c1c8-e4f2-b00c-e2e5-3958a9100776">
      <Execution id="e8651fa8-8b1d-4828-b56a-59f6390bb4d4" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="ManageMembershipsForAUUID" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f114629c-3c3b-e71d-e1df-1b4312712d85">
      <Execution id="bd1cf21a-9705-4616-ba73-db4100946916" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d533b002-ecc8-a6e4-0a55-5406f8886899">
      <Execution id="32350d56-08f9-468a-9538-d3bd208baba5" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeExistingValidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9e948d14-1697-7020-7d46-e7d0ab1a839a">
      <Execution id="925adf05-25ae-4708-899a-f07d8f477ec2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeExistingValidToken" />
    </UnitTest>
    <UnitTest name="CompleteHandshakeFailure" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="78a2948f-1e6f-bc34-da6a-7718af2fe45b">
      <Execution id="13be7bb9-6240-4ecd-b0a6-1d6d45a960ef" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.EventEngineFeature" name="CompleteHandshakeFailure" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9">
      <Execution id="4a0223e6-283f-4e07-bed6-ac9cd97b3c70" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="SuccessfullyJoinedAFewChannelsWithPresence" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="96d493fa-312d-9ae2-5c5a-5d6187729524">
      <Execution id="ff0ecc7e-262c-4948-952a-ca8d184f77a1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.PresenceEventEngineFeature" name="SuccessfullyJoinedAFewChannelsWithPresence" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="10a87c1f-7e7a-0e53-402e-aefcc00a21da">
      <Execution id="f8f42c39-f8ce-4449-aeb3-e959a505ceb9" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUID" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb">
      <Execution id="3f06f480-21f5-4a27-8eac-6d52fcbff84c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetAUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5a108f95-d949-be1c-ba70-794e5a89cb2c">
      <Execution id="06b6191a-1fdf-4cc2-8680-6df4d680f7d2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="SetAUUIDMetadata" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="07a0b332-7585-5132-2931-ba67f585bbfd">
      <Execution id="db3d4fbf-885b-4980-93e8-d49b5e389e5b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="63f82b54-f147-1707-8ae8-1f771750a4c8">
      <Execution id="58492d09-7100-4fab-ab78-b0b286d907ab" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="RevokeATokenWithCharactersThatRequireUrlEncoding" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b811bc2b-ac6c-1eab-5504-b3af1ec9a805">
      <Execution id="0deb134d-9ed1-43ff-87dd-390ec4ca8c0d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWithCharactersThatRequireUrlEncoding" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="238d7046-3682-e357-765d-2a21c813602e">
      <Execution id="a73ece1a-0a6a-499b-a073-29ac8056dd74" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="SetMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c">
      <Execution id="c2840422-9891-4638-862f-d424b8ed64f8" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="68a689f7-c4a6-51dd-490d-8e5b965feb8a">
      <Execution id="a48ea615-dd19-4399-85c2-f5705dda1a3f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19276ea0-e69e-d8c1-5f86-fbe82fc4defb">
      <Execution id="3810110e-956c-4b97-93be-369ad09a1643" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUIDWithCustomAndChannelCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7acf7525-aaca-a5f2-7032-491d9caf1cf8">
      <Execution id="fc254e41-53f5-4414-9340-6bdf491a8fed" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUIDWithCustomAndChannelCustom" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed3513bd-2d36-bad0-70c5-813865e78b06">
      <Execution id="8c53fd0c-a587-4f90-978f-9b6b4906ef9a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b2c9c319-05d3-858f-ecdb-c785279a33e5">
      <Execution id="399537cd-26e2-4316-9f11-9f52af4d3539" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="RemoveMemberForAChannel" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d871c596-d51c-32a3-d78a-f9b6ed7868a8">
      <Execution id="e8528848-4d10-407f-8b12-622cfcc7fa8d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="23b61850-f73c-f5eb-17ca-9aaba5f44c54">
      <Execution id="143a2f80-65d9-48ed-83c0-008824448d3d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="040fb33d-7655-40ce-1cff-6bcf94c5cc47">
      <Execution id="530f95ef-bf5e-498c-9da1-dadb4528e35e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="JoiningAndLeavingChannels" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1d07225f-97f1-fdcb-e603-fea46f8b9792">
      <Execution id="9849ab92-c42d-4f86-8afb-5d8caa723a9e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.PresenceEventEngineFeature" name="JoiningAndLeavingChannels" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f8d35157-2900-b4b5-1a17-900588c884a9">
      <Execution id="08b6fe72-8650-4e07-b40e-ada00955aa92" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="446be40b-3f39-dc72-f797-9a3aa2aac484">
      <Execution id="b0cd227a-6fd4-44dc-82ed-eb34cbae9347" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="984e3d49-4d22-c80b-52c3-19191f62fda7">
      <Execution id="1173c13e-dd82-4199-b961-ea0ba2c439bd" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4dab3f58-f834-dddd-fa3d-a0f55f715d14">
      <Execution id="f54371e7-7c83-43b3-8ead-4bbbc4d31fe3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="85374129-b31e-6699-e3e3-35edfbf2f310">
      <Execution id="9e21a630-b7be-4166-947d-abf79d923388" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="219f8da3-cc63-e002-72df-e2f549e52967">
      <Execution id="413b7429-52a5-4f1c-bb52-f4654f87a739" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadata" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc7a74bf-9a5b-2257-fa8b-50752bdbf702">
      <Execution id="11a201ab-9879-4416-8257-84964266e4bc" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="fb67481e-37a3-f171-7a64-13ebf12d3989">
      <Execution id="35640f0a-3c81-44b4-891d-30c8fa308033" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02e294ba-02db-f21e-dc59-8e7c9444841f">
      <Execution id="00e299e3-40f0-4194-9afe-fb15358d2a04" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="HandshakeFailureRecovery" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9bb7c02e-b85a-d370-6cfc-0ac356d6be53">
      <Execution id="f27efbc1-b812-4018-b4dc-a1f734288a1b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.EventEngineFeature" name="HandshakeFailureRecovery" />
    </UnitTest>
    <UnitTest name="RemoveMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="96ff7052-903d-d61a-0cb2-cdee63831172">
      <Execution id="82c7ff40-b13e-4cfe-aaa3-e4ff3ebe0df8" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembership" />
    </UnitTest>
    <UnitTest name="SuccessfullyRestoreSubscribeWithFailures" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4f5e4dcd-026e-dbea-14fe-5aa5192c38da">
      <Execution id="b23cca1d-3e93-46bc-9140-415aa8a8e86b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.EventEngineFeature" name="SuccessfullyRestoreSubscribeWithFailures" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="71353074-59f3-561d-2fde-c864cf9dfcb6">
      <Execution id="6459ae4e-9b18-4f03-ab76-6fda174ffbf1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555">
      <Execution id="da37ba8c-c665-4f46-9628-8a00bf87866e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0f851786-a6db-a75b-11ec-b9549b68d0b8">
      <Execution id="d692ceb1-fb02-499d-a45e-2afcfa79c6b3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4401ff2d-c38b-51a8-f6b5-791f859c7098">
      <Execution id="b69c1fb8-327a-4bec-b956-5fbf9dcd034f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="GetMembershipsForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ba48247e-b680-05e2-ec8e-cd712552a6ee">
      <Execution id="63f1146f-11fc-44e7-b35d-aa5cf58eb2bd" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForCurrentUser" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="84e090d8-441a-8861-c4e5-70620525fefd">
      <Execution id="f7aa1bbc-b5d3-4b6c-872c-4095e8b4f092" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa">
      <Execution id="2f7f23d7-5efa-44d7-965b-7275dc44337e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithoutAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5e071152-ee43-67c0-dc5d-67a966171b99">
      <Execution id="437c62fe-2188-48d3-a8c2-4901ac38e242" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithoutAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="42ca667a-a020-f899-567b-164563a5f68c">
      <Execution id="87df01cb-4192-4ded-8406-c9e99b19bc57" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetMemberWithCustomForAChannelAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="86189ae4-95f9-30e4-f4c6-bfa1b9898a62">
      <Execution id="36f8f246-c078-408c-b208-411e161a0151" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberWithCustomForAChannelAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="GetAUUIDWithCustomMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="78605226-9a65-4701-5dbe-74fd1152b767">
      <Execution id="bbe341c9-a8e4-475e-a116-ecb35b3bcab5" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDWithCustomMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d2b950d-d4be-de51-1cfb-07073f6d6e13">
      <Execution id="aa4220aa-053c-4e0b-8564-c776ccd53dc4" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RecoveryFromOneUnexpectedErrorAlongTheWay" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="524c1966-6494-a6c3-e952-972895ca93c8">
      <Execution id="bec30858-cc35-41f6-8069-afe6dc243d37" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.PresenceEventEngineFeature" name="RecoveryFromOneUnexpectedErrorAlongTheWay" />
    </UnitTest>
    <UnitTest name="RemoveMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="046e940e-ed7b-e2be-b9c9-fa82caaefa8a">
      <Execution id="4e286682-0132-4bff-b204-bbca26270c68" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="6af2fe2f-9fc6-6af1-e346-da11b3a31319">
      <Execution id="d4161f18-1bda-4f7b-83ca-e302bc6b95f1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19c50b46-2552-1ee8-9a15-6db5bb83fc13">
      <Execution id="fb0ceef8-7b69-404c-aa15-77773763012d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="ManageMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4abae91a-e1c2-11c6-c78e-4c0a98abeb41">
      <Execution id="3ea24c34-55ab-482a-82c4-23cffc0ea1ae" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="ManageMembersForAChannel" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b">
      <Execution id="f88c86d3-00bb-49cb-90c5-ba8d1ea2042c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0c1a37b6-b16e-3d65-7b38-756d59a051b1">
      <Execution id="17708bfc-c0b1-40ee-8916-d87a5ce35e8b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadata" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bf64e30a-5c5e-95e0-c813-0cfcc293de1e">
      <Execution id="1eebcc36-970d-4f4d-8416-c8227ba266b7" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="SuccessfullyJoinedAFewChannels" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4a51fa6c-5b4f-6c50-4ded-2a50ec351293">
      <Execution id="6a772191-0990-4d28-bece-242717b3eec3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.PresenceEventEngineFeature" name="SuccessfullyJoinedAFewChannels" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5271a851-e8d2-c42c-aad6-49024c68a9d5">
      <Execution id="3431811c-3a05-414d-b151-f541ee923f7d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0992672a-4884-80d0-5142-7d4a75036ed9">
      <Execution id="4df54f7c-0b88-4604-8e1e-9344ba6e02d0" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="GetAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d717777f-cd83-a14f-a06e-85ad7a167630">
      <Execution id="a0a90b5b-c039-4fa2-9ae5-d13e0eab1f07" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="GetMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3405a88a-853b-5aa4-dc52-211f74db4a9b">
      <Execution id="3c5a8de5-7745-478a-99fc-1a0a7c8c1c4c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForAChannel" />
    </UnitTest>
    <UnitTest name="ReceivingFailureRecovery" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9c112724-e910-9610-f068-0224805f3f30">
      <Execution id="7d1563ee-da41-4072-bc3f-39d9802f807d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Event_Engine.EventEngineFeature" name="ReceivingFailureRecovery" />
    </UnitTest>
    <UnitTest name="GetAChannelWithCustomMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="8a1c2bbd-f61b-135c-270f-157e7106103a">
      <Execution id="6df5e8af-1931-4fbc-a35e-ae7b4af6a1b1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelWithCustomMetadata" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1680f939-c9a3-3184-e5e6-300d132ea901">
      <Execution id="03b2537a-395f-44ba-996d-5854e111e5bb" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="70fed881-ff3d-cf01-fc50-eec23bec4b15">
      <Execution id="7f3148b6-8d9b-4288-af90-6423cd7323ec" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3a8dac54-e42a-8256-0f95-9b2771dcaeda">
      <Execution id="3b6f81ea-6e6b-45a7-a364-02844c53008d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="SetAChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="947b833a-a96c-d64f-e9e3-0beaa935d4d5">
      <Execution id="5b54b5c6-1788-4c19-9b42-823474a982b3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="SetAChannelMetadata" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81">
      <Execution id="a984f338-10b0-4ec4-a494-0d8001c04a67" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7f798889-8174-9314-5795-cf39887a4d5e">
      <Execution id="1e08622f-87c7-4944-bace-db853604035a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3b96f760-7a4a-da94-3ca5-8f27e0604482">
      <Execution id="8d942499-123b-4e79-ae74-e6bf1584b6fa" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed5af684-441e-e3d8-3bf2-a26f2fd3f117">
      <Execution id="bb96d5bd-3af5-4135-8378-caeedfef811b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberForAChannel" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ea054fa2-926d-1779-cc57-db94ba1a4d6a">
      <Execution id="aa88708b-5a61-4309-9d85-35b364ab2ef6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="21d875cb-d7ef-e04a-3cc4-907443abf187">
      <Execution id="fcbb1eb4-5555-4c9d-af85-26ed50786b21" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" executionId="925adf05-25ae-4708-899a-f07d8f477ec2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02e294ba-02db-f21e-dc59-8e7c9444841f" executionId="00e299e3-40f0-4194-9afe-fb15358d2a04" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" executionId="f025b499-d27e-4bdc-a746-9155bed360e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" executionId="2157b4fa-1828-42bf-a30f-346b1554419d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" executionId="e8651fa8-8b1d-4828-b56a-59f6390bb4d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1680f939-c9a3-3184-e5e6-300d132ea901" executionId="03b2537a-395f-44ba-996d-5854e111e5bb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" executionId="63f1146f-11fc-44e7-b35d-aa5cf58eb2bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78a2948f-1e6f-bc34-da6a-7718af2fe45b" executionId="13be7bb9-6240-4ecd-b0a6-1d6d45a960ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" executionId="3c5a8de5-7745-478a-99fc-1a0a7c8c1c4c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" executionId="3b6f81ea-6e6b-45a7-a364-02844c53008d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" executionId="0deb134d-9ed1-43ff-87dd-390ec4ca8c0d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07a0b332-7585-5132-2931-ba67f585bbfd" executionId="db3d4fbf-885b-4980-93e8-d49b5e389e5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="9cfa9f78-5f71-4f66-90fe-589cc1bd49f0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" executionId="14fb2463-5590-4b16-ab46-12b644fa26e0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31dac960-539b-5857-5a33-455fe8d5a38f" executionId="202c6fcf-7db5-4d95-861c-a6c0769e5288" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed3513bd-2d36-bad0-70c5-813865e78b06" executionId="8c53fd0c-a587-4f90-978f-9b6b4906ef9a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="219f8da3-cc63-e002-72df-e2f549e52967" executionId="413b7429-52a5-4f1c-bb52-f4654f87a739" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f114629c-3c3b-e71d-e1df-1b4312712d85" executionId="bd1cf21a-9705-4616-ba73-db4100946916" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" executionId="399537cd-26e2-4316-9f11-9f52af4d3539" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" executionId="d45c7a73-e77e-4ed2-99d0-59468e47e69d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be80e17e-abe8-75e0-46d0-fbe19949d37d" executionId="8361444b-b7be-48e6-af62-567c862954e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" executionId="06b6191a-1fdf-4cc2-8680-6df4d680f7d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e079e022-b7dd-5746-ddcb-acbf542a744e" executionId="7e5d36b1-0e44-43d5-9de8-4db4d197f26f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63f82b54-f147-1707-8ae8-1f771750a4c8" executionId="58492d09-7100-4fab-ab78-b0b286d907ab" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" executionId="3810110e-956c-4b97-93be-369ad09a1643" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" executionId="e8528848-4d10-407f-8b12-622cfcc7fa8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50604149-da7b-7eb8-2563-57d2dd368452" executionId="70938201-b7cb-4812-b339-433f028e9612" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" executionId="36f8f246-c078-408c-b208-411e161a0151" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" executionId="3f06f480-21f5-4a27-8eac-6d52fcbff84c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" executionId="5b54b5c6-1788-4c19-9b42-823474a982b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d07225f-97f1-fdcb-e603-fea46f8b9792" executionId="9849ab92-c42d-4f86-8afb-5d8caa723a9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" executionId="f88c86d3-00bb-49cb-90c5-ba8d1ea2042c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" executionId="530f95ef-bf5e-498c-9da1-dadb4528e35e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" executionId="3431811c-3a05-414d-b151-f541ee923f7d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9bb7c02e-b85a-d370-6cfc-0ac356d6be53" executionId="f27efbc1-b812-4018-b4dc-a1f734288a1b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" executionId="2f7f23d7-5efa-44d7-965b-7275dc44337e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" executionId="aa4220aa-053c-4e0b-8564-c776ccd53dc4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" executionId="a48ea615-dd19-4399-85c2-f5705dda1a3f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d533b002-ecc8-a6e4-0a55-5406f8886899" executionId="32350d56-08f9-468a-9538-d3bd208baba5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" executionId="fb0ceef8-7b69-404c-aa15-77773763012d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" executionId="d4161f18-1bda-4f7b-83ca-e302bc6b95f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f407184-5438-edfb-bd06-dac05bac3790" executionId="4fbd6062-bc3f-4507-b146-274c3d688b75" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" executionId="fc254e41-53f5-4414-9340-6bdf491a8fed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bee75210-e3b0-c570-b8a4-c27baac780a1" executionId="6d594684-4e2b-4844-a5bd-8322c24aa737" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" executionId="c2840422-9891-4638-862f-d424b8ed64f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cddd27ac-7387-0391-36be-b1b706556ac6" executionId="77edbfbc-a66d-494c-94d7-581ec91a6bc8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78605226-9a65-4701-5dbe-74fd1152b767" executionId="bbe341c9-a8e4-475e-a116-ecb35b3bcab5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="798a8e71-c3a5-952d-b167-1f516fd90da6" executionId="c9d74d7c-3d20-4f68-acbb-61d8a8cd7cb4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" executionId="1eebcc36-970d-4f4d-8416-c8227ba266b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8d35157-2900-b4b5-1a17-900588c884a9" executionId="08b6fe72-8650-4e07-b40e-ada00955aa92" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" executionId="aa88708b-5a61-4309-9d85-35b364ab2ef6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" executionId="a984f338-10b0-4ec4-a494-0d8001c04a67" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" executionId="f54371e7-7c83-43b3-8ead-4bbbc4d31fe3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" executionId="17708bfc-c0b1-40ee-8916-d87a5ce35e8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" executionId="b69c1fb8-327a-4bec-b956-5fbf9dcd034f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="446be40b-3f39-dc72-f797-9a3aa2aac484" executionId="b0cd227a-6fd4-44dc-82ed-eb34cbae9347" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" executionId="4e286682-0132-4bff-b204-bbca26270c68" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f5e4dcd-026e-dbea-14fe-5aa5192c38da" executionId="b23cca1d-3e93-46bc-9140-415aa8a8e86b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f798889-8174-9314-5795-cf39887a4d5e" executionId="1e08622f-87c7-4944-bace-db853604035a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17537441-5c46-b29c-7a15-7f733fa6a240" executionId="be80a73e-3d48-46f9-8e3e-480832863ea2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e071152-ee43-67c0-dc5d-67a966171b99" executionId="437c62fe-2188-48d3-a8c2-4901ac38e242" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="785e20b7-0681-3d5e-8c02-431a4435768d" executionId="93ee0aa7-10eb-4249-82b9-6571b5a1a5bb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a1c2bbd-f61b-135c-270f-157e7106103a" executionId="6df5e8af-1931-4fbc-a35e-ae7b4af6a1b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96ff7052-903d-d61a-0cb2-cdee63831172" executionId="82c7ff40-b13e-4cfe-aaa3-e4ff3ebe0df8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" executionId="143a2f80-65d9-48ed-83c0-008824448d3d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f753e1e9-3215-7499-f9d3-03db6fd8fec6" executionId="f5013162-44ad-489c-a9ce-6ea075fb7706" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb67481e-37a3-f171-7a64-13ebf12d3989" executionId="35640f0a-3c81-44b4-891d-30c8fa308033" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="1173c13e-dd82-4199-b961-ea0ba2c439bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="9525e6e7-986b-49fa-9b90-743488d8c0f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" executionId="dd943947-b774-4f8e-8ee4-9dc23ddaa4a5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0992672a-4884-80d0-5142-7d4a75036ed9" executionId="4df54f7c-0b88-4604-8e1e-9344ba6e02d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="dba69f10-0475-4884-8220-b3e52657552e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d717777f-cd83-a14f-a06e-85ad7a167630" executionId="a0a90b5b-c039-4fa2-9ae5-d13e0eab1f07" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="524c1966-6494-a6c3-e952-972895ca93c8" executionId="bec30858-cc35-41f6-8069-afe6dc243d37" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" executionId="5a1ff8c7-547d-49a6-be56-0cf88743c7c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02189687-8985-6806-f35e-66f7f45f4e75" executionId="7e656cf8-f3ac-47ea-b316-a6bf81ed7e35" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84e090d8-441a-8861-c4e5-70620525fefd" executionId="f7aa1bbc-b5d3-4b6c-872c-4095e8b4f092" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" executionId="3ea24c34-55ab-482a-82c4-23cffc0ea1ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c824fd41-84e4-6d43-8411-04262c295a77" executionId="ab192783-c72c-4ce5-8373-33655a55a64f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" executionId="d692ceb1-fb02-499d-a45e-2afcfa79c6b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="238d7046-3682-e357-765d-2a21c813602e" executionId="a73ece1a-0a6a-499b-a073-29ac8056dd74" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" executionId="f8f42c39-f8ce-4449-aeb3-e959a505ceb9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" executionId="4a0223e6-283f-4e07-bed6-ac9cd97b3c70" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be8b1c28-897b-72b1-79de-44eed3d3394f" executionId="be7eb2d1-40f7-4f2f-829f-97b6a6efabbe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee450aac-5f02-8238-a55d-792600e33298" executionId="8b386836-07e4-4a58-a4f5-762df3acc261" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" executionId="11a201ab-9879-4416-8257-84964266e4bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42ca667a-a020-f899-567b-164563a5f68c" executionId="87df01cb-4192-4ded-8406-c9e99b19bc57" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" executionId="bb96d5bd-3af5-4135-8378-caeedfef811b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" executionId="850c2f3e-a9aa-49f4-8715-e804c5a3070c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60e5b02d-603e-8172-2213-6ea7fd0250af" executionId="f73542c6-339e-4a97-80c5-ea8bd3cafc9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96d493fa-312d-9ae2-5c5a-5d6187729524" executionId="ff0ecc7e-262c-4948-952a-ca8d184f77a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c112724-e910-9610-f068-0224805f3f30" executionId="7d1563ee-da41-4072-bc3f-39d9802f807d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71353074-59f3-561d-2fde-c864cf9dfcb6" executionId="6459ae4e-9b18-4f03-ab76-6fda174ffbf1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a51fa6c-5b4f-6c50-4ded-2a50ec351293" executionId="6a772191-0990-4d28-bece-242717b3eec3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" executionId="8d942499-123b-4e79-ae74-e6bf1584b6fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21d875cb-d7ef-e04a-3cc4-907443abf187" executionId="fcbb1eb4-5555-4c9d-af85-26ed50786b21" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85374129-b31e-6699-e3e3-35edfbf2f310" executionId="9e21a630-b7be-4166-947d-abf79d923388" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" executionId="7f3148b6-8d9b-4288-af90-6423cd7323ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" executionId="da37ba8c-c665-4f46-9628-8a00bf87866e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Completed">
    <Counters total="99" executed="99" passed="99" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>NUnit Adapter 4.4.0.0: Test execution started&#xD;
Running all tests in D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll&#xD;
   NUnit3TestExecutor discovered 99 of 99 NUnit test cases using Current Discovery mode, Non-Explicit run&#xD;
NUnit Adapter 4.4.0.0: Test execution complete&#xD;
</StdOut>
    </Output>
    <RunInfos>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.6379647+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.6435512+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.6436489+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.6445036+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.6497002+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.6549546+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.6656699+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.6783728+00:00">
        <Text>Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.6859593+00:00">
        <Text>Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8284732+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8285780+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8286268+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8286565+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8286948+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8287242+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8287598+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8287991+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8289424+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8296412+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8297207+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8297604+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8298126+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8298523+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8298957+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8299317+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8299690+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8301289+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8333560+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8334425+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8334849+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8335393+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8336871+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8379295+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8416225+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8450527+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8478796+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8521248+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8550589+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8585319+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8629025+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8657236+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8689689+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8724422+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8758110+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8786186+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8827374+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8845431+00:00">
        <Text>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8898523+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:40.8936074+00:00">
        <Text>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:51.0020617+00:00">
        <Text>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I subscribe&#xD;
PNSubscribeOperation PNConnectionErrorCategory 0&#xD;
-&gt; done: EventEngineSteps.WhenISubscribe() (10.0s)&#xD;
Then I receive an error in my subscribe response&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveAnErrorInMySubscribeResponse() (0.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                        |&#xD;
  | event      | SUBSCRIPTION_CHANGED        |&#xD;
  | invocation | HANDSHAKE                   |&#xD;
  | event      | HANDSHAKE_FAILURE           |&#xD;
  | invocation | CANCEL_HANDSHAKE            |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_FAILURE |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_FAILURE |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_FAILURE |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_GIVEUP  |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | EMIT_STATUS                 |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:56.8661617+00:00">
        <Text>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I subscribe&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribe() (4.8s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"{\r\n  \"content\": \"Hello world!\"\r\n}","Timetoken":0,"Publisher":"tomato","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (1.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                        |&#xD;
  | event      | SUBSCRIPTION_CHANGED        |&#xD;
  | invocation | HANDSHAKE                   |&#xD;
  | event      | HANDSHAKE_FAILURE           |&#xD;
  | invocation | CANCEL_HANDSHAKE            |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_FAILURE |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_SUCCESS |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | EMIT_STATUS                 |&#xD;
  | invocation | RECEIVE_MESSAGES            |&#xD;
  | event      | RECEIVE_SUCCESS             |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES     |&#xD;
  | invocation | EMIT_MESSAGES               |&#xD;
  | invocation | RECEIVE_MESSAGES            |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:55:59.2538200+00:00">
        <Text>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I subscribe&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribe() (0.0s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"{\r\n  \"content\": \"Hello world!\"\r\n}","Timetoken":0,"Publisher":"tomato","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (2.4s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                      |&#xD;
  | event      | SUBSCRIPTION_CHANGED      |&#xD;
  | invocation | HANDSHAKE                 |&#xD;
  | event      | HANDSHAKE_SUCCESS         |&#xD;
  | invocation | CANCEL_HANDSHAKE          |&#xD;
  | invocation | EMIT_STATUS               |&#xD;
  | invocation | RECEIVE_MESSAGES          |&#xD;
  | event      | RECEIVE_FAILURE           |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES   |&#xD;
  | invocation | RECEIVE_RECONNECT         |&#xD;
  | event      | RECEIVE_RECONNECT_SUCCESS |&#xD;
  | invocation | CANCEL_RECEIVE_RECONNECT  |&#xD;
  | invocation | EMIT_MESSAGES             |&#xD;
  | invocation | RECEIVE_MESSAGES          |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:00.2875141+00:00">
        <Text>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
When I subscribe&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribe() (0.0s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"hello","Timetoken":0,"Publisher":"a","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (1.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                    |&#xD;
  | event      | SUBSCRIPTION_CHANGED    |&#xD;
  | invocation | HANDSHAKE               |&#xD;
  | event      | HANDSHAKE_SUCCESS       |&#xD;
  | invocation | CANCEL_HANDSHAKE        |&#xD;
  | invocation | EMIT_STATUS             |&#xD;
  | invocation | RECEIVE_MESSAGES        |&#xD;
  | event      | RECEIVE_SUCCESS         |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES |&#xD;
  | invocation | EMIT_MESSAGES           |&#xD;
  | invocation | RECEIVE_MESSAGES        |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:01.3183781+00:00">
        <Text>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
When I subscribe with timetoken 12345678901234567&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribeWithTimetoken(12345678901234567) (0.0s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"{\r\n  \"content\": \"Hello world!\"\r\n}","Timetoken":0,"Publisher":"tomato","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (1.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                    |&#xD;
  | event      | SUBSCRIPTION_RESTORED   |&#xD;
  | invocation | HANDSHAKE               |&#xD;
  | event      | HANDSHAKE_SUCCESS       |&#xD;
  | invocation | CANCEL_HANDSHAKE        |&#xD;
  | invocation | EMIT_STATUS             |&#xD;
  | invocation | RECEIVE_MESSAGES        |&#xD;
  | event      | RECEIVE_SUCCESS         |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES |&#xD;
  | invocation | EMIT_MESSAGES           |&#xD;
  | invocation | RECEIVE_MESSAGES        |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:05.2584458+00:00">
        <Text>Given the demo keyset with event engine enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithEventEngineEnabled() (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I subscribe with timetoken 12345678901234567&#xD;
PNSubscribeOperation PNConnectedCategory 200&#xD;
-&gt; done: EventEngineSteps.WhenISubscribeWithTimetoken(12345678901234567) (2.9s)&#xD;
Then I receive the message in my subscribe response&#xD;
Message received in listener. {"Message":"{\r\n  \"content\": \"Hello world!\"\r\n}","Timetoken":0,"Publisher":"tomato","Channel":"test","Subscription":null,"UserMetadata":null}&#xD;
-&gt; done: EventEngineSteps.ThenIReceiveTheMessageInMySubscribeResponse() (1.0s)&#xD;
And I observe the following:&#xD;
  --- table step argument ---&#xD;
  | type       | name                        |&#xD;
  | event      | SUBSCRIPTION_RESTORED       |&#xD;
  | invocation | HANDSHAKE                   |&#xD;
  | event      | HANDSHAKE_FAILURE           |&#xD;
  | invocation | CANCEL_HANDSHAKE            |&#xD;
  | invocation | HANDSHAKE_RECONNECT         |&#xD;
  | event      | HANDSHAKE_RECONNECT_SUCCESS |&#xD;
  | invocation | CANCEL_HANDSHAKE_RECONNECT  |&#xD;
  | invocation | EMIT_STATUS                 |&#xD;
  | invocation | RECEIVE_MESSAGES            |&#xD;
  | event      | RECEIVE_SUCCESS             |&#xD;
  | invocation | CANCEL_RECEIVE_MESSAGES     |&#xD;
  | invocation | EMIT_MESSAGES               |&#xD;
  | invocation | RECEIVE_MESSAGES            |&#xD;
-&gt; done: EventEngineSteps.ThenIObserveTheFollowing(&lt;table&gt;) (0.0s)&#xD;
None PNDisconnectedCategory 0&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:14.3027174+00:00">
        <Text>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '1', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("1", "60", "false") (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I join 'first', 'second', 'third' channels&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannels("first", "second", "third") (0.0s)&#xD;
Then I receive an error in my heartbeat response&#xD;
-&gt; done: EventEngineSteps.ThenHeartbeatErrorAsync() (9.0s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name                     |&#xD;
  | event      | JOINED                   |&#xD;
  | invocation | HEARTBEAT                |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_GIVEUP         |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:14.3226875+00:00">
        <Text>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '0', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("0", "60", "false") (0.0s)&#xD;
When I join 'first', 'second', 'third' channels&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannels("first", "second", "third") (0.0s)&#xD;
Then I don't observe any Events and Invocations of the Presence EE&#xD;
-&gt; done: EventEngineSteps.ThenIDontObserveAnyEventsAndInvocationsOfThePresenceEE() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:17.4101767+00:00">
        <Text>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '20', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("20", "60", "false") (0.0s)&#xD;
When I join 'first', 'second', 'third' channels with presence&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannelsWithPresence("first", "second", "third") (0.0s)&#xD;
Then I wait for getting Presence joined events&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413743419536,"Occupancy":1,"State":null,"Channel":"first","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
-&gt; done: EventEngineSteps.ThenIWaitForPresenceJoinEvents() (0.0s)&#xD;
Then I leave 'first' and 'second' channels with presence&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413743419854,"Occupancy":1,"State":null,"Channel":"second","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413743419940,"Occupancy":1,"State":null,"Channel":"third","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
-&gt; done: EventEngineSteps.ThenILeaveAndChannelsWithPresence("first", "second") (0.0s)&#xD;
Then I wait '3' seconds&#xD;
-&gt; done: EventEngineSteps.ThenIWaitAsync("3") (3.0s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name              |&#xD;
  | event      | JOINED            |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
  | event      | LEFT              |&#xD;
  | invocation | CANCEL_WAIT       |&#xD;
  | invocation | LEAVE             |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:20.2320844+00:00">
        <Text>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '1', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("1", "60", "false") (0.0s)&#xD;
Given a linear reconnection policy with 3 retries&#xD;
-&gt; done: EventEngineSteps.GivenALinearReconnectionPolicyWithRetries(3) (0.0s)&#xD;
When I join 'first', 'second', 'third' channels with presence&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannelsWithPresence("first", "second", "third") (0.0s)&#xD;
Then I wait for getting Presence joined events&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413801993106,"Occupancy":1,"State":null,"Channel":"first","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
-&gt; done: EventEngineSteps.ThenIWaitForPresenceJoinEvents() (2.8s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name                     |&#xD;
  | event      | JOINED                   |&#xD;
  | invocation | HEARTBEAT                |&#xD;
  | event      | HEARTBEAT_FAILURE        |&#xD;
  | invocation | DELAYED_HEARTBEAT        |&#xD;
  | event      | HEARTBEAT_SUCCESS        |&#xD;
  | invocation | CANCEL_DELAYED_HEARTBEAT |&#xD;
  | invocation | WAIT                     |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413801993244,"Occupancy":1,"State":null,"Channel":"second","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413801993460,"Occupancy":1,"State":null,"Channel":"third","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.2743686+00:00">
        <Text>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '1', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("1", "60", "false") (0.0s)&#xD;
When I join 'first', 'second', 'third' channels&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannels("first", "second", "third") (0.0s)&#xD;
Then I wait '3' seconds&#xD;
-&gt; done: EventEngineSteps.ThenIWaitAsync("3") (3.0s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name              |&#xD;
  | event      | JOINED            |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
  | event      | TIMES_UP          |&#xD;
  | invocation | CANCEL_WAIT       |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
  | event      | TIMES_UP          |&#xD;
  | invocation | CANCEL_WAIT       |&#xD;
  | invocation | HEARTBEAT         |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.3287080+00:00">
        <Text>Given the demo keyset with Presence EE enabled&#xD;
-&gt; done: EventEngineSteps.GivenTheDemoKeysetWithPresenceEEenabled() (0.0s)&#xD;
Given heartbeatInterval set to '1', timeout set to '60' and suppressLeaveEvents set to 'false'&#xD;
-&gt; done: EventEngineSteps.GivenPresenceConfiguration("1", "60", "false") (0.0s)&#xD;
When I join 'first', 'second', 'third' channels with presence&#xD;
-&gt; done: EventEngineSteps.WhenIJoinChannelsWithPresence("first", "second", "third") (0.0s)&#xD;
Then I wait for getting Presence joined events&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413832962858,"Occupancy":1,"State":null,"Channel":"first","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
-&gt; done: EventEngineSteps.ThenIWaitForPresenceJoinEvents() (0.0s)&#xD;
And I observe the following Events and Invocations of the Presence EE:&#xD;
  --- table step argument ---&#xD;
  | type       | name              |&#xD;
  | event      | JOINED            |&#xD;
  | invocation | HEARTBEAT         |&#xD;
  | event      | HEARTBEAT_SUCCESS |&#xD;
  | invocation | WAIT              |&#xD;
-&gt; done: EventEngineSteps.ThenIObserverPresenceEventEngine(&lt;table&gt;) (0.0s)&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413832962980,"Occupancy":1,"State":null,"Channel":"second","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
{"Event":"join","Uuid":"db9c5e39-7c95-40f5-8d71-125765b6f561","Timestamp":17152413832963092,"Occupancy":1,"State":null,"Channel":"third","Subscription":"","Timetoken":0,"UserMetadata":null,"Join":null,"Timeout":null,"Leave":null,"HereNowRefresh":false}&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.3799591+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.4019911+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.4207100+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.4394091+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.5313932+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.8357562+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.8705202+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.9182107+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.9408220+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.9714322+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:23.9950334+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.0177521+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.0489119+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.0878944+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.1182090+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.1586863+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.1853992+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.2171279+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.2476684+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.2925278+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.3341230+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.3610132+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.3945844+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.4187168+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.4900664+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.1s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.5193206+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.5438927+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.5733331+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.5964536+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.6213850+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.6440397+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.6663117+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.6858313+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.7131091+00:00">
        <Text>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.7391556+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.7562860+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.7732220+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1387-11" outcome="Warning" timestamp="2024-05-09T07:56:24.7907652+00:00">
        <Text>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
</Text>
      </RunInfo>
    </RunInfos>
  </ResultSummary>
</TestRun>
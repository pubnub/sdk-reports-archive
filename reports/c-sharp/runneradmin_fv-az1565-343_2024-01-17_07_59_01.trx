<?xml version="1.0" encoding="utf-8"?>
<TestRun id="684c1e6d-07fd-4cae-a367-bfdddb73fc95" name="runneradmin@fv-az1565-343 2024-01-17 07:59:01" runUser="fv-az1565-343\runneradmin" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2024-01-17T07:59:01.6169657+00:00" queuing="2024-01-17T07:59:01.6169658+00:00" start="2024-01-17T07:59:00.2376164+00:00" finish="2024-01-17T07:59:02.8736318+00:00" />
  <TestSettings name="default" id="b6d363fc-2790-4cd9-89de-382745ef363e">
    <Deployment runDeploymentRoot="runneradmin_fv-az1565-343_2024-01-17_07_59_01" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="0475f435-3008-4f3d-b05b-b42196cd2116" testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" testName="GetAllChannelMetadata" computerName="fv-az1565-343" duration="00:00:00.0215680" startTime="2024-01-17T07:59:02.0640700+00:00" endTime="2024-01-17T07:59:02.0856384+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0475f435-3008-4f3d-b05b-b42196cd2116">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0868fe90-9a46-4ad6-9b77-2f6f1875c214" testId="8a1c2bbd-f61b-135c-270f-157e7106103a" testName="GetAChannelWithCustomMetadata" computerName="fv-az1565-343" duration="00:00:00.0183450" startTime="2024-01-17T07:59:02.0455836+00:00" endTime="2024-01-17T07:59:02.0639290+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0868fe90-9a46-4ad6-9b77-2f6f1875c214">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="efc6af69-16ea-4120-950a-b5cce7a08ae3" testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0083719" startTime="2024-01-17T07:59:01.5851102+00:00" endTime="2024-01-17T07:59:01.5934819+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="efc6af69-16ea-4120-950a-b5cce7a08ae3">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a15b665-2c6c-46c2-951c-e8da3900e120" testId="446be40b-3f39-dc72-f797-9a3aa2aac484" testName="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" computerName="fv-az1565-343" duration="00:00:00.0182040" startTime="2024-01-17T07:59:01.7825275+00:00" endTime="2024-01-17T07:59:01.8007311+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a15b665-2c6c-46c2-951c-e8da3900e120">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a8e9a48-e53f-4173-905f-9e9ded2289d2" testId="71353074-59f3-561d-2fde-c864cf9dfcb6" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0127510" startTime="2024-01-17T07:59:01.5567442+00:00" endTime="2024-01-17T07:59:01.5694954+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a8e9a48-e53f-4173-905f-9e9ded2289d2">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c102651-799e-4bb5-a8ae-1e13df260322" testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0027620" startTime="2024-01-17T07:59:01.6260417+00:00" endTime="2024-01-17T07:59:01.6288039+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c102651-799e-4bb5-a8ae-1e13df260322">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5405711e-9bca-4030-b341-cc8dea09195f" testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" testName="RemoveMembershipForCurrentUser" computerName="fv-az1565-343" duration="00:00:00.0133540" startTime="2024-01-17T07:59:02.4692276+00:00" endTime="2024-01-17T07:59:02.4825813+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5405711e-9bca-4030-b341-cc8dea09195f">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b300978-32a2-4715-a9dc-ea38db0065c2" testId="50604149-da7b-7eb8-2563-57d2dd368452" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0022390" startTime="2024-01-17T07:59:01.6318293+00:00" endTime="2024-01-17T07:59:01.6340679+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b300978-32a2-4715-a9dc-ea38db0065c2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ee9e2f0a-01de-4ae0-a564-944894f74a47" testId="84e090d8-441a-8861-c4e5-70620525fefd" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0057160" startTime="2024-01-17T07:59:01.5462258+00:00" endTime="2024-01-17T07:59:01.5519418+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee9e2f0a-01de-4ae0-a564-944894f74a47">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="be957669-ed7c-47a0-bdcc-9998135a7dd6" testId="42ca667a-a020-f899-567b-164563a5f68c" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0038940" startTime="2024-01-17T07:59:01.4719144+00:00" endTime="2024-01-17T07:59:01.4758089+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be957669-ed7c-47a0-bdcc-9998135a7dd6">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0e352424-b42b-4dc7-80d4-284a287f04bc" testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0018230" startTime="2024-01-17T07:59:01.6396147+00:00" endTime="2024-01-17T07:59:01.6414371+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e352424-b42b-4dc7-80d4-284a287f04bc">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3b740ebc-0f65-4bb3-8d5a-bce35c1ee455" testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0021160" startTime="2024-01-17T07:59:01.6438448+00:00" endTime="2024-01-17T07:59:01.6459608+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b740ebc-0f65-4bb3-8d5a-bce35c1ee455">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="262e841b-53b0-4e15-b6ec-5071f52920a1" testId="31dac960-539b-5857-5a33-455fe8d5a38f" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0094980" startTime="2024-01-17T07:59:01.5003403+00:00" endTime="2024-01-17T07:59:01.5098383+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="262e841b-53b0-4e15-b6ec-5071f52920a1">
      <Output>
        <StdOut>Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b411ba9-f336-4415-97a6-543471df875d" testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" testName="ManageMembershipsForAUUID" computerName="fv-az1565-343" duration="00:00:00.0260920" startTime="2024-01-17T07:59:02.4252305+00:00" endTime="2024-01-17T07:59:02.4513229+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b411ba9-f336-4415-97a6-543471df875d">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8cb487f8-754d-43c3-bec7-fbdf3253d093" testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" testName="SetMemberForAChannel" computerName="fv-az1565-343" duration="00:00:00.0202630" startTime="2024-01-17T07:59:02.2452387+00:00" endTime="2024-01-17T07:59:02.2655015+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8cb487f8-754d-43c3-bec7-fbdf3253d093">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e23c8149-437f-4a1c-a29c-0527c8a79992" testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0026820" startTime="2024-01-17T07:59:01.6107502+00:00" endTime="2024-01-17T07:59:01.6134321+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e23c8149-437f-4a1c-a29c-0527c8a79992">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cfefef92-2d6b-4476-9e20-2be54ebc6740" testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" testName="SetMembershipForCurrentUser" computerName="fv-az1565-343" duration="00:00:00.0177190" startTime="2024-01-17T07:59:02.5005754+00:00" endTime="2024-01-17T07:59:02.5182943+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cfefef92-2d6b-4476-9e20-2be54ebc6740">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3cf44e64-f4b4-4e83-abb3-cc9093ce1d91" testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0186270" startTime="2024-01-17T07:59:01.5100512+00:00" endTime="2024-01-17T07:59:01.5286778+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3cf44e64-f4b4-4e83-abb3-cc9093ce1d91">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4518a31a-145e-4836-a503-38d7b651fad2" testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0027650" startTime="2024-01-17T07:59:01.5519559+00:00" endTime="2024-01-17T07:59:01.5547208+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4518a31a-145e-4836-a503-38d7b651fad2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="13a6a110-ff85-4db1-ab63-76aa696b7dab" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0021310" startTime="2024-01-17T07:59:01.6488378+00:00" endTime="2024-01-17T07:59:01.6509686+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="13a6a110-ff85-4db1-ab63-76aa696b7dab">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4771b383-4ecd-4701-bb5f-16b4d6cc056a" testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0028320" startTime="2024-01-17T07:59:01.6288939+00:00" endTime="2024-01-17T07:59:01.6317263+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4771b383-4ecd-4701-bb5f-16b4d6cc056a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b5c87bb9-2d20-42d1-8419-bedcef22162e" testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" testName="RevokeExistingValidToken" computerName="fv-az1565-343" duration="00:00:00.0091960" startTime="2024-01-17T07:59:02.6785702+00:00" endTime="2024-01-17T07:59:02.6877666+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b5c87bb9-2d20-42d1-8419-bedcef22162e">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eac99d38-5772-45d6-a375-98af1bc312bc" testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" testName="GetAChannelMetadataForId" computerName="fv-az1565-343" duration="00:00:00.0481410" startTime="2024-01-17T07:59:01.9973391+00:00" endTime="2024-01-17T07:59:02.0454808+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eac99d38-5772-45d6-a375-98af1bc312bc">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6e4649d5-334d-47de-894c-a183c2550de4" testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" testName="GetAllUUIDMetadataWithCustom" computerName="fv-az1565-343" duration="00:00:00.0159070" startTime="2024-01-17T07:59:02.5402006+00:00" endTime="2024-01-17T07:59:02.5561079+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e4649d5-334d-47de-894c-a183c2550de4">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="43bcfab7-ccc4-40ee-a639-e2b279bc2e99" testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" testName="GetMembershipsForUUID" computerName="fv-az1565-343" duration="00:00:00.0899210" startTime="2024-01-17T07:59:02.3145367+00:00" endTime="2024-01-17T07:59:02.4044591+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="43bcfab7-ccc4-40ee-a639-e2b279bc2e99">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.1s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="738c6f32-7e95-4826-97ba-6b736b92887d" testId="f114629c-3c3b-e71d-e1df-1b4312712d85" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0135030" startTime="2024-01-17T07:59:01.4866951+00:00" endTime="2024-01-17T07:59:01.5001979+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="738c6f32-7e95-4826-97ba-6b736b92887d">
      <Output>
        <StdOut>Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1028a41a-4595-4931-90f0-5401055e2ee4" testId="798a8e71-c3a5-952d-b167-1f516fd90da6" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0088630" startTime="2024-01-17T07:59:01.4759964+00:00" endTime="2024-01-17T07:59:01.4848595+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1028a41a-4595-4931-90f0-5401055e2ee4">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a5d5cff7-0aa9-4cff-b9a6-35ba42e61ec2" testId="bee75210-e3b0-c570-b8a4-c27baac780a1" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0095120" startTime="2024-01-17T07:59:01.5725255+00:00" endTime="2024-01-17T07:59:01.5820379+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5d5cff7-0aa9-4cff-b9a6-35ba42e61ec2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dedaa954-c9d5-4b87-9ffb-e8d7144758a8" testId="be8b1c28-897b-72b1-79de-44eed3d3394f" testName="RemoveAChannelMetadataForId" computerName="fv-az1565-343" duration="00:00:00.0181470" startTime="2024-01-17T07:59:02.1032653+00:00" endTime="2024-01-17T07:59:02.1214124+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dedaa954-c9d5-4b87-9ffb-e8d7144758a8">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b5c641e-6c24-4a96-b470-4fd1a8db87be" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0020850" startTime="2024-01-17T07:59:01.6663567+00:00" endTime="2024-01-17T07:59:01.6684421+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b5c641e-6c24-4a96-b470-4fd1a8db87be">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="86acd0ec-bf4f-4485-88f1-be1c45b64654" testId="21d875cb-d7ef-e04a-3cc4-907443abf187" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0021390" startTime="2024-01-17T07:59:01.6593833+00:00" endTime="2024-01-17T07:59:01.6615220+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86acd0ec-bf4f-4485-88f1-be1c45b64654">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2efce871-f8a8-4dd5-85ac-c6799ac3dc49" testId="78605226-9a65-4701-5dbe-74fd1152b767" testName="GetAUUIDWithCustomMetadataIdStoredInConfig" computerName="fv-az1565-343" duration="00:00:00.0229920" startTime="2024-01-17T07:59:02.5792426+00:00" endTime="2024-01-17T07:59:02.6022344+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2efce871-f8a8-4dd5-85ac-c6799ac3dc49">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0389f01c-5fa7-44e1-8c32-a68066eaffb6" testId="c824fd41-84e4-6d43-8411-04262c295a77" testName="SetMembership" computerName="fv-az1565-343" duration="00:00:00.0179210" startTime="2024-01-17T07:59:02.4826160+00:00" endTime="2024-01-17T07:59:02.5005368+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0389f01c-5fa7-44e1-8c32-a68066eaffb6">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f23e75e-c599-48b7-8fa3-291ac49008df" testId="7f798889-8174-9314-5795-cf39887a4d5e" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.2384620" startTime="2024-01-17T07:59:01.2173253+00:00" endTime="2024-01-17T07:59:01.4557147+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f23e75e-c599-48b7-8fa3-291ac49008df">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c500ce6c-c6fc-476d-bec6-911ad73edc9b" testId="219f8da3-cc63-e002-72df-e2f549e52967" testName="GetAllUUIDMetadata" computerName="fv-az1565-343" duration="00:00:00.0207229" startTime="2024-01-17T07:59:02.5194375+00:00" endTime="2024-01-17T07:59:02.5401605+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c500ce6c-c6fc-476d-bec6-911ad73edc9b">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ef0fbd7e-6675-477c-a965-084ef54aed33" testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0017480" startTime="2024-01-17T07:59:01.6359836+00:00" endTime="2024-01-17T07:59:01.6377311+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef0fbd7e-6675-477c-a965-084ef54aed33">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04f1fdde-287d-4fc6-9fdc-087f61337502" testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0052050" startTime="2024-01-17T07:59:01.5410072+00:00" endTime="2024-01-17T07:59:01.5462119+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04f1fdde-287d-4fc6-9fdc-087f61337502">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1a03ac3c-b9f2-418d-9e10-cf2f5fb201a2" testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0027720" startTime="2024-01-17T07:59:01.6510376+00:00" endTime="2024-01-17T07:59:01.6538092+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a03ac3c-b9f2-418d-9e10-cf2f5fb201a2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3348196b-878d-48b0-ae7a-40d12518762b" testId="85374129-b31e-6699-e3e3-35edfbf2f310" testName="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" computerName="fv-az1565-343" duration="00:00:00.0746230" startTime="2024-01-17T07:59:01.9059742+00:00" endTime="2024-01-17T07:59:01.9805978+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3348196b-878d-48b0-ae7a-40d12518762b">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="552d6a97-0c60-4470-9a28-35f604a2d8ba" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0025650" startTime="2024-01-17T07:59:01.6459967+00:00" endTime="2024-01-17T07:59:01.6485611+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="552d6a97-0c60-4470-9a28-35f604a2d8ba">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bab98944-481c-49b1-a63f-59eb067a1f0c" testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" testName="RemoveMemberForAChannel" computerName="fv-az1565-343" duration="00:00:00.0185690" startTime="2024-01-17T07:59:02.2265662+00:00" endTime="2024-01-17T07:59:02.2451352+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bab98944-481c-49b1-a63f-59eb067a1f0c">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="549107f9-f84d-4ead-af1d-c4feacc0c588" testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" testName="GetAllChannelMetadataWithCustom" computerName="fv-az1565-343" duration="00:00:00.0174060" startTime="2024-01-17T07:59:02.0857469+00:00" endTime="2024-01-17T07:59:02.1031535+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="549107f9-f84d-4ead-af1d-c4feacc0c588">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d9eaf95c-52a3-47f4-b2c9-49660f7372f9" testId="0992672a-4884-80d0-5142-7d4a75036ed9" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" computerName="fv-az1565-343" duration="00:00:00.0116080" startTime="2024-01-17T07:59:01.8115825+00:00" endTime="2024-01-17T07:59:01.8231906+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d9eaf95c-52a3-47f4-b2c9-49660f7372f9">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f46ee359-0c8f-464a-a17b-522488a08a92" testId="63f82b54-f147-1707-8ae8-1f771750a4c8" testName="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" computerName="fv-az1565-343" duration="00:00:00.0825830" startTime="2024-01-17T07:59:01.8232864+00:00" endTime="2024-01-17T07:59:01.9058701+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f46ee359-0c8f-464a-a17b-522488a08a92">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d9da0717-fea0-4ba5-a225-56e20eef9908" testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" testName="SetAChannelMetadata" computerName="fv-az1565-343" duration="00:00:00.0268280" startTime="2024-01-17T07:59:02.1218336+00:00" endTime="2024-01-17T07:59:02.1486613+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d9da0717-fea0-4ba5-a225-56e20eef9908">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e47529b6-2c62-465f-a3f5-1ffbcbd99f3c" testId="96ff7052-903d-d61a-0cb2-cdee63831172" testName="RemoveMembership" computerName="fv-az1565-343" duration="00:00:00.0177870" startTime="2024-01-17T07:59:02.4514031+00:00" endTime="2024-01-17T07:59:02.4691903+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e47529b6-2c62-465f-a3f5-1ffbcbd99f3c">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c94c4c24-b3cb-4af2-a3ad-2d1d763ef7d9" testId="02e294ba-02db-f21e-dc59-8e7c9444841f" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0023040" startTime="2024-01-17T07:59:01.6415044+00:00" endTime="2024-01-17T07:59:01.6438085+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c94c4c24-b3cb-4af2-a3ad-2d1d763ef7d9">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d73f1196-d81d-4e56-ac22-f953c52c9a36" testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0029180" startTime="2024-01-17T07:59:01.4620480+00:00" endTime="2024-01-17T07:59:01.4649662+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d73f1196-d81d-4e56-ac22-f953c52c9a36">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38295d1d-a7f7-4220-beba-9adeba927b4f" testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" testName="RevokeATokenWithCharactersThatRequireUrlEncoding" computerName="fv-az1565-343" duration="00:00:00.0099760" startTime="2024-01-17T07:59:02.6685347+00:00" endTime="2024-01-17T07:59:02.6785107+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38295d1d-a7f7-4220-beba-9adeba927b4f">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b85c03b2-cad9-49ea-a452-b460287c66b4" testId="238d7046-3682-e357-765d-2a21c813602e" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" computerName="fv-az1565-343" duration="00:00:00.0107720" startTime="2024-01-17T07:59:01.8007705+00:00" endTime="2024-01-17T07:59:01.8115427+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b85c03b2-cad9-49ea-a452-b460287c66b4">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9b43153e-63cc-4307-b0a8-40331d8e1b05" testId="d717777f-cd83-a14f-a06e-85ad7a167630" testName="GetAUUIDMetadataForId" computerName="fv-az1565-343" duration="00:00:00.0230110" startTime="2024-01-17T07:59:02.5561685+00:00" endTime="2024-01-17T07:59:02.5791793+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b43153e-63cc-4307-b0a8-40331d8e1b05">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="07153d31-8e69-40eb-a38f-9fc0cc335cce" testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0032350" startTime="2024-01-17T07:59:01.6227493+00:00" endTime="2024-01-17T07:59:01.6259840+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07153d31-8e69-40eb-a38f-9fc0cc335cce">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="40bfdacc-1b57-4fab-ba72-46dfe42cb4ca" testId="60e5b02d-603e-8172-2213-6ea7fd0250af" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0043420" startTime="2024-01-17T07:59:01.4576838+00:00" endTime="2024-01-17T07:59:01.4620256+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40bfdacc-1b57-4fab-ba72-46dfe42cb4ca">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="686113e5-deb0-4520-a77e-3977426b8be9" testId="d533b002-ecc8-a6e4-0a55-5406f8886899" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0018440" startTime="2024-01-17T07:59:01.6341037+00:00" endTime="2024-01-17T07:59:01.6359471+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="686113e5-deb0-4520-a77e-3977426b8be9">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="33eb2796-a9ec-4d8b-8153-c6d56f1aa5a6" testId="02189687-8985-6806-f35e-66f7f45f4e75" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0089670" startTime="2024-01-17T07:59:01.6136374+00:00" endTime="2024-01-17T07:59:01.6226044+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33eb2796-a9ec-4d8b-8153-c6d56f1aa5a6">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="818eaf03-b9c4-4951-9dda-87aec3cdd617" testId="ee450aac-5f02-8238-a55d-792600e33298" testName="RevokeATokenWhileItIsDisabledOnAServer" computerName="fv-az1565-343" duration="00:00:00.0152050" startTime="2024-01-17T07:59:02.6532938+00:00" endTime="2024-01-17T07:59:02.6684990+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="818eaf03-b9c4-4951-9dda-87aec3cdd617">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="639fe7cf-b635-4f8c-a196-79d690f6231c" testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0026660" startTime="2024-01-17T07:59:01.6616144+00:00" endTime="2024-01-17T07:59:01.6642805+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="639fe7cf-b635-4f8c-a196-79d690f6231c">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c543df07-0dc0-4d69-b52d-2e1ba9419a11" testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" testName="SetAUUIDMetadata" computerName="fv-az1565-343" duration="00:00:00.0195940" startTime="2024-01-17T07:59:02.6326139+00:00" endTime="2024-01-17T07:59:02.6522079+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c543df07-0dc0-4d69-b52d-2e1ba9419a11">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03fcab76-1291-4fa8-8797-5a07330179f1" testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0080310" startTime="2024-01-17T07:59:01.5286974+00:00" endTime="2024-01-17T07:59:01.5367287+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03fcab76-1291-4fa8-8797-5a07330179f1">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7921943b-3df4-4934-9618-04c403ed234a" testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0018940" startTime="2024-01-17T07:59:01.6538456+00:00" endTime="2024-01-17T07:59:01.6557397+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7921943b-3df4-4934-9618-04c403ed234a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0d3e0972-1f47-413d-a5ab-4483cc83e635" testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0021510" startTime="2024-01-17T07:59:01.5388426+00:00" endTime="2024-01-17T07:59:01.5409932+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d3e0972-1f47-413d-a5ab-4483cc83e635">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d52e6804-c025-461e-b750-bc85b1f8f247" testId="17537441-5c46-b29c-7a15-7f733fa6a240" testName="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" computerName="fv-az1565-343" duration="00:00:00.1017480" startTime="2024-01-17T07:59:01.6806502+00:00" endTime="2024-01-17T07:59:01.7823986+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d52e6804-c025-461e-b750-bc85b1f8f247">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.1s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5f7092b4-9cd5-484b-81ff-e8ddeb131cd8" testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0018120" startTime="2024-01-17T07:59:01.6377670+00:00" endTime="2024-01-17T07:59:01.6395786+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5f7092b4-9cd5-484b-81ff-e8ddeb131cd8">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ca6f2a5-5f9a-4d23-b5d1-15a224ff0493" testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" testName="SetMemberWithCustomForAChannelAndUUIDWithCustom" computerName="fv-az1565-343" duration="00:00:00.0206189" startTime="2024-01-17T07:59:02.2655768+00:00" endTime="2024-01-17T07:59:02.2861956+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ca6f2a5-5f9a-4d23-b5d1-15a224ff0493">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="46a7806c-ef50-415e-bf7e-12d97a917e61" testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0025950" startTime="2024-01-17T07:59:01.5936732+00:00" endTime="2024-01-17T07:59:01.5962681+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="46a7806c-ef50-415e-bf7e-12d97a917e61">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="025ab147-fbc5-4e6d-9320-5098b4ff03e3" testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0025630" startTime="2024-01-17T07:59:01.6750275+00:00" endTime="2024-01-17T07:59:01.6775904+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="025ab147-fbc5-4e6d-9320-5098b4ff03e3">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d37c6bd-1f8d-4e99-9e9c-0c4f967a5da6" testId="785e20b7-0681-3d5e-8c02-431a4435768d" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0026360" startTime="2024-01-17T07:59:01.5822679+00:00" endTime="2024-01-17T07:59:01.5849042+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d37c6bd-1f8d-4e99-9e9c-0c4f967a5da6">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e8a48186-3768-4bac-88cc-28f89062b401" testId="f8d35157-2900-b4b5-1a17-900588c884a9" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0026660" startTime="2024-01-17T07:59:01.5696301+00:00" endTime="2024-01-17T07:59:01.5722960+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8a48186-3768-4bac-88cc-28f89062b401">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3e5e9b32-2235-40b3-801a-7f453ff85e48" testId="5e071152-ee43-67c0-dc5d-67a966171b99" testName="GrantAnAccessTokenWithoutAnAuthorizedUuid" computerName="fv-az1565-343" duration="00:00:00.0150400" startTime="2024-01-17T07:59:01.9806992+00:00" endTime="2024-01-17T07:59:01.9957391+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e5e9b32-2235-40b3-801a-7f453ff85e48">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c892c402-01f9-4aee-8b5e-694ee10f617c" testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0029200" startTime="2024-01-17T07:59:01.4649795+00:00" endTime="2024-01-17T07:59:01.4678994+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c892c402-01f9-4aee-8b5e-694ee10f617c">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b73951d6-2fd5-4eea-acfc-b0ad676f0da1" testId="07a0b332-7585-5132-2931-ba67f585bbfd" testName="RemoveAUUIDMetadataForId" computerName="fv-az1565-343" duration="00:00:00.0166970" startTime="2024-01-17T07:59:02.6023013+00:00" endTime="2024-01-17T07:59:02.6189987+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b73951d6-2fd5-4eea-acfc-b0ad676f0da1">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fc810636-6673-4631-b059-4f02ffdb0ab4" testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0017150" startTime="2024-01-17T07:59:01.6557759+00:00" endTime="2024-01-17T07:59:01.6574910+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fc810636-6673-4631-b059-4f02ffdb0ab4">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54a9d253-b351-4a4e-b902-4fddfaa9991d" testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0039380" startTime="2024-01-17T07:59:01.6710523+00:00" endTime="2024-01-17T07:59:01.6749902+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54a9d253-b351-4a4e-b902-4fddfaa9991d">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bacfd757-b8fe-475d-b303-9ab88b8bc6ec" testId="fb67481e-37a3-f171-7a64-13ebf12d3989" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0019949" startTime="2024-01-17T07:59:01.5547346+00:00" endTime="2024-01-17T07:59:01.5567299+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bacfd757-b8fe-475d-b303-9ab88b8bc6ec">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c1ff1989-d3e4-4bfe-9c6d-93b77c04e449" testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" testName="ManageMembersForAChannel" computerName="fv-az1565-343" duration="00:00:00.0278460" startTime="2024-01-17T07:59:02.1985765+00:00" endTime="2024-01-17T07:59:02.2264224+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c1ff1989-d3e4-4bfe-9c6d-93b77c04e449">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="79e04d65-e6d1-4154-b09e-7e4dfef390e5" testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" testName="GetMembershipsForCurrentUser" computerName="fv-az1565-343" duration="00:00:00.0270520" startTime="2024-01-17T07:59:02.2874471+00:00" endTime="2024-01-17T07:59:02.3144991+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79e04d65-e6d1-4154-b09e-7e4dfef390e5">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="58ae58a9-7d8d-4657-8d7a-e294d3f62831" testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0141080" startTime="2024-01-17T07:59:01.5964745+00:00" endTime="2024-01-17T07:59:01.6105829+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58ae58a9-7d8d-4657-8d7a-e294d3f62831">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f81dbc47-ce8e-4238-887b-2ee2a62f9c13" testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" testName="RevokeInvalidToken" computerName="fv-az1565-343" duration="00:00:00.0106500" startTime="2024-01-17T07:59:02.6877985+00:00" endTime="2024-01-17T07:59:02.6984485+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f81dbc47-ce8e-4238-887b-2ee2a62f9c13">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="efe4f7f7-3464-4f0a-9bda-5b40beb9dd6b" testId="cddd27ac-7387-0391-36be-b1b706556ac6" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0020030" startTime="2024-01-17T07:59:01.6643172+00:00" endTime="2024-01-17T07:59:01.6663200+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="efe4f7f7-3464-4f0a-9bda-5b40beb9dd6b">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0253029-1da5-49e9-8606-ea2a4590fbff" testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" testName="GetMembershipsForUUIDWithCustomAndChannelCustom" computerName="fv-az1565-343" duration="00:00:00.0206530" startTime="2024-01-17T07:59:02.4045134+00:00" endTime="2024-01-17T07:59:02.4251668+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0253029-1da5-49e9-8606-ea2a4590fbff">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="30d66d15-ce1b-4cbd-bf13-de4563f5bc6a" testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0018180" startTime="2024-01-17T07:59:01.6575278+00:00" endTime="2024-01-17T07:59:01.6593461+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30d66d15-ce1b-4cbd-bf13-de4563f5bc6a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b940164-daf5-4031-a3ee-cb7424d9bee8" testId="ed3513bd-2d36-bad0-70c5-813865e78b06" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0035540" startTime="2024-01-17T07:59:01.4680007+00:00" endTime="2024-01-17T07:59:01.4715549+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b940164-daf5-4031-a3ee-cb7424d9bee8">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6cb1c155-3e59-4f3b-8e12-044131045327" testId="1680f939-c9a3-3184-e5e6-300d132ea901" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0020860" startTime="2024-01-17T07:59:01.5367431+00:00" endTime="2024-01-17T07:59:01.5388288+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6cb1c155-3e59-4f3b-8e12-044131045327">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ffd84831-004d-409b-9e99-a23ad1b3ee9e" testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" testName="RemoveAUUIDMetadataIdStoredInConfig" computerName="fv-az1565-343" duration="00:00:00.0135240" startTime="2024-01-17T07:59:02.6190544+00:00" endTime="2024-01-17T07:59:02.6325782+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ffd84831-004d-409b-9e99-a23ad1b3ee9e">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="062132ef-dd6e-4808-a2b0-41e1cb66b5d6" testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" testName="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" computerName="fv-az1565-343" duration="00:00:00.0203590" startTime="2024-01-17T07:59:02.1781766+00:00" endTime="2024-01-17T07:59:02.1985357+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="062132ef-dd6e-4808-a2b0-41e1cb66b5d6">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e43ebc87-41ec-44a4-b076-287cb39418d8" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az1565-343" duration="00:00:00.0023490" startTime="2024-01-17T07:59:01.6686453+00:00" endTime="2024-01-17T07:59:01.6709944+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e43ebc87-41ec-44a4-b076-287cb39418d8">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="758a51aa-3b7e-4f3a-ba37-0aaed2b284f0" testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" testName="GetMembersForAChannel" computerName="fv-az1565-343" duration="00:00:00.0279270" startTime="2024-01-17T07:59:02.1501404+00:00" endTime="2024-01-17T07:59:02.1780674+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="758a51aa-3b7e-4f3a-ba37-0aaed2b284f0">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="785e20b7-0681-3d5e-8c02-431a4435768d">
      <Execution id="3d37c6bd-1f8d-4e99-9e9c-0c4f967a5da6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d9c0b4d-df8d-d917-f4fe-624101bd0d52">
      <Execution id="ef0fbd7e-6675-477c-a965-084ef54aed33" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="2c1e01dd-81d9-12dc-ec1f-005830932e89">
      <Execution id="552d6a97-0c60-4470-9a28-35f604a2d8ba" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="13df4a31-1d93-7796-89f0-9bafbf62cf1d">
      <Execution id="4518a31a-145e-4836-a503-38d7b651fad2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="31dac960-539b-5857-5a33-455fe8d5a38f">
      <Execution id="262e841b-53b0-4e15-b6ec-5071f52920a1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="798a8e71-c3a5-952d-b167-1f516fd90da6">
      <Execution id="1028a41a-4595-4931-90f0-5401055e2ee4" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bee75210-e3b0-c570-b8a4-c27baac780a1">
      <Execution id="a5d5cff7-0aa9-4cff-b9a6-35ba42e61ec2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeInvalidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f6a7a690-af73-fab8-0ebf-059ccdbb5495">
      <Execution id="f81dbc47-ce8e-4238-887b-2ee2a62f9c13" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeInvalidToken" />
    </UnitTest>
    <UnitTest name="SetMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="c824fd41-84e4-6d43-8411-04262c295a77">
      <Execution id="0389f01c-5fa7-44e1-8c32-a68066eaffb6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembership" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="17537441-5c46-b29c-7a15-7f733fa6a240">
      <Execution id="d52e6804-c025-461e-b750-bc85b1f8f247" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0153fbb0-e5a5-84d4-df77-b92e47c48a9b">
      <Execution id="e23c8149-437f-4a1c-a29c-0527c8a79992" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1500c2f1-f56e-3f8a-4b9e-769b5f983879">
      <Execution id="0d3e0972-1f47-413d-a5ab-4483cc83e635" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="be8b1c28-897b-72b1-79de-44eed3d3394f">
      <Execution id="dedaa954-c9d5-4b87-9ffb-e8d7144758a8" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="RemoveAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02189687-8985-6806-f35e-66f7f45f4e75">
      <Execution id="33eb2796-a9ec-4d8b-8153-c6d56f1aa5a6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeATokenWhileItIsDisabledOnAServer" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ee450aac-5f02-8238-a55d-792600e33298">
      <Execution id="818eaf03-b9c4-4951-9dda-87aec3cdd617" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWhileItIsDisabledOnAServer" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="60e5b02d-603e-8172-2213-6ea7fd0250af">
      <Execution id="40bfdacc-1b57-4fab-ba72-46dfe42cb4ca" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="50604149-da7b-7eb8-2563-57d2dd368452">
      <Execution id="5b300978-32a2-4715-a9dc-ea38db0065c2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5ef88e91-8d77-e81e-f266-0337c81fc15e">
      <Execution id="639fe7cf-b635-4f8c-a196-79d690f6231c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="cddd27ac-7387-0391-36be-b1b706556ac6">
      <Execution id="efe4f7f7-3464-4f0a-9bda-5b40beb9dd6b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d5ad5871-c66b-34c9-1371-544f7c37d8f6">
      <Execution id="7921943b-3df4-4934-9618-04c403ed234a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="ManageMembershipsForAUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="aea0c1c8-e4f2-b00c-e2e5-3958a9100776">
      <Execution id="4b411ba9-f336-4415-97a6-543471df875d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="ManageMembershipsForAUUID" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f114629c-3c3b-e71d-e1df-1b4312712d85">
      <Execution id="738c6f32-7e95-4826-97ba-6b736b92887d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d533b002-ecc8-a6e4-0a55-5406f8886899">
      <Execution id="686113e5-deb0-4520-a77e-3977426b8be9" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeExistingValidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9e948d14-1697-7020-7d46-e7d0ab1a839a">
      <Execution id="b5c87bb9-2d20-42d1-8419-bedcef22162e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeExistingValidToken" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9">
      <Execution id="3b740ebc-0f65-4bb3-8d5a-bce35c1ee455" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="10a87c1f-7e7a-0e53-402e-aefcc00a21da">
      <Execution id="43bcfab7-ccc4-40ee-a639-e2b279bc2e99" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUID" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb">
      <Execution id="2c102651-799e-4bb5-a8ae-1e13df260322" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetAUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5a108f95-d949-be1c-ba70-794e5a89cb2c">
      <Execution id="c543df07-0dc0-4d69-b52d-2e1ba9419a11" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="SetAUUIDMetadata" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="07a0b332-7585-5132-2931-ba67f585bbfd">
      <Execution id="b73951d6-2fd5-4eea-acfc-b0ad676f0da1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="63f82b54-f147-1707-8ae8-1f771750a4c8">
      <Execution id="f46ee359-0c8f-464a-a17b-522488a08a92" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="RevokeATokenWithCharactersThatRequireUrlEncoding" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b811bc2b-ac6c-1eab-5504-b3af1ec9a805">
      <Execution id="38295d1d-a7f7-4220-beba-9adeba927b4f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWithCharactersThatRequireUrlEncoding" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="238d7046-3682-e357-765d-2a21c813602e">
      <Execution id="b85c03b2-cad9-49ea-a452-b460287c66b4" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="SetMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c">
      <Execution id="cfefef92-2d6b-4476-9e20-2be54ebc6740" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="68a689f7-c4a6-51dd-490d-8e5b965feb8a">
      <Execution id="58ae58a9-7d8d-4657-8d7a-e294d3f62831" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19276ea0-e69e-d8c1-5f86-fbe82fc4defb">
      <Execution id="d73f1196-d81d-4e56-ac22-f953c52c9a36" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUIDWithCustomAndChannelCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7acf7525-aaca-a5f2-7032-491d9caf1cf8">
      <Execution id="b0253029-1da5-49e9-8606-ea2a4590fbff" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUIDWithCustomAndChannelCustom" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed3513bd-2d36-bad0-70c5-813865e78b06">
      <Execution id="4b940164-daf5-4031-a3ee-cb7424d9bee8" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b2c9c319-05d3-858f-ecdb-c785279a33e5">
      <Execution id="bab98944-481c-49b1-a63f-59eb067a1f0c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="RemoveMemberForAChannel" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d871c596-d51c-32a3-d78a-f9b6ed7868a8">
      <Execution id="c892c402-01f9-4aee-8b5e-694ee10f617c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="23b61850-f73c-f5eb-17ca-9aaba5f44c54">
      <Execution id="6e4649d5-334d-47de-894c-a183c2550de4" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="040fb33d-7655-40ce-1cff-6bcf94c5cc47">
      <Execution id="3cf44e64-f4b4-4e83-abb3-cc9093ce1d91" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f8d35157-2900-b4b5-1a17-900588c884a9">
      <Execution id="e8a48186-3768-4bac-88cc-28f89062b401" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="446be40b-3f39-dc72-f797-9a3aa2aac484">
      <Execution id="0a15b665-2c6c-46c2-951c-e8da3900e120" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="984e3d49-4d22-c80b-52c3-19191f62fda7">
      <Execution id="4b5c641e-6c24-4a96-b470-4fd1a8db87be" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4dab3f58-f834-dddd-fa3d-a0f55f715d14">
      <Execution id="30d66d15-ce1b-4cbd-bf13-de4563f5bc6a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="85374129-b31e-6699-e3e3-35edfbf2f310">
      <Execution id="3348196b-878d-48b0-ae7a-40d12518762b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="219f8da3-cc63-e002-72df-e2f549e52967">
      <Execution id="c500ce6c-c6fc-476d-bec6-911ad73edc9b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadata" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc7a74bf-9a5b-2257-fa8b-50752bdbf702">
      <Execution id="04f1fdde-287d-4fc6-9fdc-087f61337502" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="fb67481e-37a3-f171-7a64-13ebf12d3989">
      <Execution id="bacfd757-b8fe-475d-b303-9ab88b8bc6ec" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02e294ba-02db-f21e-dc59-8e7c9444841f">
      <Execution id="c94c4c24-b3cb-4af2-a3ad-2d1d763ef7d9" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="96ff7052-903d-d61a-0cb2-cdee63831172">
      <Execution id="e47529b6-2c62-465f-a3f5-1ffbcbd99f3c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembership" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="71353074-59f3-561d-2fde-c864cf9dfcb6">
      <Execution id="5a8e9a48-e53f-4173-905f-9e9ded2289d2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555">
      <Execution id="1a03ac3c-b9f2-418d-9e10-cf2f5fb201a2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0f851786-a6db-a75b-11ec-b9549b68d0b8">
      <Execution id="5f7092b4-9cd5-484b-81ff-e8ddeb131cd8" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4401ff2d-c38b-51a8-f6b5-791f859c7098">
      <Execution id="eac99d38-5772-45d6-a375-98af1bc312bc" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="GetMembershipsForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ba48247e-b680-05e2-ec8e-cd712552a6ee">
      <Execution id="79e04d65-e6d1-4154-b09e-7e4dfef390e5" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForCurrentUser" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="84e090d8-441a-8861-c4e5-70620525fefd">
      <Execution id="ee9e2f0a-01de-4ae0-a564-944894f74a47" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa">
      <Execution id="07153d31-8e69-40eb-a38f-9fc0cc335cce" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithoutAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5e071152-ee43-67c0-dc5d-67a966171b99">
      <Execution id="3e5e9b32-2235-40b3-801a-7f453ff85e48" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithoutAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="42ca667a-a020-f899-567b-164563a5f68c">
      <Execution id="be957669-ed7c-47a0-bdcc-9998135a7dd6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetMemberWithCustomForAChannelAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="86189ae4-95f9-30e4-f4c6-bfa1b9898a62">
      <Execution id="2ca6f2a5-5f9a-4d23-b5d1-15a224ff0493" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberWithCustomForAChannelAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="GetAUUIDWithCustomMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="78605226-9a65-4701-5dbe-74fd1152b767">
      <Execution id="2efce871-f8a8-4dd5-85ac-c6799ac3dc49" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDWithCustomMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d2b950d-d4be-de51-1cfb-07073f6d6e13">
      <Execution id="46a7806c-ef50-415e-bf7e-12d97a917e61" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="046e940e-ed7b-e2be-b9c9-fa82caaefa8a">
      <Execution id="5405711e-9bca-4030-b341-cc8dea09195f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="6af2fe2f-9fc6-6af1-e346-da11b3a31319">
      <Execution id="0e352424-b42b-4dc7-80d4-284a287f04bc" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19c50b46-2552-1ee8-9a15-6db5bb83fc13">
      <Execution id="fc810636-6673-4631-b059-4f02ffdb0ab4" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="ManageMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4abae91a-e1c2-11c6-c78e-4c0a98abeb41">
      <Execution id="c1ff1989-d3e4-4bfe-9c6d-93b77c04e449" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="ManageMembersForAChannel" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b">
      <Execution id="03fcab76-1291-4fa8-8797-5a07330179f1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0c1a37b6-b16e-3d65-7b38-756d59a051b1">
      <Execution id="0475f435-3008-4f3d-b05b-b42196cd2116" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadata" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bf64e30a-5c5e-95e0-c813-0cfcc293de1e">
      <Execution id="54a9d253-b351-4a4e-b902-4fddfaa9991d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5271a851-e8d2-c42c-aad6-49024c68a9d5">
      <Execution id="549107f9-f84d-4ead-af1d-c4feacc0c588" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0992672a-4884-80d0-5142-7d4a75036ed9">
      <Execution id="d9eaf95c-52a3-47f4-b2c9-49660f7372f9" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="GetAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d717777f-cd83-a14f-a06e-85ad7a167630">
      <Execution id="9b43153e-63cc-4307-b0a8-40331d8e1b05" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="GetMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3405a88a-853b-5aa4-dc52-211f74db4a9b">
      <Execution id="758a51aa-3b7e-4f3a-ba37-0aaed2b284f0" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForAChannel" />
    </UnitTest>
    <UnitTest name="GetAChannelWithCustomMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="8a1c2bbd-f61b-135c-270f-157e7106103a">
      <Execution id="0868fe90-9a46-4ad6-9b77-2f6f1875c214" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelWithCustomMetadata" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1680f939-c9a3-3184-e5e6-300d132ea901">
      <Execution id="6cb1c155-3e59-4f3b-8e12-044131045327" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="70fed881-ff3d-cf01-fc50-eec23bec4b15">
      <Execution id="062132ef-dd6e-4808-a2b0-41e1cb66b5d6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3a8dac54-e42a-8256-0f95-9b2771dcaeda">
      <Execution id="ffd84831-004d-409b-9e99-a23ad1b3ee9e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="SetAChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="947b833a-a96c-d64f-e9e3-0beaa935d4d5">
      <Execution id="d9da0717-fea0-4ba5-a225-56e20eef9908" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="SetAChannelMetadata" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81">
      <Execution id="4771b383-4ecd-4701-bb5f-16b4d6cc056a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7f798889-8174-9314-5795-cf39887a4d5e">
      <Execution id="4f23e75e-c599-48b7-8fa3-291ac49008df" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3b96f760-7a4a-da94-3ca5-8f27e0604482">
      <Execution id="efc6af69-16ea-4120-950a-b5cce7a08ae3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed5af684-441e-e3d8-3bf2-a26f2fd3f117">
      <Execution id="8cb487f8-754d-43c3-bec7-fbdf3253d093" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberForAChannel" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ea054fa2-926d-1779-cc57-db94ba1a4d6a">
      <Execution id="025ab147-fbc5-4e6d-9320-5098b4ff03e3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="21d875cb-d7ef-e04a-3cc4-907443abf187">
      <Execution id="86acd0ec-bf4f-4485-88f1-be1c45b64654" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" executionId="0475f435-3008-4f3d-b05b-b42196cd2116" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a1c2bbd-f61b-135c-270f-157e7106103a" executionId="0868fe90-9a46-4ad6-9b77-2f6f1875c214" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" executionId="efc6af69-16ea-4120-950a-b5cce7a08ae3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="446be40b-3f39-dc72-f797-9a3aa2aac484" executionId="0a15b665-2c6c-46c2-951c-e8da3900e120" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71353074-59f3-561d-2fde-c864cf9dfcb6" executionId="5a8e9a48-e53f-4173-905f-9e9ded2289d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" executionId="2c102651-799e-4bb5-a8ae-1e13df260322" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" executionId="5405711e-9bca-4030-b341-cc8dea09195f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50604149-da7b-7eb8-2563-57d2dd368452" executionId="5b300978-32a2-4715-a9dc-ea38db0065c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84e090d8-441a-8861-c4e5-70620525fefd" executionId="ee9e2f0a-01de-4ae0-a564-944894f74a47" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42ca667a-a020-f899-567b-164563a5f68c" executionId="be957669-ed7c-47a0-bdcc-9998135a7dd6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" executionId="0e352424-b42b-4dc7-80d4-284a287f04bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" executionId="3b740ebc-0f65-4bb3-8d5a-bce35c1ee455" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31dac960-539b-5857-5a33-455fe8d5a38f" executionId="262e841b-53b0-4e15-b6ec-5071f52920a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" executionId="4b411ba9-f336-4415-97a6-543471df875d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" executionId="8cb487f8-754d-43c3-bec7-fbdf3253d093" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" executionId="e23c8149-437f-4a1c-a29c-0527c8a79992" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" executionId="cfefef92-2d6b-4476-9e20-2be54ebc6740" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" executionId="3cf44e64-f4b4-4e83-abb3-cc9093ce1d91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" executionId="4518a31a-145e-4836-a503-38d7b651fad2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="13a6a110-ff85-4db1-ab63-76aa696b7dab" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" executionId="4771b383-4ecd-4701-bb5f-16b4d6cc056a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" executionId="b5c87bb9-2d20-42d1-8419-bedcef22162e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" executionId="eac99d38-5772-45d6-a375-98af1bc312bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" executionId="6e4649d5-334d-47de-894c-a183c2550de4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" executionId="43bcfab7-ccc4-40ee-a639-e2b279bc2e99" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f114629c-3c3b-e71d-e1df-1b4312712d85" executionId="738c6f32-7e95-4826-97ba-6b736b92887d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="798a8e71-c3a5-952d-b167-1f516fd90da6" executionId="1028a41a-4595-4931-90f0-5401055e2ee4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bee75210-e3b0-c570-b8a4-c27baac780a1" executionId="a5d5cff7-0aa9-4cff-b9a6-35ba42e61ec2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be8b1c28-897b-72b1-79de-44eed3d3394f" executionId="dedaa954-c9d5-4b87-9ffb-e8d7144758a8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="4b5c641e-6c24-4a96-b470-4fd1a8db87be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21d875cb-d7ef-e04a-3cc4-907443abf187" executionId="86acd0ec-bf4f-4485-88f1-be1c45b64654" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78605226-9a65-4701-5dbe-74fd1152b767" executionId="2efce871-f8a8-4dd5-85ac-c6799ac3dc49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c824fd41-84e4-6d43-8411-04262c295a77" executionId="0389f01c-5fa7-44e1-8c32-a68066eaffb6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f798889-8174-9314-5795-cf39887a4d5e" executionId="4f23e75e-c599-48b7-8fa3-291ac49008df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="219f8da3-cc63-e002-72df-e2f549e52967" executionId="c500ce6c-c6fc-476d-bec6-911ad73edc9b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" executionId="ef0fbd7e-6675-477c-a965-084ef54aed33" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" executionId="04f1fdde-287d-4fc6-9fdc-087f61337502" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" executionId="1a03ac3c-b9f2-418d-9e10-cf2f5fb201a2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85374129-b31e-6699-e3e3-35edfbf2f310" executionId="3348196b-878d-48b0-ae7a-40d12518762b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="552d6a97-0c60-4470-9a28-35f604a2d8ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" executionId="bab98944-481c-49b1-a63f-59eb067a1f0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" executionId="549107f9-f84d-4ead-af1d-c4feacc0c588" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0992672a-4884-80d0-5142-7d4a75036ed9" executionId="d9eaf95c-52a3-47f4-b2c9-49660f7372f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63f82b54-f147-1707-8ae8-1f771750a4c8" executionId="f46ee359-0c8f-464a-a17b-522488a08a92" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" executionId="d9da0717-fea0-4ba5-a225-56e20eef9908" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96ff7052-903d-d61a-0cb2-cdee63831172" executionId="e47529b6-2c62-465f-a3f5-1ffbcbd99f3c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02e294ba-02db-f21e-dc59-8e7c9444841f" executionId="c94c4c24-b3cb-4af2-a3ad-2d1d763ef7d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" executionId="d73f1196-d81d-4e56-ac22-f953c52c9a36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" executionId="38295d1d-a7f7-4220-beba-9adeba927b4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="238d7046-3682-e357-765d-2a21c813602e" executionId="b85c03b2-cad9-49ea-a452-b460287c66b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d717777f-cd83-a14f-a06e-85ad7a167630" executionId="9b43153e-63cc-4307-b0a8-40331d8e1b05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" executionId="07153d31-8e69-40eb-a38f-9fc0cc335cce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60e5b02d-603e-8172-2213-6ea7fd0250af" executionId="40bfdacc-1b57-4fab-ba72-46dfe42cb4ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d533b002-ecc8-a6e4-0a55-5406f8886899" executionId="686113e5-deb0-4520-a77e-3977426b8be9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02189687-8985-6806-f35e-66f7f45f4e75" executionId="33eb2796-a9ec-4d8b-8153-c6d56f1aa5a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee450aac-5f02-8238-a55d-792600e33298" executionId="818eaf03-b9c4-4951-9dda-87aec3cdd617" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" executionId="639fe7cf-b635-4f8c-a196-79d690f6231c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" executionId="c543df07-0dc0-4d69-b52d-2e1ba9419a11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" executionId="03fcab76-1291-4fa8-8797-5a07330179f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" executionId="7921943b-3df4-4934-9618-04c403ed234a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" executionId="0d3e0972-1f47-413d-a5ab-4483cc83e635" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17537441-5c46-b29c-7a15-7f733fa6a240" executionId="d52e6804-c025-461e-b750-bc85b1f8f247" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" executionId="5f7092b4-9cd5-484b-81ff-e8ddeb131cd8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" executionId="2ca6f2a5-5f9a-4d23-b5d1-15a224ff0493" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" executionId="46a7806c-ef50-415e-bf7e-12d97a917e61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" executionId="025ab147-fbc5-4e6d-9320-5098b4ff03e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="785e20b7-0681-3d5e-8c02-431a4435768d" executionId="3d37c6bd-1f8d-4e99-9e9c-0c4f967a5da6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8d35157-2900-b4b5-1a17-900588c884a9" executionId="e8a48186-3768-4bac-88cc-28f89062b401" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e071152-ee43-67c0-dc5d-67a966171b99" executionId="3e5e9b32-2235-40b3-801a-7f453ff85e48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" executionId="c892c402-01f9-4aee-8b5e-694ee10f617c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07a0b332-7585-5132-2931-ba67f585bbfd" executionId="b73951d6-2fd5-4eea-acfc-b0ad676f0da1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" executionId="fc810636-6673-4631-b059-4f02ffdb0ab4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" executionId="54a9d253-b351-4a4e-b902-4fddfaa9991d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb67481e-37a3-f171-7a64-13ebf12d3989" executionId="bacfd757-b8fe-475d-b303-9ab88b8bc6ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" executionId="c1ff1989-d3e4-4bfe-9c6d-93b77c04e449" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" executionId="79e04d65-e6d1-4154-b09e-7e4dfef390e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" executionId="58ae58a9-7d8d-4657-8d7a-e294d3f62831" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" executionId="f81dbc47-ce8e-4238-887b-2ee2a62f9c13" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cddd27ac-7387-0391-36be-b1b706556ac6" executionId="efe4f7f7-3464-4f0a-9bda-5b40beb9dd6b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" executionId="b0253029-1da5-49e9-8606-ea2a4590fbff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" executionId="30d66d15-ce1b-4cbd-bf13-de4563f5bc6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed3513bd-2d36-bad0-70c5-813865e78b06" executionId="4b940164-daf5-4031-a3ee-cb7424d9bee8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1680f939-c9a3-3184-e5e6-300d132ea901" executionId="6cb1c155-3e59-4f3b-8e12-044131045327" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" executionId="ffd84831-004d-409b-9e99-a23ad1b3ee9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" executionId="062132ef-dd6e-4808-a2b0-41e1cb66b5d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="e43ebc87-41ec-44a4-b076-287cb39418d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" executionId="758a51aa-3b7e-4f3a-ba37-0aaed2b284f0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Completed">
    <Counters total="87" executed="87" passed="87" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>NUnit Adapter 3.17.0.0: Test execution started&#xD;
Running all tests in D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll&#xD;
   NUnit3TestExecutor discovered 87 of 87 NUnit test cases&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)&#xD;
&#xD;
Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.1s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.1s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
&#xD;
NUnit Adapter 3.17.0.0: Test execution complete&#xD;
</StdOut>
    </Output>
  </ResultSummary>
</TestRun>
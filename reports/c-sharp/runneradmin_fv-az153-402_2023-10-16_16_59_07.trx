<?xml version="1.0" encoding="utf-8"?>
<TestRun id="db33e6dd-baec-41a1-b590-f237fc5872c9" name="runneradmin@fv-az153-402 2023-10-16 16:59:07" runUser="fv-az153-402\runneradmin" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2023-10-16T16:59:07.2546014+00:00" queuing="2023-10-16T16:59:07.2546015+00:00" start="2023-10-16T16:59:04.4509846+00:00" finish="2023-10-16T16:59:09.0470772+00:00" />
  <TestSettings name="default" id="b7700299-0d12-4f82-8ec5-3db3c8f55961">
    <Deployment runDeploymentRoot="runneradmin_fv-az153-402_2023-10-16_16_59_07" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="c651d024-cbc0-490f-a894-2ebf69e1c976" testId="84e090d8-441a-8861-c4e5-70620525fefd" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0093670" startTime="2023-10-16T16:59:07.2867805+00:00" endTime="2023-10-16T16:59:07.2961479+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c651d024-cbc0-490f-a894-2ebf69e1c976">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c12c8cdd-b1f5-4dbd-b806-8f1aef9dfab6" testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" testName="RemoveMembershipForCurrentUser" computerName="fv-az153-402" duration="00:00:00.0269170" startTime="2023-10-16T16:59:08.5330363+00:00" endTime="2023-10-16T16:59:08.5599534+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c12c8cdd-b1f5-4dbd-b806-8f1aef9dfab6">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1db005f1-0897-4f5b-b1ce-e62ebe0af13a" testId="cddd27ac-7387-0391-36be-b1b706556ac6" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0036320" startTime="2023-10-16T16:59:07.4585551+00:00" endTime="2023-10-16T16:59:07.4621873+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1db005f1-0897-4f5b-b1ce-e62ebe0af13a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d038ad40-0b91-4b5b-92ad-2424b0421bf1" testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0060520" startTime="2023-10-16T16:59:07.4727935+00:00" endTime="2023-10-16T16:59:07.4788459+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d038ad40-0b91-4b5b-92ad-2424b0421bf1">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="07e9de93-4c0f-42f5-8d96-2ba34ab77f8d" testId="85374129-b31e-6699-e3e3-35edfbf2f310" testName="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" computerName="fv-az153-402" duration="00:00:00.0719720" startTime="2023-10-16T16:59:07.8134292+00:00" endTime="2023-10-16T16:59:07.8854021+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07e9de93-4c0f-42f5-8d96-2ba34ab77f8d">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dd4b4c7f-cf1e-4210-9874-d73f3ab0fa77" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0033610" startTime="2023-10-16T16:59:07.4284748+00:00" endTime="2023-10-16T16:59:07.4318360+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd4b4c7f-cf1e-4210-9874-d73f3ab0fa77">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9f7b71b7-507a-48ea-879d-ba08b4ecf67c" testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0032620" startTime="2023-10-16T16:59:07.4547695+00:00" endTime="2023-10-16T16:59:07.4580317+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f7b71b7-507a-48ea-879d-ba08b4ecf67c">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="02302eae-3932-4ee3-89ed-4a8df1640417" testId="d717777f-cd83-a14f-a06e-85ad7a167630" testName="GetAUUIDMetadataForId" computerName="fv-az153-402" duration="00:00:00.0499720" startTime="2023-10-16T16:59:08.6658436+00:00" endTime="2023-10-16T16:59:08.7158165+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02302eae-3932-4ee3-89ed-4a8df1640417">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8e13eff-c81c-4068-a80b-3524e34a6275" testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0037990" startTime="2023-10-16T16:59:07.0775500+00:00" endTime="2023-10-16T16:59:07.0813491+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8e13eff-c81c-4068-a80b-3524e34a6275">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a7f97faf-e44f-4328-9f8a-1163745cb7de" testId="42ca667a-a020-f899-567b-164563a5f68c" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0052500" startTime="2023-10-16T16:59:07.0881322+00:00" endTime="2023-10-16T16:59:07.0933819+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7f97faf-e44f-4328-9f8a-1163745cb7de">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="16208228-2fe2-4449-8af6-15bfeb050d5a" testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0029870" startTime="2023-10-16T16:59:07.4123236+00:00" endTime="2023-10-16T16:59:07.4153104+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16208228-2fe2-4449-8af6-15bfeb050d5a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c36b8070-5b54-47d7-9a21-4b8c7fc1e28f" testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0024540" startTime="2023-10-16T16:59:07.4230337+00:00" endTime="2023-10-16T16:59:07.4254874+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c36b8070-5b54-47d7-9a21-4b8c7fc1e28f">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="965c0bd7-1277-48a1-867b-a0e0bc7e0fd5" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0028670" startTime="2023-10-16T16:59:07.4660477+00:00" endTime="2023-10-16T16:59:07.4689152+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="965c0bd7-1277-48a1-867b-a0e0bc7e0fd5">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4422199d-8b91-4138-abf1-44b83afd82b0" testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0029900" startTime="2023-10-16T16:59:07.4469089+00:00" endTime="2023-10-16T16:59:07.4498990+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4422199d-8b91-4138-abf1-44b83afd82b0">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6372539c-af3e-4aed-96d8-683a7031c1a6" testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" testName="RevokeExistingValidToken" computerName="fv-az153-402" duration="00:00:00.0151540" startTime="2023-10-16T16:59:08.8867256+00:00" endTime="2023-10-16T16:59:08.9018795+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6372539c-af3e-4aed-96d8-683a7031c1a6">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="40096311-99d6-45f1-80c0-7d743a1aacda" testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0035030" startTime="2023-10-16T16:59:07.4359721+00:00" endTime="2023-10-16T16:59:07.4394751+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40096311-99d6-45f1-80c0-7d743a1aacda">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f523c696-8a1c-463d-8be6-1d3741857e38" testId="02189687-8985-6806-f35e-66f7f45f4e75" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0095110" startTime="2023-10-16T16:59:07.3691885+00:00" endTime="2023-10-16T16:59:07.3786995+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f523c696-8a1c-463d-8be6-1d3741857e38">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d449846-b071-4a6c-93b9-1e935791ded2" testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" testName="RevokeInvalidToken" computerName="fv-az153-402" duration="00:00:00.0114039" startTime="2023-10-16T16:59:08.9020167+00:00" endTime="2023-10-16T16:59:08.9134213+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d449846-b071-4a6c-93b9-1e935791ded2">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a6a104d5-8a46-41f7-96c8-9d56863631ef" testId="21d875cb-d7ef-e04a-3cc4-907443abf187" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0026980" startTime="2023-10-16T16:59:07.4511597+00:00" endTime="2023-10-16T16:59:07.4538582+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6a104d5-8a46-41f7-96c8-9d56863631ef">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5dbeb7e-79f4-4471-8e3c-dca50f81a63c" testId="07a0b332-7585-5132-2931-ba67f585bbfd" testName="RemoveAUUIDMetadataForId" computerName="fv-az153-402" duration="00:00:00.0415930" startTime="2023-10-16T16:59:08.7570842+00:00" endTime="2023-10-16T16:59:08.7986775+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5dbeb7e-79f4-4471-8e3c-dca50f81a63c">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5911a4c1-06a4-4444-9dfc-d2e2c5ac82ad" testId="50604149-da7b-7eb8-2563-57d2dd368452" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0032520" startTime="2023-10-16T16:59:07.4020143+00:00" endTime="2023-10-16T16:59:07.4052658+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5911a4c1-06a4-4444-9dfc-d2e2c5ac82ad">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c9047455-f61e-4c73-abd5-6dcd021b9332" testId="5e071152-ee43-67c0-dc5d-67a966171b99" testName="GrantAnAccessTokenWithoutAnAuthorizedUuid" computerName="fv-az153-402" duration="00:00:00.0183930" startTime="2023-10-16T16:59:07.8864852+00:00" endTime="2023-10-16T16:59:07.9048786+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9047455-f61e-4c73-abd5-6dcd021b9332">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="021f5983-2f29-4e7d-8232-1e7fcf77aad0" testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0032560" startTime="2023-10-16T16:59:07.3650899+00:00" endTime="2023-10-16T16:59:07.3683460+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="021f5983-2f29-4e7d-8232-1e7fcf77aad0">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bdd392e7-8881-4000-b8b2-3654170d0ff2" testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0029600" startTime="2023-10-16T16:59:07.4088676+00:00" endTime="2023-10-16T16:59:07.4118278+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bdd392e7-8881-4000-b8b2-3654170d0ff2">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bb2f94ec-4c01-4834-b367-a475a46dc1c9" testId="0992672a-4884-80d0-5142-7d4a75036ed9" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" computerName="fv-az153-402" duration="00:00:00.0127670" startTime="2023-10-16T16:59:07.7024953+00:00" endTime="2023-10-16T16:59:07.7152631+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb2f94ec-4c01-4834-b367-a475a46dc1c9">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5d102024-2356-4854-94b9-49386bd4cce4" testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0067590" startTime="2023-10-16T16:59:07.2794584+00:00" endTime="2023-10-16T16:59:07.2862179+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d102024-2356-4854-94b9-49386bd4cce4">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="286fb22e-8173-48fe-ac4e-96c752b09c27" testId="fb67481e-37a3-f171-7a64-13ebf12d3989" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0029560" startTime="2023-10-16T16:59:07.3004187+00:00" endTime="2023-10-16T16:59:07.3033754+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="286fb22e-8173-48fe-ac4e-96c752b09c27">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="59ec3be2-d3b9-4f23-bc1f-87a99f4c03e2" testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" testName="GetAChannelMetadataForId" computerName="fv-az153-402" duration="00:00:00.0597500" startTime="2023-10-16T16:59:07.9073792+00:00" endTime="2023-10-16T16:59:07.9671303+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59ec3be2-d3b9-4f23-bc1f-87a99f4c03e2">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dcfd2f00-d598-4617-a8f6-8450794ddb92" testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0120410" startTime="2023-10-16T16:59:07.3524357+00:00" endTime="2023-10-16T16:59:07.3644772+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dcfd2f00-d598-4617-a8f6-8450794ddb92">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="529ed12a-dc33-433b-aea5-d7f3ff3feafd" testId="31dac960-539b-5857-5a33-455fe8d5a38f" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0092100" startTime="2023-10-16T16:59:07.1295834+00:00" endTime="2023-10-16T16:59:07.1387941+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="529ed12a-dc33-433b-aea5-d7f3ff3feafd">
      <Output>
        <StdOut>Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4d776a41-780d-4f21-991e-67107935546e" testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" testName="RemoveAUUIDMetadataIdStoredInConfig" computerName="fv-az153-402" duration="00:00:00.0240840" startTime="2023-10-16T16:59:08.8027016+00:00" endTime="2023-10-16T16:59:08.8267866+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4d776a41-780d-4f21-991e-67107935546e">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="239214c0-a6c1-4061-96bf-c8a1a360630a" testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" testName="GetAllUUIDMetadataWithCustom" computerName="fv-az153-402" duration="00:00:00.0272590" startTime="2023-10-16T16:59:08.6377092+00:00" endTime="2023-10-16T16:59:08.6649683+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="239214c0-a6c1-4061-96bf-c8a1a360630a">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e6949c5c-c2af-40cc-9f11-36eeb9eaad0e" testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0034410" startTime="2023-10-16T16:59:07.3484181+00:00" endTime="2023-10-16T16:59:07.3518588+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e6949c5c-c2af-40cc-9f11-36eeb9eaad0e">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c687fad-be18-44ca-bd70-894bfef73355" testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" testName="SetAUUIDMetadata" computerName="fv-az153-402" duration="00:00:00.0249370" startTime="2023-10-16T16:59:08.8274397+00:00" endTime="2023-10-16T16:59:08.8523767+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c687fad-be18-44ca-bd70-894bfef73355">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0195985-8bf7-4529-84b4-19d2ac4b8afe" testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0077110" startTime="2023-10-16T16:59:07.3401800+00:00" endTime="2023-10-16T16:59:07.3478909+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0195985-8bf7-4529-84b4-19d2ac4b8afe">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0769112d-2dd8-4ed1-94eb-478d06e7cdae" testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0036560" startTime="2023-10-16T16:59:07.0729689+00:00" endTime="2023-10-16T16:59:07.0766247+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0769112d-2dd8-4ed1-94eb-478d06e7cdae">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a501903e-09c1-4eba-805c-0762602e5ae1" testId="798a8e71-c3a5-952d-b167-1f516fd90da6" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0159650" startTime="2023-10-16T16:59:07.0940183+00:00" endTime="2023-10-16T16:59:07.1099836+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a501903e-09c1-4eba-805c-0762602e5ae1">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a66b2ad7-649a-45e2-b413-51aa555ff9d5" testId="446be40b-3f39-dc72-f797-9a3aa2aac484" testName="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" computerName="fv-az153-402" duration="00:00:00.0280590" startTime="2023-10-16T16:59:07.6487939+00:00" endTime="2023-10-16T16:59:07.6768536+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a66b2ad7-649a-45e2-b413-51aa555ff9d5">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d708bc0e-7049-4898-9992-4889cd3ffe9c" testId="96ff7052-903d-d61a-0cb2-cdee63831172" testName="RemoveMembership" computerName="fv-az153-402" duration="00:00:00.0216120" startTime="2023-10-16T16:59:08.5109075+00:00" endTime="2023-10-16T16:59:08.5325196+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d708bc0e-7049-4898-9992-4889cd3ffe9c">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="920dcf3f-89cd-4448-8e81-0ae781df41be" testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" testName="ManageMembershipsForAUUID" computerName="fv-az153-402" duration="00:00:00.0324800" startTime="2023-10-16T16:59:08.4748026+00:00" endTime="2023-10-16T16:59:08.5072826+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="920dcf3f-89cd-4448-8e81-0ae781df41be">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0e9f3c80-c923-4589-9f50-568c7dcff2db" testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" testName="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" computerName="fv-az153-402" duration="00:00:00.0234710" startTime="2023-10-16T16:59:08.1080828+00:00" endTime="2023-10-16T16:59:08.1315545+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e9f3c80-c923-4589-9f50-568c7dcff2db">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="027ea4e3-3077-4cb0-aab4-782647ef8dc1" testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" testName="SetMembershipForCurrentUser" computerName="fv-az153-402" duration="00:00:00.0219220" startTime="2023-10-16T16:59:08.5881715+00:00" endTime="2023-10-16T16:59:08.6100936+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="027ea4e3-3077-4cb0-aab4-782647ef8dc1">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e08860d8-17c5-467e-8856-e32fa281c918" testId="219f8da3-cc63-e002-72df-e2f549e52967" testName="GetAllUUIDMetadata" computerName="fv-az153-402" duration="00:00:00.0250710" startTime="2023-10-16T16:59:08.6121924+00:00" endTime="2023-10-16T16:59:08.6372636+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e08860d8-17c5-467e-8856-e32fa281c918">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="020e5439-4bb2-4aff-bf18-2c34d905ac4f" testId="238d7046-3682-e357-765d-2a21c813602e" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" computerName="fv-az153-402" duration="00:00:00.0169729" startTime="2023-10-16T16:59:07.6813263+00:00" endTime="2023-10-16T16:59:07.6982999+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="020e5439-4bb2-4aff-bf18-2c34d905ac4f">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a940235-c673-4ad8-a20d-cf41e54d2895" testId="7f798889-8174-9314-5795-cf39887a4d5e" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0805490" startTime="2023-10-16T16:59:06.9698348+00:00" endTime="2023-10-16T16:59:07.0502782+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a940235-c673-4ad8-a20d-cf41e54d2895">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bca122db-0909-4336-96c2-81dea58c424a" testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0039150" startTime="2023-10-16T16:59:07.3973530+00:00" endTime="2023-10-16T16:59:07.4012682+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bca122db-0909-4336-96c2-81dea58c424a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d90c10d-d077-4f93-96c0-dd8cf87b7fcb" testId="ee450aac-5f02-8238-a55d-792600e33298" testName="RevokeATokenWhileItIsDisabledOnAServer" computerName="fv-az153-402" duration="00:00:00.0189060" startTime="2023-10-16T16:59:08.8542793+00:00" endTime="2023-10-16T16:59:08.8731856+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d90c10d-d077-4f93-96c0-dd8cf87b7fcb">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="01723351-9ed4-4e97-907d-93d6775df6be" testId="c824fd41-84e4-6d43-8411-04262c295a77" testName="SetMembership" computerName="fv-az153-402" duration="00:00:00.0272020" startTime="2023-10-16T16:59:08.5604741+00:00" endTime="2023-10-16T16:59:08.5876763+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01723351-9ed4-4e97-907d-93d6775df6be">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1d343474-1045-464e-9003-a9f29552a031" testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0045080" startTime="2023-10-16T16:59:07.3792401+00:00" endTime="2023-10-16T16:59:07.3837484+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1d343474-1045-464e-9003-a9f29552a031">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd3bb7f9-b527-4cb1-bc27-b42136a5891c" testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0029590" startTime="2023-10-16T16:59:07.4399785+00:00" endTime="2023-10-16T16:59:07.4429379+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd3bb7f9-b527-4cb1-bc27-b42136a5891c">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="87cb81b6-9cff-4c4f-a3ea-49ff38eb7fee" testId="02e294ba-02db-f21e-dc59-8e7c9444841f" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0032970" startTime="2023-10-16T16:59:07.4192518+00:00" endTime="2023-10-16T16:59:07.4225486+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87cb81b6-9cff-4c4f-a3ea-49ff38eb7fee">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95473121-6a59-4e4c-9a8c-b3b5407c7071" testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" testName="SetMemberWithCustomForAChannelAndUUIDWithCustom" computerName="fv-az153-402" duration="00:00:00.0231040" startTime="2023-10-16T16:59:08.2164905+00:00" endTime="2023-10-16T16:59:08.2395946+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95473121-6a59-4e4c-9a8c-b3b5407c7071">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ace78fcd-7d5d-4210-a36a-7e363ccd7c1a" testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" testName="ManageMembersForAChannel" computerName="fv-az153-402" duration="00:00:00.0372360" startTime="2023-10-16T16:59:08.1317200+00:00" endTime="2023-10-16T16:59:08.1689566+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ace78fcd-7d5d-4210-a36a-7e363ccd7c1a">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="31912677-60d0-4961-bf96-528d2a0be738" testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" testName="GetAllChannelMetadataWithCustom" computerName="fv-az153-402" duration="00:00:00.0166990" startTime="2023-10-16T16:59:08.0104522+00:00" endTime="2023-10-16T16:59:08.0271516+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31912677-60d0-4961-bf96-528d2a0be738">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b1cbaa3a-7b43-4793-81c4-c87e46859817" testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" testName="GetMembershipsForUUID" computerName="fv-az153-402" duration="00:00:00.0256880" startTime="2023-10-16T16:59:08.2852886+00:00" endTime="2023-10-16T16:59:08.3109768+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b1cbaa3a-7b43-4793-81c4-c87e46859817">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b872aaf5-d936-4a2e-9798-ff777f1cf095" testId="71353074-59f3-561d-2fde-c864cf9dfcb6" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0141610" startTime="2023-10-16T16:59:07.3038659+00:00" endTime="2023-10-16T16:59:07.3180273+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b872aaf5-d936-4a2e-9798-ff777f1cf095">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b46a88e4-8c50-4da2-a58d-e7321a86ba08" testId="17537441-5c46-b29c-7a15-7f733fa6a240" testName="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" computerName="fv-az153-402" duration="00:00:00.1359769" startTime="2023-10-16T16:59:07.5045096+00:00" endTime="2023-10-16T16:59:07.6404880+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b46a88e4-8c50-4da2-a58d-e7321a86ba08">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.1s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80fe8f55-884a-46a6-99e2-67d7dbb20eba" testId="be8b1c28-897b-72b1-79de-44eed3d3394f" testName="RemoveAChannelMetadataForId" computerName="fv-az153-402" duration="00:00:00.0193150" startTime="2023-10-16T16:59:08.0275519+00:00" endTime="2023-10-16T16:59:08.0468676+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80fe8f55-884a-46a6-99e2-67d7dbb20eba">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0d30ef90-2c1f-4bd1-8e8f-c55dc14f6b20" testId="f114629c-3c3b-e71d-e1df-1b4312712d85" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0151720" startTime="2023-10-16T16:59:07.1136493+00:00" endTime="2023-10-16T16:59:07.1288213+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d30ef90-2c1f-4bd1-8e8f-c55dc14f6b20">
      <Output>
        <StdOut>Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a633817c-556f-43d2-b140-b7031537af06" testId="60e5b02d-603e-8172-2213-6ea7fd0250af" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0064339" startTime="2023-10-16T16:59:07.0657448+00:00" endTime="2023-10-16T16:59:07.0721793+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a633817c-556f-43d2-b140-b7031537af06">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ca59e2e-8d6c-4621-a47e-42c72a22c757" testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" testName="GetMembershipsForUUIDWithCustomAndChannelCustom" computerName="fv-az153-402" duration="00:00:00.1624350" startTime="2023-10-16T16:59:08.3116222+00:00" endTime="2023-10-16T16:59:08.4740589+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ca59e2e-8d6c-4621-a47e-42c72a22c757">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fe1ae0c6-a12b-4d74-93dc-53ce5759652a" testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0036590" startTime="2023-10-16T16:59:07.4793651+00:00" endTime="2023-10-16T16:59:07.4830245+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe1ae0c6-a12b-4d74-93dc-53ce5759652a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4e897642-e9b9-4def-a724-218363b10e34" testId="f8d35157-2900-b4b5-1a17-900588c884a9" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0028200" startTime="2023-10-16T16:59:07.3228284+00:00" endTime="2023-10-16T16:59:07.3256487+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4e897642-e9b9-4def-a724-218363b10e34">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06d260b0-fa8c-4be8-a7aa-17697acf788f" testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0032080" startTime="2023-10-16T16:59:07.2966760+00:00" endTime="2023-10-16T16:59:07.2998841+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06d260b0-fa8c-4be8-a7aa-17697acf788f">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8730ad9a-fca4-461b-b4c6-68940bf7a532" testId="78605226-9a65-4701-5dbe-74fd1152b767" testName="GetAUUIDWithCustomMetadataIdStoredInConfig" computerName="fv-az153-402" duration="00:00:00.0342380" startTime="2023-10-16T16:59:08.7215452+00:00" endTime="2023-10-16T16:59:08.7557835+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8730ad9a-fca4-461b-b4c6-68940bf7a532">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f49aa921-b318-498d-85e5-481e1641af98" testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0516480" startTime="2023-10-16T16:59:07.1665900+00:00" endTime="2023-10-16T16:59:07.2182389+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f49aa921-b318-498d-85e5-481e1641af98">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="992862f0-4303-4676-a3f1-91dfd1ac753d" testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" testName="GetMembersForAChannel" computerName="fv-az153-402" duration="00:00:00.0284730" startTime="2023-10-16T16:59:08.0794551+00:00" endTime="2023-10-16T16:59:08.1079278+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="992862f0-4303-4676-a3f1-91dfd1ac753d">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8f1b83a2-1012-4d6a-b038-d5e434e4f416" testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" testName="SetAChannelMetadata" computerName="fv-az153-402" duration="00:00:00.0288430" startTime="2023-10-16T16:59:08.0488531+00:00" endTime="2023-10-16T16:59:08.0776964+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f1b83a2-1012-4d6a-b038-d5e434e4f416">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="53ce271a-ad60-40db-9aa4-9dc956ce2a75" testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" testName="SetMemberForAChannel" computerName="fv-az153-402" duration="00:00:00.0236220" startTime="2023-10-16T16:59:08.1923079+00:00" endTime="2023-10-16T16:59:08.2159298+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53ce271a-ad60-40db-9aa4-9dc956ce2a75">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9b85e716-daf5-4a4a-b363-8743024365f8" testId="785e20b7-0681-3d5e-8c02-431a4435768d" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0034770" startTime="2023-10-16T16:59:07.3359695+00:00" endTime="2023-10-16T16:59:07.3394467+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b85e716-daf5-4a4a-b363-8743024365f8">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e26c3a4-d719-4887-adc3-bfc7c8c48dc0" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0026330" startTime="2023-10-16T16:59:07.4694434+00:00" endTime="2023-10-16T16:59:07.4720765+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e26c3a4-d719-4887-adc3-bfc7c8c48dc0">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8f9270c3-e9b7-41ce-acd3-477c3909b9de" testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" testName="GetAllChannelMetadata" computerName="fv-az153-402" duration="00:00:00.0240610" startTime="2023-10-16T16:59:07.9859679+00:00" endTime="2023-10-16T16:59:08.0100288+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f9270c3-e9b7-41ce-acd3-477c3909b9de">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="33473bed-c0b2-41f1-ab87-459f28667779" testId="1680f939-c9a3-3184-e5e6-300d132ea901" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0033670" startTime="2023-10-16T16:59:07.2715831+00:00" endTime="2023-10-16T16:59:07.2749509+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33473bed-c0b2-41f1-ab87-459f28667779">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2584452b-b7c8-4976-891f-1b9b762e5301" testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0077140" startTime="2023-10-16T16:59:07.2631499+00:00" endTime="2023-10-16T16:59:07.2708647+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2584452b-b7c8-4976-891f-1b9b762e5301">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6d9f1bb-15e7-4e3e-a482-17c2b12f577a" testId="63f82b54-f147-1707-8ae8-1f771750a4c8" testName="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" computerName="fv-az153-402" duration="00:00:00.0934440" startTime="2023-10-16T16:59:07.7159603+00:00" endTime="2023-10-16T16:59:07.8094054+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6d9f1bb-15e7-4e3e-a482-17c2b12f577a">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.1s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c988e4be-1e91-4ed7-9019-f0eeee6e9e6d" testId="8a1c2bbd-f61b-135c-270f-157e7106103a" testName="GetAChannelWithCustomMetadata" computerName="fv-az153-402" duration="00:00:00.0177520" startTime="2023-10-16T16:59:07.9676442+00:00" endTime="2023-10-16T16:59:07.9853970+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c988e4be-1e91-4ed7-9019-f0eeee6e9e6d">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0de64071-1cd5-4114-9742-09c02d06c45a" testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" testName="RevokeATokenWithCharactersThatRequireUrlEncoding" computerName="fv-az153-402" duration="00:00:00.0126020" startTime="2023-10-16T16:59:08.8739986+00:00" endTime="2023-10-16T16:59:08.8866012+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0de64071-1cd5-4114-9742-09c02d06c45a">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36c60b56-838e-413a-95e9-3b3805c5f59e" testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0033050" startTime="2023-10-16T16:59:07.2754586+00:00" endTime="2023-10-16T16:59:07.2787642+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36c60b56-838e-413a-95e9-3b3805c5f59e">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="783a2b06-5e57-4249-814e-e4719d1dd44e" testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0025350" startTime="2023-10-16T16:59:07.4158501+00:00" endTime="2023-10-16T16:59:07.4183850+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="783a2b06-5e57-4249-814e-e4719d1dd44e">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eed66ac1-97dd-42b1-aaac-70252366ca8a" testId="bee75210-e3b0-c570-b8a4-c27baac780a1" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0087309" startTime="2023-10-16T16:59:07.3264841+00:00" endTime="2023-10-16T16:59:07.3352153+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eed66ac1-97dd-42b1-aaac-70252366ca8a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9de13646-100c-47e4-9cb9-f9c3a76646e2" testId="d533b002-ecc8-a6e4-0a55-5406f8886899" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0025820" startTime="2023-10-16T16:59:07.4057702+00:00" endTime="2023-10-16T16:59:07.4083524+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9de13646-100c-47e4-9cb9-f9c3a76646e2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04b04b37-a730-4164-bd71-84169ac446ac" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0028840" startTime="2023-10-16T16:59:07.4323417+00:00" endTime="2023-10-16T16:59:07.4352262+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04b04b37-a730-4164-bd71-84169ac446ac">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c9227df-606e-44ce-a8a9-e3b628cadc44" testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0027120" startTime="2023-10-16T16:59:07.4434662+00:00" endTime="2023-10-16T16:59:07.4461790+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c9227df-606e-44ce-a8a9-e3b628cadc44">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1a5b99e4-8f22-4bd1-88a3-f0c59bc687b3" testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" testName="GetMembershipsForCurrentUser" computerName="fv-az153-402" duration="00:00:00.0433660" startTime="2023-10-16T16:59:08.2418222+00:00" endTime="2023-10-16T16:59:08.2851888+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a5b99e4-8f22-4bd1-88a3-f0c59bc687b3">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="788105a9-f46c-469b-ae9e-45b32972f100" testId="ed3513bd-2d36-bad0-70c5-813865e78b06" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0050980" startTime="2023-10-16T16:59:07.0822861+00:00" endTime="2023-10-16T16:59:07.0873843+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="788105a9-f46c-469b-ae9e-45b32972f100">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a50f7061-3970-4886-8e0d-1350cf2c8816" testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" testName="RemoveMemberForAChannel" computerName="fv-az153-402" duration="00:00:00.0229760" startTime="2023-10-16T16:59:08.1691532+00:00" endTime="2023-10-16T16:59:08.1921289+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a50f7061-3970-4886-8e0d-1350cf2c8816">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fd742426-5b6d-4afa-a7bb-28af4542a65c" testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az153-402" duration="00:00:00.0038970" startTime="2023-10-16T16:59:07.3929368+00:00" endTime="2023-10-16T16:59:07.3968343+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fd742426-5b6d-4afa-a7bb-28af4542a65c">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="RevokeExistingValidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9e948d14-1697-7020-7d46-e7d0ab1a839a">
      <Execution id="6372539c-af3e-4aed-96d8-683a7031c1a6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeExistingValidToken" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1680f939-c9a3-3184-e5e6-300d132ea901">
      <Execution id="33473bed-c0b2-41f1-ab87-459f28667779" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d5ad5871-c66b-34c9-1371-544f7c37d8f6">
      <Execution id="bd3bb7f9-b527-4cb1-bc27-b42136a5891c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="2c1e01dd-81d9-12dc-ec1f-005830932e89">
      <Execution id="dd4b4c7f-cf1e-4210-9874-d73f3ab0fa77" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4401ff2d-c38b-51a8-f6b5-791f859c7098">
      <Execution id="59ec3be2-d3b9-4f23-bc1f-87a99f4c03e2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="984e3d49-4d22-c80b-52c3-19191f62fda7">
      <Execution id="965c0bd7-1277-48a1-867b-a0e0bc7e0fd5" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="96ff7052-903d-d61a-0cb2-cdee63831172">
      <Execution id="d708bc0e-7049-4898-9992-4889cd3ffe9c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembership" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7f798889-8174-9314-5795-cf39887a4d5e">
      <Execution id="6a940235-c673-4ad8-a20d-cf41e54d2895" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ea054fa2-926d-1779-cc57-db94ba1a4d6a">
      <Execution id="fe1ae0c6-a12b-4d74-93dc-53ce5759652a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02e294ba-02db-f21e-dc59-8e7c9444841f">
      <Execution id="87cb81b6-9cff-4c4f-a3ea-49ff38eb7fee" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d871c596-d51c-32a3-d78a-f9b6ed7868a8">
      <Execution id="d8e13eff-c81c-4068-a80b-3524e34a6275" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="10a87c1f-7e7a-0e53-402e-aefcc00a21da">
      <Execution id="b1cbaa3a-7b43-4793-81c4-c87e46859817" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUID" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc7a74bf-9a5b-2257-fa8b-50752bdbf702">
      <Execution id="5d102024-2356-4854-94b9-49386bd4cce4" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3405a88a-853b-5aa4-dc52-211f74db4a9b">
      <Execution id="992862f0-4303-4676-a3f1-91dfd1ac753d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForAChannel" />
    </UnitTest>
    <UnitTest name="RevokeInvalidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f6a7a690-af73-fab8-0ebf-059ccdbb5495">
      <Execution id="9d449846-b071-4a6c-93b9-1e935791ded2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeInvalidToken" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="60e5b02d-603e-8172-2213-6ea7fd0250af">
      <Execution id="a633817c-556f-43d2-b140-b7031537af06" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19c50b46-2552-1ee8-9a15-6db5bb83fc13">
      <Execution id="8c9227df-606e-44ce-a8a9-e3b628cadc44" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0c1a37b6-b16e-3d65-7b38-756d59a051b1">
      <Execution id="8f9270c3-e9b7-41ce-acd3-477c3909b9de" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadata" />
    </UnitTest>
    <UnitTest name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="70fed881-ff3d-cf01-fc50-eec23bec4b15">
      <Execution id="0e9f3c80-c923-4589-9f50-568c7dcff2db" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="6af2fe2f-9fc6-6af1-e346-da11b3a31319">
      <Execution id="783a2b06-5e57-4249-814e-e4719d1dd44e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="84e090d8-441a-8861-c4e5-70620525fefd">
      <Execution id="c651d024-cbc0-490f-a894-2ebf69e1c976" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d2b950d-d4be-de51-1cfb-07073f6d6e13">
      <Execution id="e6949c5c-c2af-40cc-9f11-36eeb9eaad0e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="040fb33d-7655-40ce-1cff-6bcf94c5cc47">
      <Execution id="f49aa921-b318-498d-85e5-481e1641af98" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d9c0b4d-df8d-d917-f4fe-624101bd0d52">
      <Execution id="bdd392e7-8881-4000-b8b2-3654170d0ff2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1500c2f1-f56e-3f8a-4b9e-769b5f983879">
      <Execution id="36c60b56-838e-413a-95e9-3b3805c5f59e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAChannelWithCustomMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="8a1c2bbd-f61b-135c-270f-157e7106103a">
      <Execution id="c988e4be-1e91-4ed7-9019-f0eeee6e9e6d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelWithCustomMetadata" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUIDWithCustomAndChannelCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7acf7525-aaca-a5f2-7032-491d9caf1cf8">
      <Execution id="7ca59e2e-8d6c-4621-a47e-42c72a22c757" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUIDWithCustomAndChannelCustom" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="17537441-5c46-b29c-7a15-7f733fa6a240">
      <Execution id="b46a88e4-8c50-4da2-a58d-e7321a86ba08" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="07a0b332-7585-5132-2931-ba67f585bbfd">
      <Execution id="f5dbeb7e-79f4-4471-8e3c-dca50f81a63c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0992672a-4884-80d0-5142-7d4a75036ed9">
      <Execution id="bb2f94ec-4c01-4834-b367-a475a46dc1c9" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5271a851-e8d2-c42c-aad6-49024c68a9d5">
      <Execution id="31912677-60d0-4961-bf96-528d2a0be738" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="RevokeATokenWhileItIsDisabledOnAServer" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ee450aac-5f02-8238-a55d-792600e33298">
      <Execution id="3d90c10d-d077-4f93-96c0-dd8cf87b7fcb" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWhileItIsDisabledOnAServer" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="50604149-da7b-7eb8-2563-57d2dd368452">
      <Execution id="5911a4c1-06a4-4444-9dfc-d2e2c5ac82ad" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembershipsForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ba48247e-b680-05e2-ec8e-cd712552a6ee">
      <Execution id="1a5b99e4-8f22-4bd1-88a3-f0c59bc687b3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForCurrentUser" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="85374129-b31e-6699-e3e3-35edfbf2f310">
      <Execution id="07e9de93-4c0f-42f5-8d96-2ba34ab77f8d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="GetAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d717777f-cd83-a14f-a06e-85ad7a167630">
      <Execution id="02302eae-3932-4ee3-89ed-4a8df1640417" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="785e20b7-0681-3d5e-8c02-431a4435768d">
      <Execution id="9b85e716-daf5-4a4a-b363-8743024365f8" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="63f82b54-f147-1707-8ae8-1f771750a4c8">
      <Execution id="b6d9f1bb-15e7-4e3e-a482-17c2b12f577a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="SetMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="c824fd41-84e4-6d43-8411-04262c295a77">
      <Execution id="01723351-9ed4-4e97-907d-93d6775df6be" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembership" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3a8dac54-e42a-8256-0f95-9b2771dcaeda">
      <Execution id="4d776a41-780d-4f21-991e-67107935546e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="ManageMembershipsForAUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="aea0c1c8-e4f2-b00c-e2e5-3958a9100776">
      <Execution id="920dcf3f-89cd-4448-8e81-0ae781df41be" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="ManageMembershipsForAUUID" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="cddd27ac-7387-0391-36be-b1b706556ac6">
      <Execution id="1db005f1-0897-4f5b-b1ce-e62ebe0af13a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetAUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5a108f95-d949-be1c-ba70-794e5a89cb2c">
      <Execution id="6c687fad-be18-44ca-bd70-894bfef73355" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="SetAUUIDMetadata" />
    </UnitTest>
    <UnitTest name="RemoveMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="046e940e-ed7b-e2be-b9c9-fa82caaefa8a">
      <Execution id="c12c8cdd-b1f5-4dbd-b806-8f1aef9dfab6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="42ca667a-a020-f899-567b-164563a5f68c">
      <Execution id="a7f97faf-e44f-4328-9f8a-1163745cb7de" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="238d7046-3682-e357-765d-2a21c813602e">
      <Execution id="020e5439-4bb2-4aff-bf18-2c34d905ac4f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="23b61850-f73c-f5eb-17ca-9aaba5f44c54">
      <Execution id="239214c0-a6c1-4061-96bf-c8a1a360630a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb">
      <Execution id="fd742426-5b6d-4afa-a7bb-28af4542a65c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAUUIDWithCustomMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="78605226-9a65-4701-5dbe-74fd1152b767">
      <Execution id="8730ad9a-fca4-461b-b4c6-68940bf7a532" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDWithCustomMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f8d35157-2900-b4b5-1a17-900588c884a9">
      <Execution id="4e897642-e9b9-4def-a724-218363b10e34" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b">
      <Execution id="2584452b-b7c8-4976-891f-1b9b762e5301" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithoutAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5e071152-ee43-67c0-dc5d-67a966171b99">
      <Execution id="c9047455-f61e-4c73-abd5-6dcd021b9332" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithoutAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4dab3f58-f834-dddd-fa3d-a0f55f715d14">
      <Execution id="4422199d-8b91-4138-abf1-44b83afd82b0" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19276ea0-e69e-d8c1-5f86-fbe82fc4defb">
      <Execution id="0769112d-2dd8-4ed1-94eb-478d06e7cdae" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81">
      <Execution id="bca122db-0909-4336-96c2-81dea58c424a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetAChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="947b833a-a96c-d64f-e9e3-0beaa935d4d5">
      <Execution id="8f1b83a2-1012-4d6a-b038-d5e434e4f416" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="SetAChannelMetadata" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f114629c-3c3b-e71d-e1df-1b4312712d85">
      <Execution id="0d30ef90-2c1f-4bd1-8e8f-c55dc14f6b20" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0153fbb0-e5a5-84d4-df77-b92e47c48a9b">
      <Execution id="021f5983-2f29-4e7d-8232-1e7fcf77aad0" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0f851786-a6db-a75b-11ec-b9549b68d0b8">
      <Execution id="16208228-2fe2-4449-8af6-15bfeb050d5a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b2c9c319-05d3-858f-ecdb-c785279a33e5">
      <Execution id="a50f7061-3970-4886-8e0d-1350cf2c8816" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="RemoveMemberForAChannel" />
    </UnitTest>
    <UnitTest name="RemoveAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="be8b1c28-897b-72b1-79de-44eed3d3394f">
      <Execution id="80fe8f55-884a-46a6-99e2-67d7dbb20eba" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="RemoveAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555">
      <Execution id="40096311-99d6-45f1-80c0-7d743a1aacda" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02189687-8985-6806-f35e-66f7f45f4e75">
      <Execution id="f523c696-8a1c-463d-8be6-1d3741857e38" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5ef88e91-8d77-e81e-f266-0337c81fc15e">
      <Execution id="9f7b71b7-507a-48ea-879d-ba08b4ecf67c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bee75210-e3b0-c570-b8a4-c27baac780a1">
      <Execution id="eed66ac1-97dd-42b1-aaac-70252366ca8a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="219f8da3-cc63-e002-72df-e2f549e52967">
      <Execution id="e08860d8-17c5-467e-8856-e32fa281c918" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadata" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="446be40b-3f39-dc72-f797-9a3aa2aac484">
      <Execution id="a66b2ad7-649a-45e2-b413-51aa555ff9d5" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="SetMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed5af684-441e-e3d8-3bf2-a26f2fd3f117">
      <Execution id="53ce271a-ad60-40db-9aa4-9dc956ce2a75" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberForAChannel" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="68a689f7-c4a6-51dd-490d-8e5b965feb8a">
      <Execution id="dcfd2f00-d598-4617-a8f6-8450794ddb92" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="798a8e71-c3a5-952d-b167-1f516fd90da6">
      <Execution id="a501903e-09c1-4eba-805c-0762602e5ae1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9">
      <Execution id="c36b8070-5b54-47d7-9a21-4b8c7fc1e28f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d533b002-ecc8-a6e4-0a55-5406f8886899">
      <Execution id="9de13646-100c-47e4-9cb9-f9c3a76646e2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c">
      <Execution id="027ea4e3-3077-4cb0-aab4-782647ef8dc1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="ManageMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4abae91a-e1c2-11c6-c78e-4c0a98abeb41">
      <Execution id="ace78fcd-7d5d-4210-a36a-7e363ccd7c1a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="ManageMembersForAChannel" />
    </UnitTest>
    <UnitTest name="SetMemberWithCustomForAChannelAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="86189ae4-95f9-30e4-f4c6-bfa1b9898a62">
      <Execution id="95473121-6a59-4e4c-9a8c-b3b5407c7071" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberWithCustomForAChannelAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed3513bd-2d36-bad0-70c5-813865e78b06">
      <Execution id="788105a9-f46c-469b-ae9e-45b32972f100" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bf64e30a-5c5e-95e0-c813-0cfcc293de1e">
      <Execution id="d038ad40-0b91-4b5b-92ad-2424b0421bf1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="13df4a31-1d93-7796-89f0-9bafbf62cf1d">
      <Execution id="06d260b0-fa8c-4be8-a7aa-17697acf788f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="21d875cb-d7ef-e04a-3cc4-907443abf187">
      <Execution id="a6a104d5-8a46-41f7-96c8-9d56863631ef" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa">
      <Execution id="1d343474-1045-464e-9003-a9f29552a031" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="31dac960-539b-5857-5a33-455fe8d5a38f">
      <Execution id="529ed12a-dc33-433b-aea5-d7f3ff3feafd" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="71353074-59f3-561d-2fde-c864cf9dfcb6">
      <Execution id="b872aaf5-d936-4a2e-9798-ff777f1cf095" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeATokenWithCharactersThatRequireUrlEncoding" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b811bc2b-ac6c-1eab-5504-b3af1ec9a805">
      <Execution id="0de64071-1cd5-4114-9742-09c02d06c45a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWithCharactersThatRequireUrlEncoding" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3b96f760-7a4a-da94-3ca5-8f27e0604482">
      <Execution id="b0195985-8bf7-4529-84b4-19d2ac4b8afe" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="fb67481e-37a3-f171-7a64-13ebf12d3989">
      <Execution id="286fb22e-8173-48fe-ac4e-96c752b09c27" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="84e090d8-441a-8861-c4e5-70620525fefd" executionId="c651d024-cbc0-490f-a894-2ebf69e1c976" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" executionId="c12c8cdd-b1f5-4dbd-b806-8f1aef9dfab6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cddd27ac-7387-0391-36be-b1b706556ac6" executionId="1db005f1-0897-4f5b-b1ce-e62ebe0af13a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" executionId="d038ad40-0b91-4b5b-92ad-2424b0421bf1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85374129-b31e-6699-e3e3-35edfbf2f310" executionId="07e9de93-4c0f-42f5-8d96-2ba34ab77f8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="dd4b4c7f-cf1e-4210-9874-d73f3ab0fa77" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" executionId="9f7b71b7-507a-48ea-879d-ba08b4ecf67c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d717777f-cd83-a14f-a06e-85ad7a167630" executionId="02302eae-3932-4ee3-89ed-4a8df1640417" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" executionId="d8e13eff-c81c-4068-a80b-3524e34a6275" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42ca667a-a020-f899-567b-164563a5f68c" executionId="a7f97faf-e44f-4328-9f8a-1163745cb7de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" executionId="16208228-2fe2-4449-8af6-15bfeb050d5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" executionId="c36b8070-5b54-47d7-9a21-4b8c7fc1e28f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="965c0bd7-1277-48a1-867b-a0e0bc7e0fd5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" executionId="4422199d-8b91-4138-abf1-44b83afd82b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" executionId="6372539c-af3e-4aed-96d8-683a7031c1a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" executionId="40096311-99d6-45f1-80c0-7d743a1aacda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02189687-8985-6806-f35e-66f7f45f4e75" executionId="f523c696-8a1c-463d-8be6-1d3741857e38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" executionId="9d449846-b071-4a6c-93b9-1e935791ded2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21d875cb-d7ef-e04a-3cc4-907443abf187" executionId="a6a104d5-8a46-41f7-96c8-9d56863631ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07a0b332-7585-5132-2931-ba67f585bbfd" executionId="f5dbeb7e-79f4-4471-8e3c-dca50f81a63c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50604149-da7b-7eb8-2563-57d2dd368452" executionId="5911a4c1-06a4-4444-9dfc-d2e2c5ac82ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e071152-ee43-67c0-dc5d-67a966171b99" executionId="c9047455-f61e-4c73-abd5-6dcd021b9332" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" executionId="021f5983-2f29-4e7d-8232-1e7fcf77aad0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" executionId="bdd392e7-8881-4000-b8b2-3654170d0ff2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0992672a-4884-80d0-5142-7d4a75036ed9" executionId="bb2f94ec-4c01-4834-b367-a475a46dc1c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" executionId="5d102024-2356-4854-94b9-49386bd4cce4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb67481e-37a3-f171-7a64-13ebf12d3989" executionId="286fb22e-8173-48fe-ac4e-96c752b09c27" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" executionId="59ec3be2-d3b9-4f23-bc1f-87a99f4c03e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" executionId="dcfd2f00-d598-4617-a8f6-8450794ddb92" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31dac960-539b-5857-5a33-455fe8d5a38f" executionId="529ed12a-dc33-433b-aea5-d7f3ff3feafd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" executionId="4d776a41-780d-4f21-991e-67107935546e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" executionId="239214c0-a6c1-4061-96bf-c8a1a360630a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" executionId="e6949c5c-c2af-40cc-9f11-36eeb9eaad0e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" executionId="6c687fad-be18-44ca-bd70-894bfef73355" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" executionId="b0195985-8bf7-4529-84b4-19d2ac4b8afe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" executionId="0769112d-2dd8-4ed1-94eb-478d06e7cdae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="798a8e71-c3a5-952d-b167-1f516fd90da6" executionId="a501903e-09c1-4eba-805c-0762602e5ae1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="446be40b-3f39-dc72-f797-9a3aa2aac484" executionId="a66b2ad7-649a-45e2-b413-51aa555ff9d5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96ff7052-903d-d61a-0cb2-cdee63831172" executionId="d708bc0e-7049-4898-9992-4889cd3ffe9c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" executionId="920dcf3f-89cd-4448-8e81-0ae781df41be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" executionId="0e9f3c80-c923-4589-9f50-568c7dcff2db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" executionId="027ea4e3-3077-4cb0-aab4-782647ef8dc1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="219f8da3-cc63-e002-72df-e2f549e52967" executionId="e08860d8-17c5-467e-8856-e32fa281c918" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="238d7046-3682-e357-765d-2a21c813602e" executionId="020e5439-4bb2-4aff-bf18-2c34d905ac4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f798889-8174-9314-5795-cf39887a4d5e" executionId="6a940235-c673-4ad8-a20d-cf41e54d2895" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" executionId="bca122db-0909-4336-96c2-81dea58c424a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee450aac-5f02-8238-a55d-792600e33298" executionId="3d90c10d-d077-4f93-96c0-dd8cf87b7fcb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c824fd41-84e4-6d43-8411-04262c295a77" executionId="01723351-9ed4-4e97-907d-93d6775df6be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" executionId="1d343474-1045-464e-9003-a9f29552a031" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" executionId="bd3bb7f9-b527-4cb1-bc27-b42136a5891c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02e294ba-02db-f21e-dc59-8e7c9444841f" executionId="87cb81b6-9cff-4c4f-a3ea-49ff38eb7fee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" executionId="95473121-6a59-4e4c-9a8c-b3b5407c7071" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" executionId="ace78fcd-7d5d-4210-a36a-7e363ccd7c1a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" executionId="31912677-60d0-4961-bf96-528d2a0be738" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" executionId="b1cbaa3a-7b43-4793-81c4-c87e46859817" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71353074-59f3-561d-2fde-c864cf9dfcb6" executionId="b872aaf5-d936-4a2e-9798-ff777f1cf095" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17537441-5c46-b29c-7a15-7f733fa6a240" executionId="b46a88e4-8c50-4da2-a58d-e7321a86ba08" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be8b1c28-897b-72b1-79de-44eed3d3394f" executionId="80fe8f55-884a-46a6-99e2-67d7dbb20eba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f114629c-3c3b-e71d-e1df-1b4312712d85" executionId="0d30ef90-2c1f-4bd1-8e8f-c55dc14f6b20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60e5b02d-603e-8172-2213-6ea7fd0250af" executionId="a633817c-556f-43d2-b140-b7031537af06" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" executionId="7ca59e2e-8d6c-4621-a47e-42c72a22c757" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" executionId="fe1ae0c6-a12b-4d74-93dc-53ce5759652a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8d35157-2900-b4b5-1a17-900588c884a9" executionId="4e897642-e9b9-4def-a724-218363b10e34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" executionId="06d260b0-fa8c-4be8-a7aa-17697acf788f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78605226-9a65-4701-5dbe-74fd1152b767" executionId="8730ad9a-fca4-461b-b4c6-68940bf7a532" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" executionId="f49aa921-b318-498d-85e5-481e1641af98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" executionId="992862f0-4303-4676-a3f1-91dfd1ac753d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" executionId="8f1b83a2-1012-4d6a-b038-d5e434e4f416" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" executionId="53ce271a-ad60-40db-9aa4-9dc956ce2a75" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="785e20b7-0681-3d5e-8c02-431a4435768d" executionId="9b85e716-daf5-4a4a-b363-8743024365f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="9e26c3a4-d719-4887-adc3-bfc7c8c48dc0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" executionId="8f9270c3-e9b7-41ce-acd3-477c3909b9de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1680f939-c9a3-3184-e5e6-300d132ea901" executionId="33473bed-c0b2-41f1-ab87-459f28667779" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" executionId="2584452b-b7c8-4976-891f-1b9b762e5301" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63f82b54-f147-1707-8ae8-1f771750a4c8" executionId="b6d9f1bb-15e7-4e3e-a482-17c2b12f577a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a1c2bbd-f61b-135c-270f-157e7106103a" executionId="c988e4be-1e91-4ed7-9019-f0eeee6e9e6d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" executionId="0de64071-1cd5-4114-9742-09c02d06c45a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" executionId="36c60b56-838e-413a-95e9-3b3805c5f59e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" executionId="783a2b06-5e57-4249-814e-e4719d1dd44e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bee75210-e3b0-c570-b8a4-c27baac780a1" executionId="eed66ac1-97dd-42b1-aaac-70252366ca8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d533b002-ecc8-a6e4-0a55-5406f8886899" executionId="9de13646-100c-47e4-9cb9-f9c3a76646e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="04b04b37-a730-4164-bd71-84169ac446ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" executionId="8c9227df-606e-44ce-a8a9-e3b628cadc44" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" executionId="1a5b99e4-8f22-4bd1-88a3-f0c59bc687b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed3513bd-2d36-bad0-70c5-813865e78b06" executionId="788105a9-f46c-469b-ae9e-45b32972f100" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" executionId="a50f7061-3970-4886-8e0d-1350cf2c8816" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" executionId="fd742426-5b6d-4afa-a7bb-28af4542a65c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Completed">
    <Counters total="87" executed="87" passed="87" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>NUnit Adapter 3.17.0.0: Test execution started&#xD;
Running all tests in D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll&#xD;
   NUnit3TestExecutor discovered 87 of 87 NUnit test cases&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)&#xD;
&#xD;
Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.1s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.1s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
&#xD;
NUnit Adapter 3.17.0.0: Test execution complete&#xD;
</StdOut>
    </Output>
  </ResultSummary>
</TestRun>
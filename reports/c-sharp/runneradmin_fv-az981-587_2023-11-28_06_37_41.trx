<?xml version="1.0" encoding="utf-8"?>
<TestRun id="1ab46c01-109d-40dc-ad7c-e9b67c058d9c" name="runneradmin@fv-az981-587 2023-11-28 06:37:41" runUser="fv-az981-587\runneradmin" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2023-11-28T06:37:41.2832033+00:00" queuing="2023-11-28T06:37:41.2832035+00:00" start="2023-11-28T06:37:40.2294847+00:00" finish="2023-11-28T06:37:42.3819576+00:00" />
  <TestSettings name="default" id="3ebabbe6-f26e-4933-9ec7-9618fa57fa16">
    <Deployment runDeploymentRoot="runneradmin_fv-az981-587_2023-11-28_06_37_41" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="a327528f-f3da-4847-861f-6ca91c1806e9" testId="d717777f-cd83-a14f-a06e-85ad7a167630" testName="GetAUUIDMetadataForId" computerName="fv-az981-587" duration="00:00:00.0180600" startTime="2023-11-28T06:37:42.1387133+00:00" endTime="2023-11-28T06:37:42.1567729+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a327528f-f3da-4847-861f-6ca91c1806e9">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="68154a6b-265b-418e-802e-9a512579f05a" testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" testName="SetMemberForAChannel" computerName="fv-az981-587" duration="00:00:00.0194560" startTime="2023-11-28T06:37:41.8225299+00:00" endTime="2023-11-28T06:37:41.8419853+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68154a6b-265b-418e-802e-9a512579f05a">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a50e78a-5e0f-43cf-a959-57c5f3eafaea" testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" testName="GetAllChannelMetadataWithCustom" computerName="fv-az981-587" duration="00:00:00.0141150" startTime="2023-11-28T06:37:41.6748644+00:00" endTime="2023-11-28T06:37:41.6889787+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a50e78a-5e0f-43cf-a959-57c5f3eafaea">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="89616988-6e48-4757-a5b9-68d7d1a50266" testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0023060" startTime="2023-11-28T06:37:41.2802227+00:00" endTime="2023-11-28T06:37:41.2825287+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="89616988-6e48-4757-a5b9-68d7d1a50266">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="32995a02-a976-483e-a518-f9b0208efcc4" testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" testName="RevokeATokenWithCharactersThatRequireUrlEncoding" computerName="fv-az981-587" duration="00:00:00.0089150" startTime="2023-11-28T06:37:42.2323036+00:00" endTime="2023-11-28T06:37:42.2412189+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="32995a02-a976-483e-a518-f9b0208efcc4">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="57faca47-e622-4e88-9ca1-64b5c7e4fd84" testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0023360" startTime="2023-11-28T06:37:41.3038957+00:00" endTime="2023-11-28T06:37:41.3062320+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="57faca47-e622-4e88-9ca1-64b5c7e4fd84">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d64ecee-1af0-4645-8c74-a98f0627d9f2" testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0017400" startTime="2023-11-28T06:37:41.2966295+00:00" endTime="2023-11-28T06:37:41.2983696+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d64ecee-1af0-4645-8c74-a98f0627d9f2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0b21a89-07e0-4c94-94d6-79a7935974e3" testId="02e294ba-02db-f21e-dc59-8e7c9444841f" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0030070" startTime="2023-11-28T06:37:41.2827451+00:00" endTime="2023-11-28T06:37:41.2857518+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0b21a89-07e0-4c94-94d6-79a7935974e3">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aadcd073-04b5-4742-a99e-4818ba7b0d13" testId="42ca667a-a020-f899-567b-164563a5f68c" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0037820" startTime="2023-11-28T06:37:41.1312294+00:00" endTime="2023-11-28T06:37:41.1350113+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aadcd073-04b5-4742-a99e-4818ba7b0d13">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4540a50b-d091-4bea-95d4-a9c71eab6508" testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0056520" startTime="2023-11-28T06:37:41.1801043+00:00" endTime="2023-11-28T06:37:41.1857557+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4540a50b-d091-4bea-95d4-a9c71eab6508">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c01b892-2cda-462b-b72c-8c80b5076211" testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0019650" startTime="2023-11-28T06:37:41.2518301+00:00" endTime="2023-11-28T06:37:41.2537949+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c01b892-2cda-462b-b72c-8c80b5076211">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88985bc5-0426-4ed5-9fa0-9e5419ea1a23" testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" testName="GetMembershipsForCurrentUser" computerName="fv-az981-587" duration="00:00:00.0273410" startTime="2023-11-28T06:37:41.8592687+00:00" endTime="2023-11-28T06:37:41.8866096+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88985bc5-0426-4ed5-9fa0-9e5419ea1a23">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38bcfd63-710d-470d-a0d2-8c0a9d18aff7" testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" testName="SetMemberWithCustomForAChannelAndUUIDWithCustom" computerName="fv-az981-587" duration="00:00:00.0160460" startTime="2023-11-28T06:37:41.8421069+00:00" endTime="2023-11-28T06:37:41.8581529+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38bcfd63-710d-470d-a0d2-8c0a9d18aff7">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8da338d-c235-4fc8-b80b-156ca129bee5" testId="ee450aac-5f02-8238-a55d-792600e33298" testName="RevokeATokenWhileItIsDisabledOnAServer" computerName="fv-az981-587" duration="00:00:00.0132060" startTime="2023-11-28T06:37:42.2190635+00:00" endTime="2023-11-28T06:37:42.2322697+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8da338d-c235-4fc8-b80b-156ca129bee5">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c287fb35-a98a-4f53-a359-9ffe5b4ab3c8" testId="1680f939-c9a3-3184-e5e6-300d132ea901" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0021180" startTime="2023-11-28T06:37:41.1857702+00:00" endTime="2023-11-28T06:37:41.1878883+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c287fb35-a98a-4f53-a359-9ffe5b4ab3c8">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3cb42791-7224-4985-a971-52cecb22987d" testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0136170" startTime="2023-11-28T06:37:41.1664705+00:00" endTime="2023-11-28T06:37:41.1800869+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3cb42791-7224-4985-a971-52cecb22987d">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aacbecda-baaa-4943-a8ce-c30e5fe2f108" testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" testName="SetAChannelMetadata" computerName="fv-az981-587" duration="00:00:00.0213940" startTime="2023-11-28T06:37:41.7074578+00:00" endTime="2023-11-28T06:37:41.7288515+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aacbecda-baaa-4943-a8ce-c30e5fe2f108">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ae98a68-aa76-4d10-b0d9-5346ceb15f95" testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0022070" startTime="2023-11-28T06:37:41.2858979+00:00" endTime="2023-11-28T06:37:41.2881050+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ae98a68-aa76-4d10-b0d9-5346ceb15f95">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="842a602c-0a1e-41fa-8021-6336a25cd168" testId="60e5b02d-603e-8172-2213-6ea7fd0250af" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0034020" startTime="2023-11-28T06:37:41.1197802+00:00" endTime="2023-11-28T06:37:41.1231822+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="842a602c-0a1e-41fa-8021-6336a25cd168">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f76648f9-78d1-4328-b940-117be5e7feda" testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0021360" startTime="2023-11-28T06:37:41.2666171+00:00" endTime="2023-11-28T06:37:41.2687526+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f76648f9-78d1-4328-b940-117be5e7feda">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c3d0a975-9707-4ffa-af6a-0b42d9008e17" testId="21d875cb-d7ef-e04a-3cc4-907443abf187" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0018190" startTime="2023-11-28T06:37:41.3020085+00:00" endTime="2023-11-28T06:37:41.3038272+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3d0a975-9707-4ffa-af6a-0b42d9008e17">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="305ffe2a-ef5f-4b97-9a60-602a49238898" testId="63f82b54-f147-1707-8ae8-1f771750a4c8" testName="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" computerName="fv-az981-587" duration="00:00:00.0842710" startTime="2023-11-28T06:37:41.4513401+00:00" endTime="2023-11-28T06:37:41.5356103+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="305ffe2a-ef5f-4b97-9a60-602a49238898">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.1s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="659086d2-566c-45ef-97e6-4550f030105e" testId="cddd27ac-7387-0391-36be-b1b706556ac6" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0017980" startTime="2023-11-28T06:37:41.3062794+00:00" endTime="2023-11-28T06:37:41.3080771+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="659086d2-566c-45ef-97e6-4550f030105e">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="86379040-7cfa-4083-a254-a031192084ff" testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" testName="GetMembershipsForUUID" computerName="fv-az981-587" duration="00:00:00.0151200" startTime="2023-11-28T06:37:41.8866870+00:00" endTime="2023-11-28T06:37:41.9018072+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86379040-7cfa-4083-a254-a031192084ff">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a9270692-cddf-460f-88e9-47757f805049" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0025030" startTime="2023-11-28T06:37:41.2881373+00:00" endTime="2023-11-28T06:37:41.2906396+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a9270692-cddf-460f-88e9-47757f805049">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4016c1f8-005c-4dd1-952c-47181b5ea107" testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0018190" startTime="2023-11-28T06:37:41.3001526+00:00" endTime="2023-11-28T06:37:41.3019712+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4016c1f8-005c-4dd1-952c-47181b5ea107">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f59cb62-a3bb-4ded-9a8a-877fdccd61c1" testId="85374129-b31e-6699-e3e3-35edfbf2f310" testName="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" computerName="fv-az981-587" duration="00:00:00.0493010" startTime="2023-11-28T06:37:41.5357074+00:00" endTime="2023-11-28T06:37:41.5850080+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f59cb62-a3bb-4ded-9a8a-877fdccd61c1">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d0b0e3f-9736-46a7-a105-0e904d2229ef" testId="be8b1c28-897b-72b1-79de-44eed3d3394f" testName="RemoveAChannelMetadataForId" computerName="fv-az981-587" duration="00:00:00.0184030" startTime="2023-11-28T06:37:41.6890221+00:00" endTime="2023-11-28T06:37:41.7074248+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d0b0e3f-9736-46a7-a105-0e904d2229ef">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aaf4c986-7bf7-4c4e-a090-494c6f364e88" testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0021830" startTime="2023-11-28T06:37:41.2779057+00:00" endTime="2023-11-28T06:37:41.2800886+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aaf4c986-7bf7-4c4e-a090-494c6f364e88">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ceecc1b6-d6f5-438a-bf99-bce41e5f9313" testId="446be40b-3f39-dc72-f797-9a3aa2aac484" testName="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" computerName="fv-az981-587" duration="00:00:00.0150680" startTime="2023-11-28T06:37:41.4140133+00:00" endTime="2023-11-28T06:37:41.4290814+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ceecc1b6-d6f5-438a-bf99-bce41e5f9313">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="05d8a109-fcf4-4255-a8f3-7bfc90e35d7d" testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0037870" startTime="2023-11-28T06:37:41.3122327+00:00" endTime="2023-11-28T06:37:41.3160198+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05d8a109-fcf4-4255-a8f3-7bfc90e35d7d">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8fa266d6-30a9-4d04-87e9-c74e6f8ac2db" testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0022090" startTime="2023-11-28T06:37:41.3160562+00:00" endTime="2023-11-28T06:37:41.3182653+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8fa266d6-30a9-4d04-87e9-c74e6f8ac2db">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d6eec59f-bb5b-41d3-8d9d-00d954c12e51" testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0035660" startTime="2023-11-28T06:37:41.2739438+00:00" endTime="2023-11-28T06:37:41.2775096+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6eec59f-bb5b-41d3-8d9d-00d954c12e51">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cf21a08e-2280-41bf-92ff-53d9f1192749" testId="07a0b332-7585-5132-2931-ba67f585bbfd" testName="RemoveAUUIDMetadataForId" computerName="fv-az981-587" duration="00:00:00.0147200" startTime="2023-11-28T06:37:42.1719396+00:00" endTime="2023-11-28T06:37:42.1866597+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf21a08e-2280-41bf-92ff-53d9f1192749">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="96622b35-296a-4304-9fdf-91786a805e95" testId="8a1c2bbd-f61b-135c-270f-157e7106103a" testName="GetAChannelWithCustomMetadata" computerName="fv-az981-587" duration="00:00:00.0136760" startTime="2023-11-28T06:37:41.6407313+00:00" endTime="2023-11-28T06:37:41.6544067+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96622b35-296a-4304-9fdf-91786a805e95">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6f0958dc-6ab8-49f3-9054-f7093bd14924" testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0021540" startTime="2023-11-28T06:37:41.1879027+00:00" endTime="2023-11-28T06:37:41.1900569+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f0958dc-6ab8-49f3-9054-f7093bd14924">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="75bc1a95-200f-4109-b59d-3c9c693f0b97" testId="7f798889-8174-9314-5795-cf39887a4d5e" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0655670" startTime="2023-11-28T06:37:41.0528343+00:00" endTime="2023-11-28T06:37:41.1183287+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="75bc1a95-200f-4109-b59d-3c9c693f0b97">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0cf5c465-ce7a-4ada-9802-aec79bcbead7" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0017940" startTime="2023-11-28T06:37:41.3102441+00:00" endTime="2023-11-28T06:37:41.3120383+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0cf5c465-ce7a-4ada-9802-aec79bcbead7">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fc5b5b80-229f-4eb7-91c8-01df1b95c9bb" testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" testName="RemoveMemberForAChannel" computerName="fv-az981-587" duration="00:00:00.0154020" startTime="2023-11-28T06:37:41.8070963+00:00" endTime="2023-11-28T06:37:41.8224984+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fc5b5b80-229f-4eb7-91c8-01df1b95c9bb">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="720d5f81-b69a-4293-af22-ead2e3d40436" testId="bee75210-e3b0-c570-b8a4-c27baac780a1" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0095050" startTime="2023-11-28T06:37:41.2223967+00:00" endTime="2023-11-28T06:37:41.2319014+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="720d5f81-b69a-4293-af22-ead2e3d40436">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e1b2869-4b25-4c6b-91d5-6833ad3626a1" testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" testName="GetAChannelMetadataForId" computerName="fv-az981-587" duration="00:00:00.0423650" startTime="2023-11-28T06:37:41.5983308+00:00" endTime="2023-11-28T06:37:41.6406953+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e1b2869-4b25-4c6b-91d5-6833ad3626a1">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a7c570a3-ecb7-4bbe-9c45-1b3a98779d16" testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" testName="GetMembershipsForUUIDWithCustomAndChannelCustom" computerName="fv-az981-587" duration="00:00:00.0890790" startTime="2023-11-28T06:37:41.9018831+00:00" endTime="2023-11-28T06:37:41.9909607+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7c570a3-ecb7-4bbe-9c45-1b3a98779d16">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.1s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bb699183-1217-41e4-8c89-546938911dbd" testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" testName="GetMembersForAChannel" computerName="fv-az981-587" duration="00:00:00.0290910" startTime="2023-11-28T06:37:41.7301385+00:00" endTime="2023-11-28T06:37:41.7592293+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb699183-1217-41e4-8c89-546938911dbd">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06041209-9419-4f8d-8a93-207462ccfa6c" testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" testName="GetAllUUIDMetadataWithCustom" computerName="fv-az981-587" duration="00:00:00.0150470" startTime="2023-11-28T06:37:42.1236038+00:00" endTime="2023-11-28T06:37:42.1386506+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06041209-9419-4f8d-8a93-207462ccfa6c">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8716503e-de2c-407a-a91c-964963555c2b" testId="238d7046-3682-e357-765d-2a21c813602e" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" computerName="fv-az981-587" duration="00:00:00.0124980" startTime="2023-11-28T06:37:41.4291180+00:00" endTime="2023-11-28T06:37:41.4416160+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8716503e-de2c-407a-a91c-964963555c2b">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fdce67d6-2b16-44da-a534-ddfda6b1d158" testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" testName="ManageMembershipsForAUUID" computerName="fv-az981-587" duration="00:00:00.0294470" startTime="2023-11-28T06:37:41.9910436+00:00" endTime="2023-11-28T06:37:42.0204904+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fdce67d6-2b16-44da-a534-ddfda6b1d158">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c381fe03-1e59-4ace-a4c4-cd38311c9154" testId="02189687-8985-6806-f35e-66f7f45f4e75" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0067500" startTime="2023-11-28T06:37:41.2540415+00:00" endTime="2023-11-28T06:37:41.2607915+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c381fe03-1e59-4ace-a4c4-cd38311c9154">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df32d0d7-d8e3-4f5d-aeab-07991e8d4978" testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0031470" startTime="2023-11-28T06:37:41.2933292+00:00" endTime="2023-11-28T06:37:41.2964760+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df32d0d7-d8e3-4f5d-aeab-07991e8d4978">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e327f315-c9dd-421b-a5f5-18bb6f7712e2" testId="d533b002-ecc8-a6e4-0a55-5406f8886899" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0020320" startTime="2023-11-28T06:37:41.2713350+00:00" endTime="2023-11-28T06:37:41.2733667+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e327f315-c9dd-421b-a5f5-18bb6f7712e2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="188cbc4e-e0e9-4ade-97fa-83319c970d7e" testId="84e090d8-441a-8861-c4e5-70620525fefd" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0056840" startTime="2023-11-28T06:37:41.1951515+00:00" endTime="2023-11-28T06:37:41.2008356+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="188cbc4e-e0e9-4ade-97fa-83319c970d7e">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23f856ce-c6b8-4489-a7eb-6db647fa69ce" testId="c824fd41-84e4-6d43-8411-04262c295a77" testName="SetMembership" computerName="fv-az981-587" duration="00:00:00.0272200" startTime="2023-11-28T06:37:42.0529129+00:00" endTime="2023-11-28T06:37:42.0801323+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23f856ce-c6b8-4489-a7eb-6db647fa69ce">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c206fe6-5891-49ef-9fd3-6db62863ec28" testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0024960" startTime="2023-11-28T06:37:41.2639373+00:00" endTime="2023-11-28T06:37:41.2664332+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c206fe6-5891-49ef-9fd3-6db62863ec28">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="052252f5-f218-4816-bf2f-9a88a27f06ca" testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" testName="SetAUUIDMetadata" computerName="fv-az981-587" duration="00:00:00.0177639" startTime="2023-11-28T06:37:42.2001865+00:00" endTime="2023-11-28T06:37:42.2179502+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="052252f5-f218-4816-bf2f-9a88a27f06ca">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d3431a82-f92b-4288-a490-83530688c7e7" testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0024090" startTime="2023-11-28T06:37:41.1256246+00:00" endTime="2023-11-28T06:37:41.1280332+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3431a82-f92b-4288-a490-83530688c7e7">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a9376799-c026-48c5-a590-2c4cf0106784" testId="0992672a-4884-80d0-5142-7d4a75036ed9" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" computerName="fv-az981-587" duration="00:00:00.0095780" startTime="2023-11-28T06:37:41.4416483+00:00" endTime="2023-11-28T06:37:41.4512261+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a9376799-c026-48c5-a590-2c4cf0106784">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f56fdd5d-5872-4c73-b738-1e4ffa0c9d25" testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" testName="GetAllChannelMetadata" computerName="fv-az981-587" duration="00:00:00.0203829" startTime="2023-11-28T06:37:41.6544380+00:00" endTime="2023-11-28T06:37:41.6748207+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f56fdd5d-5872-4c73-b738-1e4ffa0c9d25">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f215f0d-42fd-49b4-a9a2-5533367d417d" testId="71353074-59f3-561d-2fde-c864cf9dfcb6" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0138040" startTime="2023-11-28T06:37:41.2059153+00:00" endTime="2023-11-28T06:37:41.2197184+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f215f0d-42fd-49b4-a9a2-5533367d417d">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4764334a-2778-46ce-a47e-5bca9e26d79a" testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0028890" startTime="2023-11-28T06:37:41.2008497+00:00" endTime="2023-11-28T06:37:41.2037387+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4764334a-2778-46ce-a47e-5bca9e26d79a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8fb54428-67d7-4bef-9557-cf2ba2696e6f" testId="f114629c-3c3b-e71d-e1df-1b4312712d85" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0131390" startTime="2023-11-28T06:37:41.1441257+00:00" endTime="2023-11-28T06:37:41.1572640+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8fb54428-67d7-4bef-9557-cf2ba2696e6f">
      <Output>
        <StdOut>Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6fe1229e-3db7-49cf-8591-40aef61ec87f" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0021549" startTime="2023-11-28T06:37:41.2909827+00:00" endTime="2023-11-28T06:37:41.2931380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6fe1229e-3db7-49cf-8591-40aef61ec87f">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bed6b789-4d49-4dee-8a3c-26b7af729d2c" testId="ed3513bd-2d36-bad0-70c5-813865e78b06" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0031690" startTime="2023-11-28T06:37:41.1280471+00:00" endTime="2023-11-28T06:37:41.1312159+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bed6b789-4d49-4dee-8a3c-26b7af729d2c">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="93eb79d1-ff85-42a4-a988-06c9a0c00194" testId="219f8da3-cc63-e002-72df-e2f549e52967" testName="GetAllUUIDMetadata" computerName="fv-az981-587" duration="00:00:00.0228210" startTime="2023-11-28T06:37:42.1007068+00:00" endTime="2023-11-28T06:37:42.1235276+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93eb79d1-ff85-42a4-a988-06c9a0c00194">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="563a0cba-d2ef-411d-af2e-174855c5b39c" testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" testName="ManageMembersForAChannel" computerName="fv-az981-587" duration="00:00:00.0274950" startTime="2023-11-28T06:37:41.7795611+00:00" endTime="2023-11-28T06:37:41.8070553+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="563a0cba-d2ef-411d-af2e-174855c5b39c">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cf594b7c-236b-481a-8eea-3bb780890d9f" testId="78605226-9a65-4701-5dbe-74fd1152b767" testName="GetAUUIDWithCustomMetadataIdStoredInConfig" computerName="fv-az981-587" duration="00:00:00.0150980" startTime="2023-11-28T06:37:42.1568078+00:00" endTime="2023-11-28T06:37:42.1719050+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf594b7c-236b-481a-8eea-3bb780890d9f">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3afcc1f0-cc7e-4bea-a426-c90199060b77" testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0017100" startTime="2023-11-28T06:37:41.2984066+00:00" endTime="2023-11-28T06:37:41.3001164+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3afcc1f0-cc7e-4bea-a426-c90199060b77">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c53b9434-1f56-489b-ba23-08e30d72409c" testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" testName="RemoveMembershipForCurrentUser" computerName="fv-az981-587" duration="00:00:00.0138790" startTime="2023-11-28T06:37:42.0389823+00:00" endTime="2023-11-28T06:37:42.0528609+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c53b9434-1f56-489b-ba23-08e30d72409c">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4bdf4732-8d8d-4896-8afc-b5a16e9fb597" testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" testName="RevokeExistingValidToken" computerName="fv-az981-587" duration="00:00:00.0086160" startTime="2023-11-28T06:37:42.2412512+00:00" endTime="2023-11-28T06:37:42.2498667+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4bdf4732-8d8d-4896-8afc-b5a16e9fb597">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6030ae7b-28a7-41e1-949a-a228776b53c5" testId="17537441-5c46-b29c-7a15-7f733fa6a240" testName="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" computerName="fv-az981-587" duration="00:00:00.0929170" startTime="2023-11-28T06:37:41.3210602+00:00" endTime="2023-11-28T06:37:41.4139762+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6030ae7b-28a7-41e1-949a-a228776b53c5">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.1s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b818efaa-58e6-46dd-9976-65ab55b9bf5c" testId="f8d35157-2900-b4b5-1a17-900588c884a9" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0025900" startTime="2023-11-28T06:37:41.2197338+00:00" endTime="2023-11-28T06:37:41.2223236+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b818efaa-58e6-46dd-9976-65ab55b9bf5c">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f00a5b9e-ddde-4818-97d5-e2a672f74df2" testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0023710" startTime="2023-11-28T06:37:41.1232393+00:00" endTime="2023-11-28T06:37:41.1256103+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f00a5b9e-ddde-4818-97d5-e2a672f74df2">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e72c2867-b68a-45a4-8c27-c4bad55faa0e" testId="31dac960-539b-5857-5a33-455fe8d5a38f" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0090350" startTime="2023-11-28T06:37:41.1572983+00:00" endTime="2023-11-28T06:37:41.1663328+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e72c2867-b68a-45a4-8c27-c4bad55faa0e">
      <Output>
        <StdOut>Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7fb2ca08-01f3-4d17-b447-4d70e31c1731" testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" testName="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" computerName="fv-az981-587" duration="00:00:00.0201810" startTime="2023-11-28T06:37:41.7593366+00:00" endTime="2023-11-28T06:37:41.7795171+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7fb2ca08-01f3-4d17-b447-4d70e31c1731">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ea3f4fa2-dace-4448-8ea1-768ed9b4a60d" testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0053099" startTime="2023-11-28T06:37:41.2343469+00:00" endTime="2023-11-28T06:37:41.2396568+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea3f4fa2-dace-4448-8ea1-768ed9b4a60d">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fabd4bb1-a756-4687-8525-8685ea170015" testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" testName="SetMembershipForCurrentUser" computerName="fv-az981-587" duration="00:00:00.0190360" startTime="2023-11-28T06:37:42.0801966+00:00" endTime="2023-11-28T06:37:42.0992319+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fabd4bb1-a756-4687-8525-8685ea170015">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c214d8a-9a8b-4796-94a5-37e37ec2f29b" testId="798a8e71-c3a5-952d-b167-1f516fd90da6" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0072500" startTime="2023-11-28T06:37:41.1350411+00:00" endTime="2023-11-28T06:37:41.1422914+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c214d8a-9a8b-4796-94a5-37e37ec2f29b">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c21156f8-2aca-4544-9412-d5b3b95d310e" testId="96ff7052-903d-d61a-0cb2-cdee63831172" testName="RemoveMembership" computerName="fv-az981-587" duration="00:00:00.0183550" startTime="2023-11-28T06:37:42.0205455+00:00" endTime="2023-11-28T06:37:42.0389003+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c21156f8-2aca-4544-9412-d5b3b95d310e">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="22177d02-e133-4f94-a06e-387781a3a639" testId="5e071152-ee43-67c0-dc5d-67a966171b99" testName="GrantAnAccessTokenWithoutAnAuthorizedUuid" computerName="fv-az981-587" duration="00:00:00.0119490" startTime="2023-11-28T06:37:41.5850508+00:00" endTime="2023-11-28T06:37:41.5969991+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22177d02-e133-4f94-a06e-387781a3a639">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b30511db-880d-4408-84cb-9d173e0ef71f" testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0095850" startTime="2023-11-28T06:37:41.2420836+00:00" endTime="2023-11-28T06:37:41.2516684+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b30511db-880d-4408-84cb-9d173e0ef71f">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="07112e29-78cf-40ba-a6a0-5a1040bdab07" testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0050660" startTime="2023-11-28T06:37:41.1900716+00:00" endTime="2023-11-28T06:37:41.1951377+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07112e29-78cf-40ba-a6a0-5a1040bdab07">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c4d37d59-ebb6-4079-9bb2-fcf08a5cc80d" testId="50604149-da7b-7eb8-2563-57d2dd368452" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0021990" startTime="2023-11-28T06:37:41.2689747+00:00" endTime="2023-11-28T06:37:41.2711731+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4d37d59-ebb6-4079-9bb2-fcf08a5cc80d">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5d97afc0-5c4a-404f-9053-e3cd07f84bbc" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0019520" startTime="2023-11-28T06:37:41.3081127+00:00" endTime="2023-11-28T06:37:41.3100641+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d97afc0-5c4a-404f-9053-e3cd07f84bbc">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0e2e756a-694b-4f2a-aee9-1f8c15b2adda" testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0020870" startTime="2023-11-28T06:37:41.2398220+00:00" endTime="2023-11-28T06:37:41.2419090+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e2e756a-694b-4f2a-aee9-1f8c15b2adda">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9ec2aaa5-8258-4094-a7b3-065e3ec0ab95" testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0028230" startTime="2023-11-28T06:37:41.2609562+00:00" endTime="2023-11-28T06:37:41.2637796+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ec2aaa5-8258-4094-a7b3-065e3ec0ab95">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2a604f04-8b71-45f8-9297-4602cd6f5152" testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" testName="RevokeInvalidToken" computerName="fv-az981-587" duration="00:00:00.0112190" startTime="2023-11-28T06:37:42.2498998+00:00" endTime="2023-11-28T06:37:42.2611185+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a604f04-8b71-45f8-9297-4602cd6f5152">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7da49303-6800-4564-913b-8e50292924e2" testId="785e20b7-0681-3d5e-8c02-431a4435768d" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0021210" startTime="2023-11-28T06:37:41.2320562+00:00" endTime="2023-11-28T06:37:41.2341773+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7da49303-6800-4564-913b-8e50292924e2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f8bb067-f57b-4448-aecd-4bf7b0926ee3" testId="fb67481e-37a3-f171-7a64-13ebf12d3989" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-587" duration="00:00:00.0021430" startTime="2023-11-28T06:37:41.2037597+00:00" endTime="2023-11-28T06:37:41.2059021+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f8bb067-f57b-4448-aecd-4bf7b0926ee3">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f0518361-314d-4b84-858f-6851d59d9f88" testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" testName="RemoveAUUIDMetadataIdStoredInConfig" computerName="fv-az981-587" duration="00:00:00.0134580" startTime="2023-11-28T06:37:42.1866926+00:00" endTime="2023-11-28T06:37:42.2001500+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0518361-314d-4b84-858f-6851d59d9f88">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="785e20b7-0681-3d5e-8c02-431a4435768d">
      <Execution id="7da49303-6800-4564-913b-8e50292924e2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d9c0b4d-df8d-d917-f4fe-624101bd0d52">
      <Execution id="d6eec59f-bb5b-41d3-8d9d-00d954c12e51" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="2c1e01dd-81d9-12dc-ec1f-005830932e89">
      <Execution id="a9270692-cddf-460f-88e9-47757f805049" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="13df4a31-1d93-7796-89f0-9bafbf62cf1d">
      <Execution id="4764334a-2778-46ce-a47e-5bca9e26d79a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="31dac960-539b-5857-5a33-455fe8d5a38f">
      <Execution id="e72c2867-b68a-45a4-8c27-c4bad55faa0e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="798a8e71-c3a5-952d-b167-1f516fd90da6">
      <Execution id="0c214d8a-9a8b-4796-94a5-37e37ec2f29b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bee75210-e3b0-c570-b8a4-c27baac780a1">
      <Execution id="720d5f81-b69a-4293-af22-ead2e3d40436" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeInvalidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f6a7a690-af73-fab8-0ebf-059ccdbb5495">
      <Execution id="2a604f04-8b71-45f8-9297-4602cd6f5152" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeInvalidToken" />
    </UnitTest>
    <UnitTest name="SetMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="c824fd41-84e4-6d43-8411-04262c295a77">
      <Execution id="23f856ce-c6b8-4489-a7eb-6db647fa69ce" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembership" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="17537441-5c46-b29c-7a15-7f733fa6a240">
      <Execution id="6030ae7b-28a7-41e1-949a-a228776b53c5" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0153fbb0-e5a5-84d4-df77-b92e47c48a9b">
      <Execution id="2c01b892-2cda-462b-b72c-8c80b5076211" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1500c2f1-f56e-3f8a-4b9e-769b5f983879">
      <Execution id="6f0958dc-6ab8-49f3-9054-f7093bd14924" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="be8b1c28-897b-72b1-79de-44eed3d3394f">
      <Execution id="6d0b0e3f-9736-46a7-a105-0e904d2229ef" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="RemoveAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02189687-8985-6806-f35e-66f7f45f4e75">
      <Execution id="c381fe03-1e59-4ace-a4c4-cd38311c9154" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeATokenWhileItIsDisabledOnAServer" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ee450aac-5f02-8238-a55d-792600e33298">
      <Execution id="d8da338d-c235-4fc8-b80b-156ca129bee5" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWhileItIsDisabledOnAServer" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="60e5b02d-603e-8172-2213-6ea7fd0250af">
      <Execution id="842a602c-0a1e-41fa-8021-6336a25cd168" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="50604149-da7b-7eb8-2563-57d2dd368452">
      <Execution id="c4d37d59-ebb6-4079-9bb2-fcf08a5cc80d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5ef88e91-8d77-e81e-f266-0337c81fc15e">
      <Execution id="57faca47-e622-4e88-9ca1-64b5c7e4fd84" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="cddd27ac-7387-0391-36be-b1b706556ac6">
      <Execution id="659086d2-566c-45ef-97e6-4550f030105e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d5ad5871-c66b-34c9-1371-544f7c37d8f6">
      <Execution id="9d64ecee-1af0-4645-8c74-a98f0627d9f2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="ManageMembershipsForAUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="aea0c1c8-e4f2-b00c-e2e5-3958a9100776">
      <Execution id="fdce67d6-2b16-44da-a534-ddfda6b1d158" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="ManageMembershipsForAUUID" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f114629c-3c3b-e71d-e1df-1b4312712d85">
      <Execution id="8fb54428-67d7-4bef-9557-cf2ba2696e6f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d533b002-ecc8-a6e4-0a55-5406f8886899">
      <Execution id="e327f315-c9dd-421b-a5f5-18bb6f7712e2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeExistingValidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9e948d14-1697-7020-7d46-e7d0ab1a839a">
      <Execution id="4bdf4732-8d8d-4896-8afc-b5a16e9fb597" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeExistingValidToken" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9">
      <Execution id="7ae98a68-aa76-4d10-b0d9-5346ceb15f95" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="10a87c1f-7e7a-0e53-402e-aefcc00a21da">
      <Execution id="86379040-7cfa-4083-a254-a031192084ff" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUID" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb">
      <Execution id="6c206fe6-5891-49ef-9fd3-6db62863ec28" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetAUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5a108f95-d949-be1c-ba70-794e5a89cb2c">
      <Execution id="052252f5-f218-4816-bf2f-9a88a27f06ca" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="SetAUUIDMetadata" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="07a0b332-7585-5132-2931-ba67f585bbfd">
      <Execution id="cf21a08e-2280-41bf-92ff-53d9f1192749" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="63f82b54-f147-1707-8ae8-1f771750a4c8">
      <Execution id="305ffe2a-ef5f-4b97-9a60-602a49238898" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="RevokeATokenWithCharactersThatRequireUrlEncoding" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b811bc2b-ac6c-1eab-5504-b3af1ec9a805">
      <Execution id="32995a02-a976-483e-a518-f9b0208efcc4" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWithCharactersThatRequireUrlEncoding" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="238d7046-3682-e357-765d-2a21c813602e">
      <Execution id="8716503e-de2c-407a-a91c-964963555c2b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="SetMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c">
      <Execution id="fabd4bb1-a756-4687-8525-8685ea170015" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="68a689f7-c4a6-51dd-490d-8e5b965feb8a">
      <Execution id="b30511db-880d-4408-84cb-9d173e0ef71f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19276ea0-e69e-d8c1-5f86-fbe82fc4defb">
      <Execution id="f00a5b9e-ddde-4818-97d5-e2a672f74df2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUIDWithCustomAndChannelCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7acf7525-aaca-a5f2-7032-491d9caf1cf8">
      <Execution id="a7c570a3-ecb7-4bbe-9c45-1b3a98779d16" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUIDWithCustomAndChannelCustom" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed3513bd-2d36-bad0-70c5-813865e78b06">
      <Execution id="bed6b789-4d49-4dee-8a3c-26b7af729d2c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b2c9c319-05d3-858f-ecdb-c785279a33e5">
      <Execution id="fc5b5b80-229f-4eb7-91c8-01df1b95c9bb" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="RemoveMemberForAChannel" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d871c596-d51c-32a3-d78a-f9b6ed7868a8">
      <Execution id="d3431a82-f92b-4288-a490-83530688c7e7" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="23b61850-f73c-f5eb-17ca-9aaba5f44c54">
      <Execution id="06041209-9419-4f8d-8a93-207462ccfa6c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="040fb33d-7655-40ce-1cff-6bcf94c5cc47">
      <Execution id="3cb42791-7224-4985-a971-52cecb22987d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f8d35157-2900-b4b5-1a17-900588c884a9">
      <Execution id="b818efaa-58e6-46dd-9976-65ab55b9bf5c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="446be40b-3f39-dc72-f797-9a3aa2aac484">
      <Execution id="ceecc1b6-d6f5-438a-bf99-bce41e5f9313" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="984e3d49-4d22-c80b-52c3-19191f62fda7">
      <Execution id="5d97afc0-5c4a-404f-9053-e3cd07f84bbc" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4dab3f58-f834-dddd-fa3d-a0f55f715d14">
      <Execution id="4016c1f8-005c-4dd1-952c-47181b5ea107" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="85374129-b31e-6699-e3e3-35edfbf2f310">
      <Execution id="1f59cb62-a3bb-4ded-9a8a-877fdccd61c1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="219f8da3-cc63-e002-72df-e2f549e52967">
      <Execution id="93eb79d1-ff85-42a4-a988-06c9a0c00194" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadata" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc7a74bf-9a5b-2257-fa8b-50752bdbf702">
      <Execution id="07112e29-78cf-40ba-a6a0-5a1040bdab07" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="fb67481e-37a3-f171-7a64-13ebf12d3989">
      <Execution id="1f8bb067-f57b-4448-aecd-4bf7b0926ee3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02e294ba-02db-f21e-dc59-8e7c9444841f">
      <Execution id="b0b21a89-07e0-4c94-94d6-79a7935974e3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="96ff7052-903d-d61a-0cb2-cdee63831172">
      <Execution id="c21156f8-2aca-4544-9412-d5b3b95d310e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembership" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="71353074-59f3-561d-2fde-c864cf9dfcb6">
      <Execution id="1f215f0d-42fd-49b4-a9a2-5533367d417d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555">
      <Execution id="df32d0d7-d8e3-4f5d-aeab-07991e8d4978" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0f851786-a6db-a75b-11ec-b9549b68d0b8">
      <Execution id="aaf4c986-7bf7-4c4e-a090-494c6f364e88" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4401ff2d-c38b-51a8-f6b5-791f859c7098">
      <Execution id="2e1b2869-4b25-4c6b-91d5-6833ad3626a1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="GetMembershipsForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ba48247e-b680-05e2-ec8e-cd712552a6ee">
      <Execution id="88985bc5-0426-4ed5-9fa0-9e5419ea1a23" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForCurrentUser" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="84e090d8-441a-8861-c4e5-70620525fefd">
      <Execution id="188cbc4e-e0e9-4ade-97fa-83319c970d7e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa">
      <Execution id="9ec2aaa5-8258-4094-a7b3-065e3ec0ab95" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithoutAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5e071152-ee43-67c0-dc5d-67a966171b99">
      <Execution id="22177d02-e133-4f94-a06e-387781a3a639" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithoutAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="42ca667a-a020-f899-567b-164563a5f68c">
      <Execution id="aadcd073-04b5-4742-a99e-4818ba7b0d13" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetMemberWithCustomForAChannelAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="86189ae4-95f9-30e4-f4c6-bfa1b9898a62">
      <Execution id="38bcfd63-710d-470d-a0d2-8c0a9d18aff7" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberWithCustomForAChannelAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="GetAUUIDWithCustomMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="78605226-9a65-4701-5dbe-74fd1152b767">
      <Execution id="cf594b7c-236b-481a-8eea-3bb780890d9f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDWithCustomMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d2b950d-d4be-de51-1cfb-07073f6d6e13">
      <Execution id="0e2e756a-694b-4f2a-aee9-1f8c15b2adda" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="046e940e-ed7b-e2be-b9c9-fa82caaefa8a">
      <Execution id="c53b9434-1f56-489b-ba23-08e30d72409c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="6af2fe2f-9fc6-6af1-e346-da11b3a31319">
      <Execution id="89616988-6e48-4757-a5b9-68d7d1a50266" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19c50b46-2552-1ee8-9a15-6db5bb83fc13">
      <Execution id="3afcc1f0-cc7e-4bea-a426-c90199060b77" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="ManageMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4abae91a-e1c2-11c6-c78e-4c0a98abeb41">
      <Execution id="563a0cba-d2ef-411d-af2e-174855c5b39c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="ManageMembersForAChannel" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b">
      <Execution id="4540a50b-d091-4bea-95d4-a9c71eab6508" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0c1a37b6-b16e-3d65-7b38-756d59a051b1">
      <Execution id="f56fdd5d-5872-4c73-b738-1e4ffa0c9d25" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadata" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bf64e30a-5c5e-95e0-c813-0cfcc293de1e">
      <Execution id="05d8a109-fcf4-4255-a8f3-7bfc90e35d7d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5271a851-e8d2-c42c-aad6-49024c68a9d5">
      <Execution id="6a50e78a-5e0f-43cf-a959-57c5f3eafaea" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0992672a-4884-80d0-5142-7d4a75036ed9">
      <Execution id="a9376799-c026-48c5-a590-2c4cf0106784" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="GetAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d717777f-cd83-a14f-a06e-85ad7a167630">
      <Execution id="a327528f-f3da-4847-861f-6ca91c1806e9" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="GetMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3405a88a-853b-5aa4-dc52-211f74db4a9b">
      <Execution id="bb699183-1217-41e4-8c89-546938911dbd" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForAChannel" />
    </UnitTest>
    <UnitTest name="GetAChannelWithCustomMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="8a1c2bbd-f61b-135c-270f-157e7106103a">
      <Execution id="96622b35-296a-4304-9fdf-91786a805e95" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelWithCustomMetadata" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1680f939-c9a3-3184-e5e6-300d132ea901">
      <Execution id="c287fb35-a98a-4f53-a359-9ffe5b4ab3c8" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="70fed881-ff3d-cf01-fc50-eec23bec4b15">
      <Execution id="7fb2ca08-01f3-4d17-b447-4d70e31c1731" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3a8dac54-e42a-8256-0f95-9b2771dcaeda">
      <Execution id="f0518361-314d-4b84-858f-6851d59d9f88" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="SetAChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="947b833a-a96c-d64f-e9e3-0beaa935d4d5">
      <Execution id="aacbecda-baaa-4943-a8ce-c30e5fe2f108" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="SetAChannelMetadata" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81">
      <Execution id="f76648f9-78d1-4328-b940-117be5e7feda" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7f798889-8174-9314-5795-cf39887a4d5e">
      <Execution id="75bc1a95-200f-4109-b59d-3c9c693f0b97" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3b96f760-7a4a-da94-3ca5-8f27e0604482">
      <Execution id="ea3f4fa2-dace-4448-8ea1-768ed9b4a60d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed5af684-441e-e3d8-3bf2-a26f2fd3f117">
      <Execution id="68154a6b-265b-418e-802e-9a512579f05a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberForAChannel" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ea054fa2-926d-1779-cc57-db94ba1a4d6a">
      <Execution id="8fa266d6-30a9-4d04-87e9-c74e6f8ac2db" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="21d875cb-d7ef-e04a-3cc4-907443abf187">
      <Execution id="c3d0a975-9707-4ffa-af6a-0b42d9008e17" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="d717777f-cd83-a14f-a06e-85ad7a167630" executionId="a327528f-f3da-4847-861f-6ca91c1806e9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" executionId="68154a6b-265b-418e-802e-9a512579f05a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" executionId="6a50e78a-5e0f-43cf-a959-57c5f3eafaea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" executionId="89616988-6e48-4757-a5b9-68d7d1a50266" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" executionId="32995a02-a976-483e-a518-f9b0208efcc4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" executionId="57faca47-e622-4e88-9ca1-64b5c7e4fd84" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" executionId="9d64ecee-1af0-4645-8c74-a98f0627d9f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02e294ba-02db-f21e-dc59-8e7c9444841f" executionId="b0b21a89-07e0-4c94-94d6-79a7935974e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42ca667a-a020-f899-567b-164563a5f68c" executionId="aadcd073-04b5-4742-a99e-4818ba7b0d13" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" executionId="4540a50b-d091-4bea-95d4-a9c71eab6508" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" executionId="2c01b892-2cda-462b-b72c-8c80b5076211" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" executionId="88985bc5-0426-4ed5-9fa0-9e5419ea1a23" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" executionId="38bcfd63-710d-470d-a0d2-8c0a9d18aff7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee450aac-5f02-8238-a55d-792600e33298" executionId="d8da338d-c235-4fc8-b80b-156ca129bee5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1680f939-c9a3-3184-e5e6-300d132ea901" executionId="c287fb35-a98a-4f53-a359-9ffe5b4ab3c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" executionId="3cb42791-7224-4985-a971-52cecb22987d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" executionId="aacbecda-baaa-4943-a8ce-c30e5fe2f108" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" executionId="7ae98a68-aa76-4d10-b0d9-5346ceb15f95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60e5b02d-603e-8172-2213-6ea7fd0250af" executionId="842a602c-0a1e-41fa-8021-6336a25cd168" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" executionId="f76648f9-78d1-4328-b940-117be5e7feda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21d875cb-d7ef-e04a-3cc4-907443abf187" executionId="c3d0a975-9707-4ffa-af6a-0b42d9008e17" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63f82b54-f147-1707-8ae8-1f771750a4c8" executionId="305ffe2a-ef5f-4b97-9a60-602a49238898" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cddd27ac-7387-0391-36be-b1b706556ac6" executionId="659086d2-566c-45ef-97e6-4550f030105e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" executionId="86379040-7cfa-4083-a254-a031192084ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="a9270692-cddf-460f-88e9-47757f805049" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" executionId="4016c1f8-005c-4dd1-952c-47181b5ea107" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85374129-b31e-6699-e3e3-35edfbf2f310" executionId="1f59cb62-a3bb-4ded-9a8a-877fdccd61c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be8b1c28-897b-72b1-79de-44eed3d3394f" executionId="6d0b0e3f-9736-46a7-a105-0e904d2229ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" executionId="aaf4c986-7bf7-4c4e-a090-494c6f364e88" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="446be40b-3f39-dc72-f797-9a3aa2aac484" executionId="ceecc1b6-d6f5-438a-bf99-bce41e5f9313" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" executionId="05d8a109-fcf4-4255-a8f3-7bfc90e35d7d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" executionId="8fa266d6-30a9-4d04-87e9-c74e6f8ac2db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" executionId="d6eec59f-bb5b-41d3-8d9d-00d954c12e51" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07a0b332-7585-5132-2931-ba67f585bbfd" executionId="cf21a08e-2280-41bf-92ff-53d9f1192749" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a1c2bbd-f61b-135c-270f-157e7106103a" executionId="96622b35-296a-4304-9fdf-91786a805e95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" executionId="6f0958dc-6ab8-49f3-9054-f7093bd14924" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f798889-8174-9314-5795-cf39887a4d5e" executionId="75bc1a95-200f-4109-b59d-3c9c693f0b97" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="0cf5c465-ce7a-4ada-9802-aec79bcbead7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" executionId="fc5b5b80-229f-4eb7-91c8-01df1b95c9bb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bee75210-e3b0-c570-b8a4-c27baac780a1" executionId="720d5f81-b69a-4293-af22-ead2e3d40436" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" executionId="2e1b2869-4b25-4c6b-91d5-6833ad3626a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" executionId="a7c570a3-ecb7-4bbe-9c45-1b3a98779d16" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" executionId="bb699183-1217-41e4-8c89-546938911dbd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" executionId="06041209-9419-4f8d-8a93-207462ccfa6c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="238d7046-3682-e357-765d-2a21c813602e" executionId="8716503e-de2c-407a-a91c-964963555c2b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" executionId="fdce67d6-2b16-44da-a534-ddfda6b1d158" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02189687-8985-6806-f35e-66f7f45f4e75" executionId="c381fe03-1e59-4ace-a4c4-cd38311c9154" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" executionId="df32d0d7-d8e3-4f5d-aeab-07991e8d4978" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d533b002-ecc8-a6e4-0a55-5406f8886899" executionId="e327f315-c9dd-421b-a5f5-18bb6f7712e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84e090d8-441a-8861-c4e5-70620525fefd" executionId="188cbc4e-e0e9-4ade-97fa-83319c970d7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c824fd41-84e4-6d43-8411-04262c295a77" executionId="23f856ce-c6b8-4489-a7eb-6db647fa69ce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" executionId="6c206fe6-5891-49ef-9fd3-6db62863ec28" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" executionId="052252f5-f218-4816-bf2f-9a88a27f06ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" executionId="d3431a82-f92b-4288-a490-83530688c7e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0992672a-4884-80d0-5142-7d4a75036ed9" executionId="a9376799-c026-48c5-a590-2c4cf0106784" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" executionId="f56fdd5d-5872-4c73-b738-1e4ffa0c9d25" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71353074-59f3-561d-2fde-c864cf9dfcb6" executionId="1f215f0d-42fd-49b4-a9a2-5533367d417d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" executionId="4764334a-2778-46ce-a47e-5bca9e26d79a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f114629c-3c3b-e71d-e1df-1b4312712d85" executionId="8fb54428-67d7-4bef-9557-cf2ba2696e6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="6fe1229e-3db7-49cf-8591-40aef61ec87f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed3513bd-2d36-bad0-70c5-813865e78b06" executionId="bed6b789-4d49-4dee-8a3c-26b7af729d2c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="219f8da3-cc63-e002-72df-e2f549e52967" executionId="93eb79d1-ff85-42a4-a988-06c9a0c00194" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" executionId="563a0cba-d2ef-411d-af2e-174855c5b39c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78605226-9a65-4701-5dbe-74fd1152b767" executionId="cf594b7c-236b-481a-8eea-3bb780890d9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" executionId="3afcc1f0-cc7e-4bea-a426-c90199060b77" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" executionId="c53b9434-1f56-489b-ba23-08e30d72409c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" executionId="4bdf4732-8d8d-4896-8afc-b5a16e9fb597" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17537441-5c46-b29c-7a15-7f733fa6a240" executionId="6030ae7b-28a7-41e1-949a-a228776b53c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8d35157-2900-b4b5-1a17-900588c884a9" executionId="b818efaa-58e6-46dd-9976-65ab55b9bf5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" executionId="f00a5b9e-ddde-4818-97d5-e2a672f74df2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31dac960-539b-5857-5a33-455fe8d5a38f" executionId="e72c2867-b68a-45a4-8c27-c4bad55faa0e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" executionId="7fb2ca08-01f3-4d17-b447-4d70e31c1731" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" executionId="ea3f4fa2-dace-4448-8ea1-768ed9b4a60d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" executionId="fabd4bb1-a756-4687-8525-8685ea170015" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="798a8e71-c3a5-952d-b167-1f516fd90da6" executionId="0c214d8a-9a8b-4796-94a5-37e37ec2f29b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96ff7052-903d-d61a-0cb2-cdee63831172" executionId="c21156f8-2aca-4544-9412-d5b3b95d310e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e071152-ee43-67c0-dc5d-67a966171b99" executionId="22177d02-e133-4f94-a06e-387781a3a639" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" executionId="b30511db-880d-4408-84cb-9d173e0ef71f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" executionId="07112e29-78cf-40ba-a6a0-5a1040bdab07" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50604149-da7b-7eb8-2563-57d2dd368452" executionId="c4d37d59-ebb6-4079-9bb2-fcf08a5cc80d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="5d97afc0-5c4a-404f-9053-e3cd07f84bbc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" executionId="0e2e756a-694b-4f2a-aee9-1f8c15b2adda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" executionId="9ec2aaa5-8258-4094-a7b3-065e3ec0ab95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" executionId="2a604f04-8b71-45f8-9297-4602cd6f5152" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="785e20b7-0681-3d5e-8c02-431a4435768d" executionId="7da49303-6800-4564-913b-8e50292924e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb67481e-37a3-f171-7a64-13ebf12d3989" executionId="1f8bb067-f57b-4448-aecd-4bf7b0926ee3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" executionId="f0518361-314d-4b84-858f-6851d59d9f88" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Completed">
    <Counters total="87" executed="87" passed="87" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>NUnit Adapter 3.17.0.0: Test execution started&#xD;
Running all tests in D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll&#xD;
   NUnit3TestExecutor discovered 87 of 87 NUnit test cases&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)&#xD;
&#xD;
Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.1s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.1s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.1s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
&#xD;
NUnit Adapter 3.17.0.0: Test execution complete&#xD;
</StdOut>
    </Output>
  </ResultSummary>
</TestRun>
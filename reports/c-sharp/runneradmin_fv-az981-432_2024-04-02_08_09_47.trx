<?xml version="1.0" encoding="utf-8"?>
<TestRun id="4f3df8aa-dc4d-4692-aacd-d3f91f0afb3b" name="runneradmin@fv-az981-432 2024-04-02 08:09:47" runUser="fv-az981-432\runneradmin" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2024-04-02T08:09:47.0286617+00:00" queuing="2024-04-02T08:09:47.0286619+00:00" start="2024-04-02T08:09:45.7927462+00:00" finish="2024-04-02T08:09:48.2322022+00:00" />
  <TestSettings name="default" id="a30b9cbb-1aee-4572-8026-d4c3eca18686">
    <Deployment runDeploymentRoot="runneradmin_fv-az981-432_2024-04-02_08_09_47" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="2dd120c4-cbfd-4732-8557-8f80e74db546" testId="78605226-9a65-4701-5dbe-74fd1152b767" testName="GetAUUIDWithCustomMetadataIdStoredInConfig" computerName="fv-az981-432" duration="00:00:00.0150850" startTime="2024-04-02T08:09:47.9352959+00:00" endTime="2024-04-02T08:09:47.9503806+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2dd120c4-cbfd-4732-8557-8f80e74db546">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5d71f67c-4023-48c7-81f2-0a5144a2e6ea" testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0027690" startTime="2024-04-02T08:09:46.9453778+00:00" endTime="2024-04-02T08:09:46.9481467+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d71f67c-4023-48c7-81f2-0a5144a2e6ea">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c33223f8-a58c-4e37-9bd2-4b53979562ad" testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0021450" startTime="2024-04-02T08:09:47.0280842+00:00" endTime="2024-04-02T08:09:47.0302298+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c33223f8-a58c-4e37-9bd2-4b53979562ad">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc9a4175-52bc-4b71-944e-7b48ad820e40" testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" testName="GetMembersForAChannel" computerName="fv-az981-432" duration="00:00:00.0310350" startTime="2024-04-02T08:09:47.5308592+00:00" endTime="2024-04-02T08:09:47.5618943+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc9a4175-52bc-4b71-944e-7b48ad820e40">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd8f7bd0-b912-472d-b7e5-b0cfd83ed62e" testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0027250" startTime="2024-04-02T08:09:47.0252108+00:00" endTime="2024-04-02T08:09:47.0279358+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd8f7bd0-b912-472d-b7e5-b0cfd83ed62e">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="175ae3e3-c47c-4a06-ad4e-5b3889a7475b" testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" testName="GetAllChannelMetadataWithCustom" computerName="fv-az981-432" duration="00:00:00.0165690" startTime="2024-04-02T08:09:47.4709456+00:00" endTime="2024-04-02T08:09:47.4875145+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="175ae3e3-c47c-4a06-ad4e-5b3889a7475b">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d0e6d700-71d9-4b20-82a5-e7e9e1c315da" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0020870" startTime="2024-04-02T08:09:47.0414941+00:00" endTime="2024-04-02T08:09:47.0435807+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0e6d700-71d9-4b20-82a5-e7e9e1c315da">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8497fbc9-5505-4eb7-aefa-62a9c8e7415a" testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" testName="SetMemberForAChannel" computerName="fv-az981-432" duration="00:00:00.0191850" startTime="2024-04-02T08:09:47.6264050+00:00" endTime="2024-04-02T08:09:47.6455899+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8497fbc9-5505-4eb7-aefa-62a9c8e7415a">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76439a8b-26cf-4b50-a6a3-01a6ca8e7585" testId="d533b002-ecc8-a6e4-0a55-5406f8886899" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0020230" startTime="2024-04-02T08:09:47.0229729+00:00" endTime="2024-04-02T08:09:47.0249958+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76439a8b-26cf-4b50-a6a3-01a6ca8e7585">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ed0d8d7d-a936-49c5-9324-60cb6272bb9a" testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0027240" startTime="2024-04-02T08:09:47.0436772+00:00" endTime="2024-04-02T08:09:47.0464015+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ed0d8d7d-a936-49c5-9324-60cb6272bb9a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9dfdb949-0ae7-4820-8e14-d205764ed508" testId="cddd27ac-7387-0391-36be-b1b706556ac6" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0017920" startTime="2024-04-02T08:09:47.0564741+00:00" endTime="2024-04-02T08:09:47.0582663+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9dfdb949-0ae7-4820-8e14-d205764ed508">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="33c6e5f8-7653-4522-8e97-627529b88c1e" testId="02189687-8985-6806-f35e-66f7f45f4e75" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0069000" startTime="2024-04-02T08:09:47.0028229+00:00" endTime="2024-04-02T08:09:47.0097225+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33c6e5f8-7653-4522-8e97-627529b88c1e">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="269379b5-af74-4118-bfcb-f4bd5d2312c8" testId="1680f939-c9a3-3184-e5e6-300d132ea901" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0021220" startTime="2024-04-02T08:09:46.9302366+00:00" endTime="2024-04-02T08:09:46.9323588+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="269379b5-af74-4118-bfcb-f4bd5d2312c8">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fe97de57-b61a-4b62-bde7-0bc17f8ccd29" testId="ed3513bd-2d36-bad0-70c5-813865e78b06" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0040760" startTime="2024-04-02T08:09:46.8669647+00:00" endTime="2024-04-02T08:09:46.8710402+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe97de57-b61a-4b62-bde7-0bc17f8ccd29">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6db654d2-3bea-482e-8fa6-25fc32f8444f" testId="d717777f-cd83-a14f-a06e-85ad7a167630" testName="GetAUUIDMetadataForId" computerName="fv-az981-432" duration="00:00:00.0175710" startTime="2024-04-02T08:09:47.9176865+00:00" endTime="2024-04-02T08:09:47.9352578+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6db654d2-3bea-482e-8fa6-25fc32f8444f">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e64de9ed-2b22-4916-a554-2b8ec21074fe" testId="21d875cb-d7ef-e04a-3cc4-907443abf187" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0018470" startTime="2024-04-02T08:09:47.0521347+00:00" endTime="2024-04-02T08:09:47.0539820+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e64de9ed-2b22-4916-a554-2b8ec21074fe">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="da59828a-3510-4e6d-b5b2-8ccc894dd057" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0019200" startTime="2024-04-02T08:09:47.0583040+00:00" endTime="2024-04-02T08:09:47.0602243+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da59828a-3510-4e6d-b5b2-8ccc894dd057">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="332b73f9-7cf9-449b-99a4-6fa12842d715" testId="84e090d8-441a-8861-c4e5-70620525fefd" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0057190" startTime="2024-04-02T08:09:46.9396451+00:00" endTime="2024-04-02T08:09:46.9453636+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="332b73f9-7cf9-449b-99a4-6fa12842d715">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="243048a4-f0ce-4e1d-addf-60d6971ba67a" testId="60e5b02d-603e-8172-2213-6ea7fd0250af" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0040970" startTime="2024-04-02T08:09:46.8568102+00:00" endTime="2024-04-02T08:09:46.8609071+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="243048a4-f0ce-4e1d-addf-60d6971ba67a">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ccab97f-9c27-4f9f-95ff-2c1b8a42fbf2" testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0021900" startTime="2024-04-02T08:09:46.9323730+00:00" endTime="2024-04-02T08:09:46.9345629+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ccab97f-9c27-4f9f-95ff-2c1b8a42fbf2">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dfa11a3f-2eae-4403-8c24-5294c41c539b" testId="798a8e71-c3a5-952d-b167-1f516fd90da6" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0088020" startTime="2024-04-02T08:09:46.8753400+00:00" endTime="2024-04-02T08:09:46.8841424+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dfa11a3f-2eae-4403-8c24-5294c41c539b">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9b1ccadf-c6f6-4ce3-8218-06f2c4a1a9e3" testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" testName="GetAllChannelMetadata" computerName="fv-az981-432" duration="00:00:00.0214940" startTime="2024-04-02T08:09:47.4493331+00:00" endTime="2024-04-02T08:09:47.4708268+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b1ccadf-c6f6-4ce3-8218-06f2c4a1a9e3">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c75fa69-48f9-4edf-a14a-2a62e4a8543f" testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0028360" startTime="2024-04-02T08:09:47.0098932+00:00" endTime="2024-04-02T08:09:47.0127288+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c75fa69-48f9-4edf-a14a-2a62e4a8543f">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fcb61d6a-c158-4974-a988-1bcd34090b75" testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0029900" startTime="2024-04-02T08:09:46.8639471+00:00" endTime="2024-04-02T08:09:46.8669367+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcb61d6a-c158-4974-a988-1bcd34090b75">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="16af85c8-b70e-4af9-8860-f68243a6ea39" testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" testName="GetMembershipsForCurrentUser" computerName="fv-az981-432" duration="00:00:00.0258490" startTime="2024-04-02T08:09:47.6631897+00:00" endTime="2024-04-02T08:09:47.6890388+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16af85c8-b70e-4af9-8860-f68243a6ea39">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7d74fb8-4fc8-4fbc-8301-0f44a96ec3d1" testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0060650" startTime="2024-04-02T08:09:46.9241558+00:00" endTime="2024-04-02T08:09:46.9302210+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7d74fb8-4fc8-4fbc-8301-0f44a96ec3d1">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e8672e09-4180-4158-baba-bfbdc0501204" testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" testName="ManageMembersForAChannel" computerName="fv-az981-432" duration="00:00:00.0286770" startTime="2024-04-02T08:09:47.5813675+00:00" endTime="2024-04-02T08:09:47.6100448+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8672e09-4180-4158-baba-bfbdc0501204">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cf94a6f2-4ceb-4906-bd4a-176127ec247d" testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0143130" startTime="2024-04-02T08:09:46.9860585+00:00" endTime="2024-04-02T08:09:47.0003720+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf94a6f2-4ceb-4906-bd4a-176127ec247d">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="beed07e8-409b-4ed6-a8eb-cb5aed11b18f" testId="7f798889-8174-9314-5795-cf39887a4d5e" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0662200" startTime="2024-04-02T08:09:46.7887589+00:00" endTime="2024-04-02T08:09:46.8548974+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="beed07e8-409b-4ed6-a8eb-cb5aed11b18f">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="68570c0b-106a-4e1c-9832-87bffb6a5802" testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0020690" startTime="2024-04-02T08:09:47.0005140+00:00" endTime="2024-04-02T08:09:47.0025834+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68570c0b-106a-4e1c-9832-87bffb6a5802">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dae6f822-539a-4a2a-8c22-5ff6c1274591" testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" testName="GetMembershipsForUUIDWithCustomAndChannelCustom" computerName="fv-az981-432" duration="00:00:00.0174829" startTime="2024-04-02T08:09:47.7687475+00:00" endTime="2024-04-02T08:09:47.7862299+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dae6f822-539a-4a2a-8c22-5ff6c1274591">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2dd7eb77-c332-47cb-b8c2-8fd68951446b" testId="17537441-5c46-b29c-7a15-7f733fa6a240" testName="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" computerName="fv-az981-432" duration="00:00:00.0888940" startTime="2024-04-02T08:09:47.0719488+00:00" endTime="2024-04-02T08:09:47.1608433+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2dd7eb77-c332-47cb-b8c2-8fd68951446b">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.1s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="295accf2-5cf8-4187-b292-ca9b3d6a55cb" testId="446be40b-3f39-dc72-f797-9a3aa2aac484" testName="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" computerName="fv-az981-432" duration="00:00:00.0156450" startTime="2024-04-02T08:09:47.1609217+00:00" endTime="2024-04-02T08:09:47.1765666+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="295accf2-5cf8-4187-b292-ca9b3d6a55cb">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d779aaf1-3d76-4047-8095-6b14f041a428" testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" testName="GetMembershipsForUUID" computerName="fv-az981-432" duration="00:00:00.0796210" startTime="2024-04-02T08:09:47.6890797+00:00" endTime="2024-04-02T08:09:47.7687013+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d779aaf1-3d76-4047-8095-6b14f041a428">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.1s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e86ec767-6840-46db-942d-aff98b9cfa87" testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0018950" startTime="2024-04-02T08:09:47.0362010+00:00" endTime="2024-04-02T08:09:47.0380961+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e86ec767-6840-46db-942d-aff98b9cfa87">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a47359bd-33ea-4ca6-b3f0-b70e4802f129" testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0022410" startTime="2024-04-02T08:09:47.0158867+00:00" endTime="2024-04-02T08:09:47.0181272+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a47359bd-33ea-4ca6-b3f0-b70e4802f129">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c7401832-ed78-4ff6-81e4-edc607b62e2d" testId="be8b1c28-897b-72b1-79de-44eed3d3394f" testName="RemoveAChannelMetadataForId" computerName="fv-az981-432" duration="00:00:00.0180420" startTime="2024-04-02T08:09:47.4876338+00:00" endTime="2024-04-02T08:09:47.5056764+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7401832-ed78-4ff6-81e4-edc607b62e2d">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ce98352b-463f-4b24-bfc2-79ed89a29d0c" testId="238d7046-3682-e357-765d-2a21c813602e" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" computerName="fv-az981-432" duration="00:00:00.0121180" startTime="2024-04-02T08:09:47.1766208+00:00" endTime="2024-04-02T08:09:47.1887388+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce98352b-463f-4b24-bfc2-79ed89a29d0c">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f21156de-6122-4e69-8fe5-c8760118847f" testId="0992672a-4884-80d0-5142-7d4a75036ed9" testName="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" computerName="fv-az981-432" duration="00:00:00.0108230" startTime="2024-04-02T08:09:47.1887790+00:00" endTime="2024-04-02T08:09:47.1996017+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f21156de-6122-4e69-8fe5-c8760118847f">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b1d7af8e-7cbd-4e50-b8eb-625b9bd51348" testId="96ff7052-903d-d61a-0cb2-cdee63831172" testName="RemoveMembership" computerName="fv-az981-432" duration="00:00:00.0168180" startTime="2024-04-02T08:09:47.8121067+00:00" endTime="2024-04-02T08:09:47.8289252+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b1d7af8e-7cbd-4e50-b8eb-625b9bd51348">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0747f0f7-0a97-4a9d-bcc9-3f438a1d6a76" testId="219f8da3-cc63-e002-72df-e2f549e52967" testName="GetAllUUIDMetadata" computerName="fv-az981-432" duration="00:00:00.0188490" startTime="2024-04-02T08:09:47.8847296+00:00" endTime="2024-04-02T08:09:47.9035783+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0747f0f7-0a97-4a9d-bcc9-3f438a1d6a76">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e5304c02-0fe9-4e90-8c39-6109afed3619" testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" testName="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" computerName="fv-az981-432" duration="00:00:00.0193230" startTime="2024-04-02T08:09:47.5620038+00:00" endTime="2024-04-02T08:09:47.5813270+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e5304c02-0fe9-4e90-8c39-6109afed3619">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="58144182-b749-4231-8798-14c408dfee1b" testId="f8d35157-2900-b4b5-1a17-900588c884a9" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0020490" startTime="2024-04-02T08:09:46.9615613+00:00" endTime="2024-04-02T08:09:46.9636103+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58144182-b749-4231-8798-14c408dfee1b">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1d4c6c80-2364-4f44-81f2-bc246d5458ae" testId="31dac960-539b-5857-5a33-455fe8d5a38f" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0094460" startTime="2024-04-02T08:09:46.8983730+00:00" endTime="2024-04-02T08:09:46.9078191+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1d4c6c80-2364-4f44-81f2-bc246d5458ae">
      <Output>
        <StdOut>Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95ab91e6-8901-4372-bfc0-b452f32c6bf9" testId="f114629c-3c3b-e71d-e1df-1b4312712d85" testName="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0122550" startTime="2024-04-02T08:09:46.8859682+00:00" endTime="2024-04-02T08:09:46.8982230+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95ab91e6-8901-4372-bfc0-b452f32c6bf9">
      <Output>
        <StdOut>Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c2de4a17-c359-4bd4-af46-df8a6ffe2b53" testId="50604149-da7b-7eb8-2563-57d2dd368452" testName="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0036500" startTime="2024-04-02T08:09:47.0188915+00:00" endTime="2024-04-02T08:09:47.0225420+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2de4a17-c359-4bd4-af46-df8a6ffe2b53">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f988354c-7c00-4c37-bcdc-0ae457d031c7" testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" testName="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0018950" startTime="2024-04-02T08:09:47.0482775+00:00" endTime="2024-04-02T08:09:47.0501723+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f988354c-7c00-4c37-bcdc-0ae457d031c7">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c7c494f2-4ef3-49ea-a013-978c4ab3e8db" testId="ee450aac-5f02-8238-a55d-792600e33298" testName="RevokeATokenWhileItIsDisabledOnAServer" computerName="fv-az981-432" duration="00:00:00.0132390" startTime="2024-04-02T08:09:47.9971966+00:00" endTime="2024-04-02T08:09:48.0104354+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7c494f2-4ef3-49ea-a013-978c4ab3e8db">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a9712cc9-1b5b-4d08-a4c2-f48c596c5eb6" testId="71353074-59f3-561d-2fde-c864cf9dfcb6" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0113100" startTime="2024-04-02T08:09:46.9502363+00:00" endTime="2024-04-02T08:09:46.9615457+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a9712cc9-1b5b-4d08-a4c2-f48c596c5eb6">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e2e7fa9-3aef-48be-8466-7379c9eb96fd" testId="07a0b332-7585-5132-2931-ba67f585bbfd" testName="RemoveAUUIDMetadataForId" computerName="fv-az981-432" duration="00:00:00.0150850" startTime="2024-04-02T08:09:47.9504123+00:00" endTime="2024-04-02T08:09:47.9654968+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e2e7fa9-3aef-48be-8466-7379c9eb96fd">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7bf67d1-e47e-4067-aee4-6c315d84edf2" testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" testName="ManageMembershipsForAUUID" computerName="fv-az981-432" duration="00:00:00.0257650" startTime="2024-04-02T08:09:47.7862851+00:00" endTime="2024-04-02T08:09:47.8120505+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7bf67d1-e47e-4067-aee4-6c315d84edf2">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c4e84b99-713c-4229-8d2d-9c646d3604c2" testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" testName="RemoveMemberForAChannel" computerName="fv-az981-432" duration="00:00:00.0162789" startTime="2024-04-02T08:09:47.6100900+00:00" endTime="2024-04-02T08:09:47.6263691+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4e84b99-713c-4229-8d2d-9c646d3604c2">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="150e0b82-5645-4a9c-9503-314b55e672b6" testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" testName="SetMembershipForCurrentUser" computerName="fv-az981-432" duration="00:00:00.0185510" startTime="2024-04-02T08:09:47.8649581+00:00" endTime="2024-04-02T08:09:47.8835089+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="150e0b82-5645-4a9c-9503-314b55e672b6">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1594164f-defb-4e2a-8472-9c357804eff2" testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" testName="SetMemberWithCustomForAChannelAndUUIDWithCustom" computerName="fv-az981-432" duration="00:00:00.0163620" startTime="2024-04-02T08:09:47.6456989+00:00" endTime="2024-04-02T08:09:47.6620607+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1594164f-defb-4e2a-8472-9c357804eff2">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8da2483c-4fd1-4229-bf88-ed7ad357694f" testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0050540" startTime="2024-04-02T08:09:46.9345772+00:00" endTime="2024-04-02T08:09:46.9396310+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8da2483c-4fd1-4229-bf88-ed7ad357694f">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="84d080f3-4d88-4d27-9510-4a0a3424fa30" testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0018860" startTime="2024-04-02T08:09:47.0502109+00:00" endTime="2024-04-02T08:09:47.0520972+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="84d080f3-4d88-4d27-9510-4a0a3424fa30">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="729af978-2cd9-40b0-abba-f8a34ab49c05" testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" testName="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0021280" startTime="2024-04-02T08:09:47.0305799+00:00" endTime="2024-04-02T08:09:47.0327080+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="729af978-2cd9-40b0-abba-f8a34ab49c05">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d86ce06-ab30-4285-b50c-b90f780084c9" testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0025370" startTime="2024-04-02T08:09:46.9833234+00:00" endTime="2024-04-02T08:09:46.9858601+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d86ce06-ab30-4285-b50c-b90f780084c9">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c8eaf39c-baed-4ccd-a74f-cf103f2790fa" testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" testName="RemoveMembershipForCurrentUser" computerName="fv-az981-432" duration="00:00:00.0140340" startTime="2024-04-02T08:09:47.8289815+00:00" endTime="2024-04-02T08:09:47.8430152+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8eaf39c-baed-4ccd-a74f-cf103f2790fa">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a5ced3b6-ffc6-45ef-8347-b50aca20cbcf" testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0161229" startTime="2024-04-02T08:09:46.9080140+00:00" endTime="2024-04-02T08:09:46.9241367+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5ced3b6-ffc6-45ef-8347-b50aca20cbcf">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="30e42937-4e6d-4a32-873a-3f1f649ff3ba" testId="bee75210-e3b0-c570-b8a4-c27baac780a1" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0081960" startTime="2024-04-02T08:09:46.9636818+00:00" endTime="2024-04-02T08:09:46.9718774+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30e42937-4e6d-4a32-873a-3f1f649ff3ba">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="caa6964d-3839-4633-b31e-3912ce898f0d" testId="fb67481e-37a3-f171-7a64-13ebf12d3989" testName="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0020610" startTime="2024-04-02T08:09:46.9481610+00:00" endTime="2024-04-02T08:09:46.9502222+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="caa6964d-3839-4633-b31e-3912ce898f0d">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="63213fc1-3a62-468f-bfc2-9cde7dfb21da" testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" testName="SetAChannelMetadata" computerName="fv-az981-432" duration="00:00:00.0234530" startTime="2024-04-02T08:09:47.5059548+00:00" endTime="2024-04-02T08:09:47.5294078+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="63213fc1-3a62-468f-bfc2-9cde7dfb21da">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="768a1138-24d0-4768-b518-6387fe2cfffb" testId="5e071152-ee43-67c0-dc5d-67a966171b99" testName="GrantAnAccessTokenWithoutAnAuthorizedUuid" computerName="fv-az981-432" duration="00:00:00.0163490" startTime="2024-04-02T08:09:47.3716663+00:00" endTime="2024-04-02T08:09:47.3880150+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="768a1138-24d0-4768-b518-6387fe2cfffb">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fa492486-b833-4bc9-a3bd-95e782582c3d" testId="63f82b54-f147-1707-8ae8-1f771750a4c8" testName="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" computerName="fv-az981-432" duration="00:00:00.1011190" startTime="2024-04-02T08:09:47.1997280+00:00" endTime="2024-04-02T08:09:47.3008478+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fa492486-b833-4bc9-a3bd-95e782582c3d">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.1s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a670bfd2-4c67-4c7e-a85e-bdf1db2259b1" testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" testName="GetAllUUIDMetadataWithCustom" computerName="fv-az981-432" duration="00:00:00.0140380" startTime="2024-04-02T08:09:47.9036179+00:00" endTime="2024-04-02T08:09:47.9176556+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a670bfd2-4c67-4c7e-a85e-bdf1db2259b1">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8caaa5c2-34b2-46c3-a10c-029ccdf4236a" testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" testName="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0017750" startTime="2024-04-02T08:09:47.0464512+00:00" endTime="2024-04-02T08:09:47.0482261+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8caaa5c2-34b2-46c3-a10c-029ccdf4236a">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="af46dd4d-734f-4502-ba6e-2a8d54f1b68b" testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0083660" startTime="2024-04-02T08:09:46.9747779+00:00" endTime="2024-04-02T08:09:46.9831435+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af46dd4d-734f-4502-ba6e-2a8d54f1b68b">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="33bcafdd-562e-4ca1-8675-8f91f9777534" testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" testName="RemoveAUUIDMetadataIdStoredInConfig" computerName="fv-az981-432" duration="00:00:00.0133890" startTime="2024-04-02T08:09:47.9655283+00:00" endTime="2024-04-02T08:09:47.9789169+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33bcafdd-562e-4ca1-8675-8f91f9777534">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9f093c5c-cd20-4f25-a2f0-b6cec12fa17b" testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" testName="GetAChannelMetadataForId" computerName="fv-az981-432" duration="00:00:00.0440800" startTime="2024-04-02T08:09:47.3898669+00:00" endTime="2024-04-02T08:09:47.4339473+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f093c5c-cd20-4f25-a2f0-b6cec12fa17b">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="935b54c9-f222-4e37-8530-42394eb95495" testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0044500" startTime="2024-04-02T08:09:47.0623739+00:00" endTime="2024-04-02T08:09:47.0668235+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="935b54c9-f222-4e37-8530-42394eb95495">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6038540e-5ee2-4786-997a-21dd979f9a55" testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" testName="RevokeExistingValidToken" computerName="fv-az981-432" duration="00:00:00.0078810" startTime="2024-04-02T08:09:48.0198147+00:00" endTime="2024-04-02T08:09:48.0276954+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6038540e-5ee2-4786-997a-21dd979f9a55">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="16f4e43e-cd45-43fe-a321-52e034fe4bcb" testId="02e294ba-02db-f21e-dc59-8e7c9444841f" testName="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0031520" startTime="2024-04-02T08:09:47.0328931+00:00" endTime="2024-04-02T08:09:47.0360450+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16f4e43e-cd45-43fe-a321-52e034fe4bcb">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="13bd5e81-4a28-46c3-83a3-cdd7b632c248" testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" testName="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0023820" startTime="2024-04-02T08:09:47.0540562+00:00" endTime="2024-04-02T08:09:47.0564378+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="13bd5e81-4a28-46c3-83a3-cdd7b632c248">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="da48341f-c553-4f7e-b4db-45ff451ab827" testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0030060" startTime="2024-04-02T08:09:46.8609281+00:00" endTime="2024-04-02T08:09:46.8639335+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da48341f-c553-4f7e-b4db-45ff451ab827">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1e98aac8-adc7-45b8-8506-7baefc704b6b" testId="85374129-b31e-6699-e3e3-35edfbf2f310" testName="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" computerName="fv-az981-432" duration="00:00:00.0706550" startTime="2024-04-02T08:09:47.3008964+00:00" endTime="2024-04-02T08:09:47.3715519+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e98aac8-adc7-45b8-8506-7baefc704b6b">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8364aad8-ce64-40fd-8bce-65ad3b8e0ea1" testId="c824fd41-84e4-6d43-8411-04262c295a77" testName="SetMembership" computerName="fv-az981-432" duration="00:00:00.0216070" startTime="2024-04-02T08:09:47.8432827+00:00" endTime="2024-04-02T08:09:47.8648898+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8364aad8-ce64-40fd-8bce-65ad3b8e0ea1">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="408475b0-90a4-41e6-919b-2830288de7e7" testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" testName="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0031980" startTime="2024-04-02T08:09:47.0382447+00:00" endTime="2024-04-02T08:09:47.0414428+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="408475b0-90a4-41e6-919b-2830288de7e7">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="77021a5f-ef4b-4ac4-b652-be7e21bb7abe" testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" testName="SetAUUIDMetadata" computerName="fv-az981-432" duration="00:00:00.0172420" startTime="2024-04-02T08:09:47.9789477+00:00" endTime="2024-04-02T08:09:47.9961897+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="77021a5f-ef4b-4ac4-b652-be7e21bb7abe">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fead99c1-d549-4025-8209-a211995a9f7c" testId="785e20b7-0681-3d5e-8c02-431a4435768d" testName="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0026820" startTime="2024-04-02T08:09:46.9719111+00:00" endTime="2024-04-02T08:09:46.9745926+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fead99c1-d549-4025-8209-a211995a9f7c">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8f0ab03c-97a3-4109-9209-55cd69c88a6e" testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" testName="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0022460" startTime="2024-04-02T08:09:47.0668572+00:00" endTime="2024-04-02T08:09:47.0691032+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f0ab03c-97a3-4109-9209-55cd69c88a6e">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d1030a3-86e8-4611-b721-b882a76cd011" testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" testName="RevokeInvalidToken" computerName="fv-az981-432" duration="00:00:00.0098130" startTime="2024-04-02T08:09:48.0277249+00:00" endTime="2024-04-02T08:09:48.0375374+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d1030a3-86e8-4611-b721-b882a76cd011">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4a059014-161b-4ee3-987d-fb6204c5036b" testId="8a1c2bbd-f61b-135c-270f-157e7106103a" testName="GetAChannelWithCustomMetadata" computerName="fv-az981-432" duration="00:00:00.0151640" startTime="2024-04-02T08:09:47.4340425+00:00" endTime="2024-04-02T08:09:47.4492066+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a059014-161b-4ee3-987d-fb6204c5036b">
      <Output>
        <StdOut>Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6e08be37-ec93-4c09-b9ca-0987c5dfa46b" testId="984e3d49-4d22-c80b-52c3-19191f62fda7" testName="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0017920" startTime="2024-04-02T08:09:47.0603789+00:00" endTime="2024-04-02T08:09:47.0621711+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e08be37-ec93-4c09-b9ca-0987c5dfa46b">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c7efe81c-7254-425b-a04d-a04b16447fd2" testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" testName="RevokeATokenWithCharactersThatRequireUrlEncoding" computerName="fv-az981-432" duration="00:00:00.0092970" startTime="2024-04-02T08:09:48.0104653+00:00" endTime="2024-04-02T08:09:48.0197619+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7efe81c-7254-425b-a04d-a04b16447fd2">
      <Output>
        <StdOut>Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fcb057f1-9148-4baa-8aba-b9739ec5ea91" testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" testName="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0024660" startTime="2024-04-02T08:09:47.0132427+00:00" endTime="2024-04-02T08:09:47.0157088+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcb057f1-9148-4baa-8aba-b9739ec5ea91">
      <Output>
        <StdOut>Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="672bea56-1798-478d-ae83-99af2d29814f" testId="42ca667a-a020-f899-567b-164563a5f68c" testName="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" computerName="fv-az981-432" duration="00:00:00.0037800" startTime="2024-04-02T08:09:46.8713722+00:00" endTime="2024-04-02T08:09:46.8751520+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="672bea56-1798-478d-ae83-99af2d29814f">
      <Output>
        <StdOut>Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="785e20b7-0681-3d5e-8c02-431a4435768d">
      <Execution id="fead99c1-d549-4025-8209-a211995a9f7c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d9c0b4d-df8d-d917-f4fe-624101bd0d52">
      <Execution id="bd8f7bd0-b912-472d-b7e5-b0cfd83ed62e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="2c1e01dd-81d9-12dc-ec1f-005830932e89">
      <Execution id="408475b0-90a4-41e6-919b-2830288de7e7" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="13df4a31-1d93-7796-89f0-9bafbf62cf1d">
      <Execution id="5d71f67c-4023-48c7-81f2-0a5144a2e6ea" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="31dac960-539b-5857-5a33-455fe8d5a38f">
      <Execution id="1d4c6c80-2364-4f44-81f2-bc246d5458ae" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;acrh&quot;,&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="798a8e71-c3a5-952d-b167-1f516fd90da6">
      <Execution id="dfa11a3f-2eae-4403-8c24-5294c41c539b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;success&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bee75210-e3b0-c570-b8a4-c27baac780a1">
      <Execution id="30e42937-4e6d-4a32-873a-3f1f649ff3ba" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeInvalidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f6a7a690-af73-fab8-0ebf-059ccdbb5495">
      <Execution id="3d1030a3-86e8-4611-b721-b882a76cd011" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeInvalidToken" />
    </UnitTest>
    <UnitTest name="SetMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="c824fd41-84e4-6d43-8411-04262c295a77">
      <Execution id="8364aad8-ce64-40fd-8bce-65ad3b8e0ea1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembership" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="17537441-5c46-b29c-7a15-7f733fa6a240">
      <Execution id="2dd7eb77-c332-47cb-b8c2-8fd68951446b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0153fbb0-e5a5-84d4-df77-b92e47c48a9b">
      <Execution id="68570c0b-106a-4e1c-9832-87bffb6a5802" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1500c2f1-f56e-3f8a-4b9e-769b5f983879">
      <Execution id="7ccab97f-9c27-4f9f-95ff-2c1b8a42fbf2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="be8b1c28-897b-72b1-79de-44eed3d3394f">
      <Execution id="c7401832-ed78-4ff6-81e4-edc607b62e2d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="RemoveAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02189687-8985-6806-f35e-66f7f45f4e75">
      <Execution id="33c6e5f8-7653-4522-8e97-627529b88c1e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeATokenWhileItIsDisabledOnAServer" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ee450aac-5f02-8238-a55d-792600e33298">
      <Execution id="c7c494f2-4ef3-49ea-a013-978c4ab3e8db" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWhileItIsDisabledOnAServer" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="60e5b02d-603e-8172-2213-6ea7fd0250af">
      <Execution id="243048a4-f0ce-4e1d-addf-60d6971ba67a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-no-version.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="50604149-da7b-7eb8-2563-57d2dd368452">
      <Execution id="c2de4a17-c359-4bd4-af46-df8a6ffe2b53" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5ef88e91-8d77-e81e-f266-0337c81fc15e">
      <Execution id="13bd5e81-4a28-46c3-83a3-cdd7b632c248" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="cddd27ac-7387-0391-36be-b1b706556ac6">
      <Execution id="9dfdb949-0ae7-4820-8e14-d205764ed508" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d5ad5871-c66b-34c9-1371-544f7c37d8f6">
      <Execution id="8caaa5c2-34b2-46c3-a10c-029ccdf4236a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="ManageMembershipsForAUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="aea0c1c8-e4f2-b00c-e2e5-3958a9100776">
      <Execution id="f7bf67d1-e47e-4067-aee4-6c315d84edf2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="ManageMembershipsForAUUID" />
    </UnitTest>
    <UnitTest name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f114629c-3c3b-e71d-e1df-1b4312712d85">
      <Execution id="95ab91e6-8901-4372-bfc0-b452f32c6bf9" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(&quot;legacy&quot;,&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d533b002-ecc8-a6e4-0a55-5406f8886899">
      <Execution id="76439a8b-26cf-4b50-a6a3-01a6ca8e7585" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RevokeExistingValidToken" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9e948d14-1697-7020-7d46-e7d0ab1a839a">
      <Execution id="6038540e-5ee2-4786-997a-21dd979f9a55" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeExistingValidToken" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9">
      <Execution id="e86ec767-6840-46db-942d-aff98b9cfa87" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUID" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="10a87c1f-7e7a-0e53-402e-aefcc00a21da">
      <Execution id="d779aaf1-3d76-4047-8095-6b14f041a428" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUID" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb">
      <Execution id="fcb057f1-9148-4baa-8aba-b9739ec5ea91" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetAUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5a108f95-d949-be1c-ba70-794e5a89cb2c">
      <Execution id="77021a5f-ef4b-4ac4-b652-be7e21bb7abe" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="SetAUUIDMetadata" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="07a0b332-7585-5132-2931-ba67f585bbfd">
      <Execution id="8e2e7fa9-3aef-48be-8466-7379c9eb96fd" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="63f82b54-f147-1707-8ae8-1f771750a4c8">
      <Execution id="fa492486-b833-4bc9-a3bd-95e782582c3d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="RevokeATokenWithCharactersThatRequireUrlEncoding" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b811bc2b-ac6c-1eab-5504-b3af1ec9a805">
      <Execution id="c7efe81c-7254-425b-a04d-a04b16447fd2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.RevokeAnAccessTokenFeature" name="RevokeATokenWithCharactersThatRequireUrlEncoding" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="238d7046-3682-e357-765d-2a21c813602e">
      <Execution id="ce98352b-463f-4b24-bfc2-79ed89a29d0c" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="SetMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c">
      <Execution id="150e0b82-5645-4a9c-9503-314b55e672b6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="SetMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="68a689f7-c4a6-51dd-490d-8e5b965feb8a">
      <Execution id="cf94a6f2-4ceb-4906-bd4a-176127ec247d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19276ea0-e69e-d8c1-5f86-fbe82fc4defb">
      <Execution id="da48341f-c553-4f7e-b4db-45ff451ab827" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-unknown-acrh.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembershipsForUUIDWithCustomAndChannelCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7acf7525-aaca-a5f2-7032-491d9caf1cf8">
      <Execution id="dae6f822-539a-4a2a-8c22-5ff6c1274591" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForUUIDWithCustomAndChannelCustom" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed3513bd-2d36-bad0-70c5-813865e78b06">
      <Execution id="fe97de57-b61a-4b62-bde7-0bc17f8ccd29" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-unknown.txt&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="b2c9c319-05d3-858f-ecdb-c785279a33e5">
      <Execution id="c4e84b99-713c-4229-8d2d-9c646d3604c2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="RemoveMemberForAChannel" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d871c596-d51c-32a3-d78a-f9b6ed7868a8">
      <Execution id="fcb61d6a-c158-4974-a988-1bcd34090b75" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-cryptor-v1-short.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="23b61850-f73c-f5eb-17ca-9aaba5f44c54">
      <Execution id="a670bfd2-4c67-4c7e-a85e-bdf1db2259b1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="040fb33d-7655-40ce-1cff-6bcf94c5cc47">
      <Execution id="a5ced3b6-ffc6-45ef-8347-b50aca20cbcf" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="f8d35157-2900-b4b5-1a17-900588c884a9">
      <Execution id="58144182-b749-4231-8798-14c408dfee1b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="446be40b-3f39-dc72-f797-9a3aa2aac484">
      <Execution id="295accf2-5cf8-4187-b292-ca9b3d6a55cb" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="984e3d49-4d22-c80b-52c3-19191f62fda7">
      <Execution id="da59828a-3510-4e6d-b5b2-8ccc894dd057" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataEncryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4dab3f58-f834-dddd-fa3d-a0f55f715d14">
      <Execution id="84d080f3-4d88-4d27-9510-4a0a3424fa30" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="85374129-b31e-6699-e3e3-35edfbf2f310">
      <Execution id="1e98aac8-adc7-45b8-8506-7baefc704b6b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="GetAllUUIDMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="219f8da3-cc63-e002-72df-e2f549e52967">
      <Execution id="0747f0f7-0a97-4a9d-bcc9-3f438a1d6a76" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAllUUIDMetadata" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc7a74bf-9a5b-2257-fa8b-50752bdbf702">
      <Execution id="8da2483c-4fd1-4229-bf88-ed7ad357694f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="fb67481e-37a3-f171-7a64-13ebf12d3989">
      <Execution id="caa6964d-3839-4633-b31e-3912ce898f0d" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="02e294ba-02db-f21e-dc59-8e7c9444841f">
      <Execution id="16f4e43e-cd45-43fe-a321-52e034fe4bcb" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataEncryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMembership" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="96ff7052-903d-d61a-0cb2-cdee63831172">
      <Execution id="b1d7af8e-7cbd-4e50-b8eb-625b9bd51348" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembership" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="71353074-59f3-561d-2fde-c864cf9dfcb6">
      <Execution id="a9712cc9-1b5b-4d08-a4c2-f48c596c5eb6" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;file-cryptor-v1-acrh.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555">
      <Execution id="ed0d8d7d-a936-49c5-9324-60cb6272bb9a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0f851786-a6db-a75b-11ec-b9549b68d0b8">
      <Execution id="c33223f8-a58c-4e37-9bd2-4b53979562ad" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;empty-file-cryptor-legacy-riv.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAChannelMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4401ff2d-c38b-51a8-f6b5-791f859c7098">
      <Execution id="9f093c5c-cd20-4f25-a2f0-b6cec12fa17b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelMetadataForId" />
    </UnitTest>
    <UnitTest name="GetMembershipsForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ba48247e-b680-05e2-ec8e-cd712552a6ee">
      <Execution id="16af85c8-b70e-4af9-8860-f68243a6ea39" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="GetMembershipsForCurrentUser" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="84e090d8-441a-8861-c4e5-70620525fefd">
      <Execution id="332b73f9-7cf9-449b-99a4-6fa12842d715" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa">
      <Execution id="9c75fa69-48f9-4edf-a14a-2a62e4a8543f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GrantAnAccessTokenWithoutAnAuthorizedUuid" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5e071152-ee43-67c0-dc5d-67a966171b99">
      <Execution id="768a1138-24d0-4768-b518-6387fe2cfffb" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="GrantAnAccessTokenWithoutAnAuthorizedUuid" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="42ca667a-a020-f899-567b-164563a5f68c">
      <Execution id="672bea56-1798-478d-ae83-99af2d29814f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,&quot;decryption error&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetMemberWithCustomForAChannelAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="86189ae4-95f9-30e4-f4c6-bfa1b9898a62">
      <Execution id="1594164f-defb-4e2a-8472-9c357804eff2" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberWithCustomForAChannelAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="GetAUUIDWithCustomMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="78605226-9a65-4701-5dbe-74fd1152b767">
      <Execution id="2dd120c4-cbfd-4732-8557-8f80e74db546" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDWithCustomMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9d2b950d-d4be-de51-1cfb-07073f6d6e13">
      <Execution id="6d86ce06-ab30-4285-b50c-b90f780084c9" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="RemoveMembershipForCurrentUser" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="046e940e-ed7b-e2be-b9c9-fa82caaefa8a">
      <Execution id="c8eaf39c-baed-4ccd-a74f-cf103f2790fa" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembershipsFeature" name="RemoveMembershipForCurrentUser" />
    </UnitTest>
    <UnitTest name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="6af2fe2f-9fc6-6af1-e346-da11b3a31319">
      <Execution id="729af978-2cd9-40b0-abba-f8a34ab49c05" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="19c50b46-2552-1ee8-9a15-6db5bb83fc13">
      <Execution id="f988354c-7c00-4c37-bcdc-0ae457d031c7" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="ManageMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4abae91a-e1c2-11c6-c78e-4c0a98abeb41">
      <Execution id="e8672e09-4180-4158-baba-bfbdc0501204" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="ManageMembersForAChannel" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b">
      <Execution id="f7d74fb8-4fc8-4fbc-8301-0f44a96ec3d1" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-cryptor-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0c1a37b6-b16e-3d65-7b38-756d59a051b1">
      <Execution id="9b1ccadf-c6f6-4ce3-8218-06f2c4a1a9e3" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadata" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="bf64e30a-5c5e-95e0-c813-0cfcc293de1e">
      <Execution id="935b54c9-f222-4e37-8530-42394eb95495" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetAllChannelMetadataWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="5271a851-e8d2-c42c-aad6-49024c68a9d5">
      <Execution id="175ae3e3-c47c-4a06-ad4e-5b3889a7475b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAllChannelMetadataWithCustom" />
    </UnitTest>
    <UnitTest name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="0992672a-4884-80d0-5142-7d4a75036ed9">
      <Execution id="f21156de-6122-4e69-8fe5-c8760118847f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.GrantAnAccessTokenFeature" name="AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError" />
    </UnitTest>
    <UnitTest name="GetAUUIDMetadataForId" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="d717777f-cd83-a14f-a06e-85ad7a167630">
      <Execution id="6db654d2-3bea-482e-8fa6-25fc32f8444f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="GetAUUIDMetadataForId" />
    </UnitTest>
    <UnitTest name="GetMembersForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3405a88a-853b-5aa4-dc52-211f74db4a9b">
      <Execution id="bc9a4175-52bc-4b71-944e-7b48ad820e40" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForAChannel" />
    </UnitTest>
    <UnitTest name="GetAChannelWithCustomMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="8a1c2bbd-f61b-135c-270f-157e7106103a">
      <Execution id="4a059014-161b-4ee3-987d-fb6204c5036b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="GetAChannelWithCustomMetadata" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="1680f939-c9a3-3184-e5e6-300d132ea901">
      <Execution id="269379b5-af74-4118-bfcb-f4bd5d2312c8" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsBinary(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file-cryptor-legacy-civ.txt&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="70fed881-ff3d-cf01-fc50-eec23bec4b15">
      <Execution id="e5304c02-0fe9-4e90-8c39-6109afed3619" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="GetMembersForVipChatChannelWithCustomAndUUIDWithCustom" />
    </UnitTest>
    <UnitTest name="RemoveAUUIDMetadataIdStoredInConfig" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3a8dac54-e42a-8256-0f95-9b2771dcaeda">
      <Execution id="33bcafdd-562e-4ca1-8675-8f91f9777534" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2UUIDMetadataFeature" name="RemoveAUUIDMetadataIdStoredInConfig" />
    </UnitTest>
    <UnitTest name="SetAChannelMetadata" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="947b833a-a96c-d64f-e9e3-0beaa935d4d5">
      <Execution id="63213fc1-3a62-468f-bfc2-9cde7dfb21da" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2ChannelMetadataFeature" name="SetAChannelMetadata" />
    </UnitTest>
    <UnitTest name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81">
      <Execution id="a47359bd-33ea-4ca6-b3f0-b70e4802f129" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;constant&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="7f798889-8174-9314-5795-cf39887a4d5e">
      <Execution id="beed07e8-409b-4ed6-a8eb-cb5aed11b18f" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="AES_CBCCryptorDataHeaderCanBeProcessed(&quot;pubnubenigma&quot;,&quot;file-legacy-civ.jpg&quot;,&quot;unknown cryptor error&quot;,null)" />
    </UnitTest>
    <UnitTest name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="3b96f760-7a4a-da94-3ca5-8f27e0604482">
      <Execution id="af46dd4d-734f-4502-ba6e-2a8d54f1b68b" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="CryptorIsAbleToProcessSampleFilesAsStream(&quot;legacy&quot;,&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file-legacy-riv.jpg&quot;,&quot;file.jpg&quot;,null)" />
    </UnitTest>
    <UnitTest name="SetMemberForAChannel" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ed5af684-441e-e3d8-3bf2-a26f2fd3f117">
      <Execution id="8497fbc9-5505-4eb7-aefa-62a9c8e7415a" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.ObjectsV2MembersFeature" name="SetMemberForAChannel" />
    </UnitTest>
    <UnitTest name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="ea054fa2-926d-1779-cc57-db94ba1a4d6a">
      <Execution id="8f0ab03c-97a3-4109-9209-55cd69c88a6e" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(&quot;pubnubenigma&quot;,&quot;random&quot;,&quot;file.txt&quot;,null)" />
    </UnitTest>
    <UnitTest name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" storage="d:\a\c-sharp\c-sharp\src\unittests\acceptancetests\bin\debug\net6.0\acceptancetests.dll" id="21d875cb-d7ef-e04a-3cc4-907443abf187">
      <Execution id="e64de9ed-2b22-4916-a554-2b8ec21074fe" />
      <TestMethod codeBase="D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll" adapterTypeName="executor://nunit3testexecutor/" className="AcceptanceTests.Features.Encryption.CryptoModuleFeature" name="EmptyStreamDataDecryptionShouldFail(&quot;acrh&quot;,&quot;pubnubenigma&quot;,&quot;-&quot;,&quot;empty-file-cryptor-v1-acrh.txt&quot;,null)" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="78605226-9a65-4701-5dbe-74fd1152b767" executionId="2dd120c4-cbfd-4732-8557-8f80e74db546" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13df4a31-1d93-7796-89f0-9bafbf62cf1d" executionId="5d71f67c-4023-48c7-81f2-0a5144a2e6ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f851786-a6db-a75b-11ec-b9549b68d0b8" executionId="c33223f8-a58c-4e37-9bd2-4b53979562ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3405a88a-853b-5aa4-dc52-211f74db4a9b" executionId="bc9a4175-52bc-4b71-944e-7b48ad820e40" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d9c0b4d-df8d-d917-f4fe-624101bd0d52" executionId="bd8f7bd0-b912-472d-b7e5-b0cfd83ed62e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5271a851-e8d2-c42c-aad6-49024c68a9d5" executionId="175ae3e3-c47c-4a06-ad4e-5b3889a7475b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="d0e6d700-71d9-4b20-82a5-e7e9e1c315da" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed5af684-441e-e3d8-3bf2-a26f2fd3f117" executionId="8497fbc9-5505-4eb7-aefa-62a9c8e7415a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d533b002-ecc8-a6e4-0a55-5406f8886899" executionId="76439a8b-26cf-4b50-a6a3-01a6ca8e7585" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc8c5e9c-4b5f-8534-047c-bc0ab7c6f555" executionId="ed0d8d7d-a936-49c5-9324-60cb6272bb9a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cddd27ac-7387-0391-36be-b1b706556ac6" executionId="9dfdb949-0ae7-4820-8e14-d205764ed508" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02189687-8985-6806-f35e-66f7f45f4e75" executionId="33c6e5f8-7653-4522-8e97-627529b88c1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1680f939-c9a3-3184-e5e6-300d132ea901" executionId="269379b5-af74-4118-bfcb-f4bd5d2312c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed3513bd-2d36-bad0-70c5-813865e78b06" executionId="fe97de57-b61a-4b62-bde7-0bc17f8ccd29" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d717777f-cd83-a14f-a06e-85ad7a167630" executionId="6db654d2-3bea-482e-8fa6-25fc32f8444f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21d875cb-d7ef-e04a-3cc4-907443abf187" executionId="e64de9ed-2b22-4916-a554-2b8ec21074fe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="da59828a-3510-4e6d-b5b2-8ccc894dd057" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84e090d8-441a-8861-c4e5-70620525fefd" executionId="332b73f9-7cf9-449b-99a4-6fa12842d715" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60e5b02d-603e-8172-2213-6ea7fd0250af" executionId="243048a4-f0ce-4e1d-addf-60d6971ba67a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1500c2f1-f56e-3f8a-4b9e-769b5f983879" executionId="7ccab97f-9c27-4f9f-95ff-2c1b8a42fbf2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="798a8e71-c3a5-952d-b167-1f516fd90da6" executionId="dfa11a3f-2eae-4403-8c24-5294c41c539b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c1a37b6-b16e-3d65-7b38-756d59a051b1" executionId="9b1ccadf-c6f6-4ce3-8218-06f2c4a1a9e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e310fc10-3907-7ad0-6cbe-cc9e48d5e1fa" executionId="9c75fa69-48f9-4edf-a14a-2a62e4a8543f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d871c596-d51c-32a3-d78a-f9b6ed7868a8" executionId="fcb61d6a-c158-4974-a988-1bcd34090b75" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba48247e-b680-05e2-ec8e-cd712552a6ee" executionId="16af85c8-b70e-4af9-8860-f68243a6ea39" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4105838b-ea26-8a2c-f1e6-5dcc3df6f41b" executionId="f7d74fb8-4fc8-4fbc-8301-0f44a96ec3d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4abae91a-e1c2-11c6-c78e-4c0a98abeb41" executionId="e8672e09-4180-4158-baba-bfbdc0501204" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68a689f7-c4a6-51dd-490d-8e5b965feb8a" executionId="cf94a6f2-4ceb-4906-bd4a-176127ec247d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f798889-8174-9314-5795-cf39887a4d5e" executionId="beed07e8-409b-4ed6-a8eb-cb5aed11b18f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0153fbb0-e5a5-84d4-df77-b92e47c48a9b" executionId="68570c0b-106a-4e1c-9832-87bffb6a5802" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7acf7525-aaca-a5f2-7032-491d9caf1cf8" executionId="dae6f822-539a-4a2a-8c22-5ff6c1274591" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17537441-5c46-b29c-7a15-7f733fa6a240" executionId="2dd7eb77-c332-47cb-b8c2-8fd68951446b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="446be40b-3f39-dc72-f797-9a3aa2aac484" executionId="295accf2-5cf8-4187-b292-ca9b3d6a55cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10a87c1f-7e7a-0e53-402e-aefcc00a21da" executionId="d779aaf1-3d76-4047-8095-6b14f041a428" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e592298e-a7bd-5e8f-cbb1-f5ba33b2dce9" executionId="e86ec767-6840-46db-942d-aff98b9cfa87" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ac60b24-db33-73cf-3bc9-bbcf0b66ab81" executionId="a47359bd-33ea-4ca6-b3f0-b70e4802f129" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be8b1c28-897b-72b1-79de-44eed3d3394f" executionId="c7401832-ed78-4ff6-81e4-edc607b62e2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="238d7046-3682-e357-765d-2a21c813602e" executionId="ce98352b-463f-4b24-bfc2-79ed89a29d0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0992672a-4884-80d0-5142-7d4a75036ed9" executionId="f21156de-6122-4e69-8fe5-c8760118847f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96ff7052-903d-d61a-0cb2-cdee63831172" executionId="b1d7af8e-7cbd-4e50-b8eb-625b9bd51348" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="219f8da3-cc63-e002-72df-e2f549e52967" executionId="0747f0f7-0a97-4a9d-bcc9-3f438a1d6a76" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70fed881-ff3d-cf01-fc50-eec23bec4b15" executionId="e5304c02-0fe9-4e90-8c39-6109afed3619" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8d35157-2900-b4b5-1a17-900588c884a9" executionId="58144182-b749-4231-8798-14c408dfee1b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31dac960-539b-5857-5a33-455fe8d5a38f" executionId="1d4c6c80-2364-4f44-81f2-bc246d5458ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f114629c-3c3b-e71d-e1df-1b4312712d85" executionId="95ab91e6-8901-4372-bfc0-b452f32c6bf9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50604149-da7b-7eb8-2563-57d2dd368452" executionId="c2de4a17-c359-4bd4-af46-df8a6ffe2b53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19c50b46-2552-1ee8-9a15-6db5bb83fc13" executionId="f988354c-7c00-4c37-bcdc-0ae457d031c7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee450aac-5f02-8238-a55d-792600e33298" executionId="c7c494f2-4ef3-49ea-a013-978c4ab3e8db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71353074-59f3-561d-2fde-c864cf9dfcb6" executionId="a9712cc9-1b5b-4d08-a4c2-f48c596c5eb6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07a0b332-7585-5132-2931-ba67f585bbfd" executionId="8e2e7fa9-3aef-48be-8466-7379c9eb96fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aea0c1c8-e4f2-b00c-e2e5-3958a9100776" executionId="f7bf67d1-e47e-4067-aee4-6c315d84edf2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2c9c319-05d3-858f-ecdb-c785279a33e5" executionId="c4e84b99-713c-4229-8d2d-9c646d3604c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f73b5a1-d21f-1feb-a5dc-31aa30bfbe2c" executionId="150e0b82-5645-4a9c-9503-314b55e672b6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86189ae4-95f9-30e4-f4c6-bfa1b9898a62" executionId="1594164f-defb-4e2a-8472-9c357804eff2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc7a74bf-9a5b-2257-fa8b-50752bdbf702" executionId="8da2483c-4fd1-4229-bf88-ed7ad357694f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4dab3f58-f834-dddd-fa3d-a0f55f715d14" executionId="84d080f3-4d88-4d27-9510-4a0a3424fa30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6af2fe2f-9fc6-6af1-e346-da11b3a31319" executionId="729af978-2cd9-40b0-abba-f8a34ab49c05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d2b950d-d4be-de51-1cfb-07073f6d6e13" executionId="6d86ce06-ab30-4285-b50c-b90f780084c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="046e940e-ed7b-e2be-b9c9-fa82caaefa8a" executionId="c8eaf39c-baed-4ccd-a74f-cf103f2790fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="040fb33d-7655-40ce-1cff-6bcf94c5cc47" executionId="a5ced3b6-ffc6-45ef-8347-b50aca20cbcf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bee75210-e3b0-c570-b8a4-c27baac780a1" executionId="30e42937-4e6d-4a32-873a-3f1f649ff3ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb67481e-37a3-f171-7a64-13ebf12d3989" executionId="caa6964d-3839-4633-b31e-3912ce898f0d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="947b833a-a96c-d64f-e9e3-0beaa935d4d5" executionId="63213fc1-3a62-468f-bfc2-9cde7dfb21da" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e071152-ee43-67c0-dc5d-67a966171b99" executionId="768a1138-24d0-4768-b518-6387fe2cfffb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63f82b54-f147-1707-8ae8-1f771750a4c8" executionId="fa492486-b833-4bc9-a3bd-95e782582c3d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23b61850-f73c-f5eb-17ca-9aaba5f44c54" executionId="a670bfd2-4c67-4c7e-a85e-bdf1db2259b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5ad5871-c66b-34c9-1371-544f7c37d8f6" executionId="8caaa5c2-34b2-46c3-a10c-029ccdf4236a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b96f760-7a4a-da94-3ca5-8f27e0604482" executionId="af46dd4d-734f-4502-ba6e-2a8d54f1b68b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a8dac54-e42a-8256-0f95-9b2771dcaeda" executionId="33bcafdd-562e-4ca1-8675-8f91f9777534" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4401ff2d-c38b-51a8-f6b5-791f859c7098" executionId="9f093c5c-cd20-4f25-a2f0-b6cec12fa17b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf64e30a-5c5e-95e0-c813-0cfcc293de1e" executionId="935b54c9-f222-4e37-8530-42394eb95495" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e948d14-1697-7020-7d46-e7d0ab1a839a" executionId="6038540e-5ee2-4786-997a-21dd979f9a55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02e294ba-02db-f21e-dc59-8e7c9444841f" executionId="16f4e43e-cd45-43fe-a321-52e034fe4bcb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ef88e91-8d77-e81e-f266-0337c81fc15e" executionId="13bd5e81-4a28-46c3-83a3-cdd7b632c248" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19276ea0-e69e-d8c1-5f86-fbe82fc4defb" executionId="da48341f-c553-4f7e-b4db-45ff451ab827" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85374129-b31e-6699-e3e3-35edfbf2f310" executionId="1e98aac8-adc7-45b8-8506-7baefc704b6b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c824fd41-84e4-6d43-8411-04262c295a77" executionId="8364aad8-ce64-40fd-8bce-65ad3b8e0ea1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1e01dd-81d9-12dc-ec1f-005830932e89" executionId="408475b0-90a4-41e6-919b-2830288de7e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a108f95-d949-be1c-ba70-794e5a89cb2c" executionId="77021a5f-ef4b-4ac4-b652-be7e21bb7abe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="785e20b7-0681-3d5e-8c02-431a4435768d" executionId="fead99c1-d549-4025-8209-a211995a9f7c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea054fa2-926d-1779-cc57-db94ba1a4d6a" executionId="8f0ab03c-97a3-4109-9209-55cd69c88a6e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6a7a690-af73-fab8-0ebf-059ccdbb5495" executionId="3d1030a3-86e8-4611-b721-b882a76cd011" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a1c2bbd-f61b-135c-270f-157e7106103a" executionId="4a059014-161b-4ee3-987d-fb6204c5036b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="984e3d49-4d22-c80b-52c3-19191f62fda7" executionId="6e08be37-ec93-4c09-b9ca-0987c5dfa46b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b811bc2b-ac6c-1eab-5504-b3af1ec9a805" executionId="c7efe81c-7254-425b-a04d-a04b16447fd2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f543121-4b4c-bb28-bba2-a9b2ac9eaaeb" executionId="fcb057f1-9148-4baa-8aba-b9739ec5ea91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42ca667a-a020-f899-567b-164563a5f68c" executionId="672bea56-1798-478d-ae83-99af2d29814f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Completed">
    <Counters total="87" executed="87" passed="87" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>NUnit Adapter 3.17.0.0: Test execution started&#xD;
Running all tests in D:\a\c-sharp\c-sharp\src\UnitTests\AcceptanceTests\bin\Debug\net6.0\AcceptanceTests.dll&#xD;
   NUnit3TestExecutor discovered 87 of 87 NUnit test cases&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-legacy-civ.jpg") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-no-version.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-no-v...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-unknown-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-unkn...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-short.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-s...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-unknown.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-u...") (0.0s)&#xD;
Then I receive 'unknown cryptor error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("unknown cryptor e...") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("empty-file-crypto...") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFile("file-cryptor-v1-a...") (0.0s)&#xD;
Then I receive 'success'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("success") (0.0s)&#xD;
&#xD;
Given Crypto module with default 'legacy' and additional 'acrh' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("legacy", "acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with default 'acrh' and additional 'legacy' cryptors&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithDefaultAndAdditionalCryptors("acrh", "legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'file-legacy-civ.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-civ.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "binary") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-lega...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.jpg", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'file-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-legacy-riv.txt", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.jpg' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.jpg") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("file-cryptor-v1-a...", "stream") (0.0s)&#xD;
Then Decrypted file content equal to the 'file.txt' file content&#xD;
-&gt; done: CryptoModuleSteps.ThenDecryptedFileContentEqualToTheFileContent("file.txt") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "constant") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "binary") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "binary") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'binary'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "binary") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-legacy-riv.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I decrypt 'empty-file-cryptor-v1-acrh.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIDecryptFileAs("empty-file-crypto...", "stream") (0.0s)&#xD;
Then I receive 'decryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("decryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'constant' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("constant") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'acrh' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("acrh") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with '-' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("-") (0.0s)&#xD;
When I encrypt 'empty-file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("empty-file.txt", "stream") (0.0s)&#xD;
Then I receive 'encryption error'&#xD;
-&gt; done: CryptoModuleSteps.ThenIReceive("encryption error") (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.jpg' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.jpg", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given Crypto module with 'legacy' cryptor&#xD;
-&gt; done: CryptoModuleSteps.GivenCryptoModuleWithCryptor("legacy") (0.0s)&#xD;
Given Legacy code with 'pubnubenigma' cipher key and 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenLegacyCodeWithCipherKeyAndVector("pubnubenigma", "random") (0.0s)&#xD;
* with 'pubnubenigma' cipher key&#xD;
-&gt; done: CryptoModuleSteps.GivenWithCipherKey("pubnubenigma") (0.0s)&#xD;
* with 'random' vector&#xD;
-&gt; done: CryptoModuleSteps.GivenWithVector("random") (0.0s)&#xD;
When I encrypt 'file.txt' file as 'stream'&#xD;
-&gt; done: CryptoModuleSteps.WhenIEncryptFileAs("file.txt", "stream") (0.0s)&#xD;
Then Successfully decrypt an encrypted file with legacy code&#xD;
-&gt; done: CryptoModuleSteps.ThenSuccessfullyDecryptAnEncryptedFileWithLegacyCode() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 43201&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(43201) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.1s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid ttl") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Range should be 1 to 43200 minute(s).'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Range should be 1...") (0.0s)&#xD;
* the error detail location is 'ttl'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("ttl") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* deny resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenDenyResourcePermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid permissions'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid permissions") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Unexpected value: `permissions.resources.uuids.uuid-1` must be positive and non-zero.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Unexpected value:...") (0.0s)&#xD;
* the error detail location is 'permissions.resources.uuids.uuid-1'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.resou...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '!&lt;[^&gt;]+&gt;++' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("!&lt;[^&gt;]+&gt;++") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Syntax error: multiple repeat.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Syntax error: mul...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.!&lt;[^&gt;]+&gt;++'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the '(!&lt;[^&gt;]+&gt;)+' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("(!&lt;[^&gt;]+&gt;)+") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
When I attempt to grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIAttemptToGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid RegExp'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid RegExp") (0.0s)&#xD;
* the error source is 'grant'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("grant") (0.0s)&#xD;
* the error detail message is 'Only non-capturing groups are allowed. Try replacing `(` with `(?:`.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Only non-capturin...") (0.0s)&#xD;
* the error detail location is 'permissions.patterns.uuids.(!&lt;[^&gt;]+&gt;)+'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("permissions.patte...") (0.0s)&#xD;
* the error detail location type is 'body'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("body") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.1s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.GivenTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionWRITE() (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionJOIN() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
* grant resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionMANAGE() (0.0s)&#xD;
Given the 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* grant resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionGET() (0.0s)&#xD;
* grant resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionUPDATE() (0.0s)&#xD;
* grant resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionDELETE() (0.0s)&#xD;
Given the '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionWRITE() (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionJOIN() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
Given the '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* grant pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionREAD() (0.0s)&#xD;
* grant pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionMANAGE() (0.0s)&#xD;
Given the '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* grant pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionGET() (0.0s)&#xD;
* grant pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionUPDATE() (0.0s)&#xD;
* grant pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantPatternPermissionDELETE() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the authorized UUID "test-authorized-uuid"&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheAuthorizedUUID("test-authorized-uuid") (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionWRITE() (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionJOIN() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has 'channel_group-1' CHANNEL_GROUP resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPResourceAccessPermissions("channel_group-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
* token resource permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionMANAGE() (0.0s)&#xD;
Then the token has 'uuid-1' UUID resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDResourceAccessPermissions("uuid-1") (0.0s)&#xD;
* token resource permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionGET() (0.0s)&#xD;
* token resource permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionUPDATE() (0.0s)&#xD;
* token resource permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionDELETE() (0.0s)&#xD;
Then the token has '^channel-\S*$' CHANNEL pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELPatternAccessPermissions("^channel-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission WRITE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionWRITE() (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission JOIN&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionJOIN() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
Then the token has '^:channel_group-\S*$' CHANNEL_GROUP pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNEL_GROUPPatternAccessPermissions("^:channel_group-\S*$") (0.0s)&#xD;
* token pattern permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionREAD() (0.0s)&#xD;
* token pattern permission MANAGE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionMANAGE() (0.0s)&#xD;
Then the token has '^uuid-\S*$' UUID pattern access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasUUIDPatternAccessPermissions("^uuid-\S*$") (0.0s)&#xD;
* token pattern permission GET&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionGET() (0.0s)&#xD;
* token pattern permission UPDATE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionUPDATE() (0.0s)&#xD;
* token pattern permission DELETE&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenPatternPermissionDELETE() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTTL(60) (0.0s)&#xD;
Given the 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.GivenTheCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* grant resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.GivenGrantResourcePermissionREAD() (0.0s)&#xD;
When I grant a token specifying those permissions&#xD;
-&gt; done: FeatureAccessSteps.WhenIGrantATokenSpecifyingThosePermissions() (0.0s)&#xD;
Then the token contains the TTL 60&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenContainsTheTTL(60) (0.0s)&#xD;
Then the token does not contain an authorized uuid&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenDoesNotContainAnAuthorizedUuid() (0.0s)&#xD;
Then the token has 'channel-1' CHANNEL resource access permissions&#xD;
-&gt; done: FeatureAccessSteps.ThenTheTokenHasCHANNELResourceAccessPermissions("channel-1") (0.0s)&#xD;
* token resource permission READ&#xD;
-&gt; done: FeatureAccessSteps.ThenTokenResourcePermissionREAD() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("Chat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("DM") (0.0s)&#xD;
When I get the channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'DM' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannel("DM") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Chat' and 'Patient' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("Chat", "Patient") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all channel metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllChannelMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'DM' and 'VipChat' channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndChannelMetadata("DM", "VipChat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I remove the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForChannel("Chat") (0.0s)&#xD;
When I set the channel metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheChannelMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the channel metadata for 'Chat' channel contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheChannelMetadataForChannelContainsUpdated("Chat") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I get the channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' and 'EvaMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("AmeliaMember", "EvaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'VipChat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("VipChat") (0.0s)&#xD;
When I get the channel members including custom and UUID custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheChannelMembersIncludingCustomAndUUIDCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'OliverMember' and 'PeterMember' members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMembers("OliverMember", "PeterMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I manage channel members&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageChannelMembers() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
And the response does not contain list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMember("AmeliaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
And the data for 'AmeliaMember' member that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMemberThatWeWantToRemove("AmeliaMember") (0.0s)&#xD;
When I remove a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("AmeliaMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMember() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'AmeliaMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("AmeliaMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMember("PeterMember") (0.0s)&#xD;
And the id for 'Chat' channel&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForChannel("Chat") (0.0s)&#xD;
When I set a channel member including custom and UUID with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetAChannelMemberIncludingCustomAndUUIDWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'PeterMember' member&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMember("PeterMember") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I get the memberships for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMemberships() (0.1s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' and 'PatientMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("ChatMembership", "PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Bob") (0.0s)&#xD;
When I get the memberships including custom and channel custom information&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheMembershipsIncludingCustomAndChannelCustomInformation() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'VipChatMembership' and 'DMMembership' memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndMemberships("VipChatMembership", "DMMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
And the data for 'PatientMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("PatientMembership") (0.0s)&#xD;
When I manage memberships&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIManageMemberships() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
And the response does not contain list with 'PatientMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseDoesNotContainListWithMembership("PatientMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I remove the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership that we want to remove&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembershipThatWeWantToRemove("ChatMembership") (0.0s)&#xD;
When I remove the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembership() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
And the data for 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForMembership("ChatMembership") (0.0s)&#xD;
When I set the membership for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheMembershipForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'ChatMembership' membership&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithMembership("ChatMembership") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Alice' and 'James' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Alice", "James") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
When I get all UUID metadata with custom&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetAllUUIDMetadataWithCustom() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the response contains list with 'Bob' and 'Lisa' UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheResponseContainsListWithAndUUIDMetadata("Bob", "Lisa") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I get the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Alice") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Bob") (0.0s)&#xD;
When I get the UUID metadata with custom for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIGetTheUUIDMetadataWithCustomForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Bob' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersona("Bob") (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the id for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheIdForPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given current user is 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenCurrentUserIsPersona("Alice") (0.0s)&#xD;
When I remove the UUID metadata for current user&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenIRemoveTheUUIDMetadataForCurrentUser() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
&#xD;
Given I have a keyset with Objects V2 enabled&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenIHaveAKeysetWithObjectsVEnabled(2) (0.0s)&#xD;
Given the data for 'Alice' persona&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.GivenTheDataForPersona("Alice") (0.0s)&#xD;
When I set the UUID metadata&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.WhenISetTheUUIDMetadata() (0.0s)&#xD;
Then I receive a successful response&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenIReceiveASuccessfulResponse() (0.0s)&#xD;
And the UUID metadata for 'Alice' persona contains updated&#xD;
-&gt; done: FeatureObjectsV2MetadataSteps.ThenTheUUIDMetadataForPersonaContainsUpdated("Alice") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Feature disabled'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Feature disabled") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is 'Token revocation is disabled.'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIs("Token revocation ...") (0.0s)&#xD;
* the error detail location is 'subscribe-key'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("subscribe-key") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given the token string 'unescaped-_.ABCabc123 escaped;,/?:@&amp;=+$#'&#xD;
-&gt; done: FeatureAccessSteps.GivenTheTokenString("unescaped-_.ABCab...") (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then I get confirmation that token has been revoked&#xD;
-&gt; done: FeatureAccessSteps.ThenIGetConfirmationThatTokenHasBeenRevoked() (0.0s)&#xD;
&#xD;
Given I have a keyset with access manager enabled&#xD;
-&gt; done: FeatureAccessSteps.GivenIHaveAKeysetWithAccessManagerEnabled() (0.0s)&#xD;
Given a token&#xD;
-&gt; done: FeatureAccessSteps.GivenAToken() (0.0s)&#xD;
When I revoke a token&#xD;
-&gt; done: FeatureAccessSteps.WhenIRevokeAToken() (0.0s)&#xD;
Then an error is returned&#xD;
-&gt; done: FeatureAccessSteps.ThenAnErrorIsReturned() (0.0s)&#xD;
* the error status code is 400&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorStatusCodeIs(400) (0.0s)&#xD;
* the error message is 'Invalid token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorMessageIs("Invalid token") (0.0s)&#xD;
* the error source is 'revoke'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorSourceIs("revoke") (0.0s)&#xD;
* the error detail message is not empty&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailMessageIsNotEmpty() (0.0s)&#xD;
* the error detail location is 'token'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationIs("token") (0.0s)&#xD;
* the error detail location type is 'path'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorDetailLocationTypeIs("path") (0.0s)&#xD;
* the error service is 'Access Manager'&#xD;
-&gt; done: FeatureAccessSteps.ThenTheErrorServiceIs("Access Manager") (0.0s)&#xD;
&#xD;
NUnit Adapter 3.17.0.0: Test execution complete&#xD;
</StdOut>
    </Output>
  </ResultSummary>
</TestRun>
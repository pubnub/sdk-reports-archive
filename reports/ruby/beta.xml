<?xml version="1.0"?>
<testsuites failures="0" errors="0" tests="85" skipped="76">
  <testsuite failures="0" errors="0" skipped="0" tests="4" time="0.079048" name="Authorization Failure Reporting">
    <testcase classname="Authorization Failure Reporting" name="Publish simple message with valid ttl and auth permissions" time="0.046914">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Publish simple message with valid ttl and auth permissions"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"authSuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Authorization Failure Reporting" name="Publish simple message with expired auth token" time="0.012762">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Publish simple message with expired auth token"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"authFailureExpired"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Authorization Failure Reporting" name="Publish simple message with invalid auth permissions" time="0.010173">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Publish simple message with invalid auth permissions"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"authFailurePermissions"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Authorization Failure Reporting" name="Publish fails due to revoked token" time="0.009199">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Publish simple message with revoked auth token"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"authFailureRevoked"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="0" tests="1" time="0.044056" name="Grant an access token">
    <testcase classname="Grant an access token" name="Attempt to grant an access token when ttl provided exceeds the max ttl configured (use default max 43200 for the test)" time="0.044056">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Grant request with ttl exceed max ttl"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"grantWithTTLExceedMaxTTL"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="0" tests="4" time="0.047234" name="Revoke an access token">
    <testcase classname="Revoke an access token" name="Revoke existing valid token" time="0.013066">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Revoke existing valid token"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"revokeValidToken"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Revoke an access token" name="Revoke invalid token" time="0.010547">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Revoke an invalid token"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"revokeInvalidToken"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Revoke an access token" name="Revoke a token while it is disabled on a server" time="0.012918">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Revoke a token while it is disabled on a server"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"revokeFeatureDisabled"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Revoke an access token" name="Revoke a token with characters that require url encoding" time="0.010703">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Revoke request verify characters with url encoding"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"revokeEncodePathParameter"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="2" tests="2" time="0.012605" name="Message encryption">
    <testcase classname="Message encryption" name="Receiving an encrypted message with correct crypto key" time="0.006467">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"messageEncryption"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message encryption" name="Receiving an encrypted message with invalid crypto key" time="0.006138">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"messageEncryption"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="5" tests="5" time="0.028862" name="Files">
    <testcase classname="Files" name="Listing files" time="0.006078">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"listingFiles"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Files" name="Publishing file message" time="0.005768">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishingFileMessage"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Files" name="Publishing file message failure" time="0.006367">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishingFileMessageFailure"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Files" name="Deleting a file" time="0.005301">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"deletingFile"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Files" name="Downloading a file" time="0.005349">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"downloadingFile"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="3" tests="3" time="0.017130" name="History">
    <testcase classname="History" name="Fetching message history" time="0.006020">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchMessageHistory"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="History" name="Fetching message history for multiple channels" time="0.005742">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchMessageHistoryMulti"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="History" name="Fetching message history with message actions" time="0.005368">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchMessageHistoryActions"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="5" tests="5" time="0.026699" name="Message Actions">
    <testcase classname="Message Actions" name="Adding a message action" time="0.005818">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"successfulAddMessageAction"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message Actions" name="Failing to add a message action" time="0.004460">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedAddMessageAction"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message Actions" name="Fetching message actions with pagination" time="0.005522">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchMessageActions"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message Actions" name="Deleting a message action" time="0.005534">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"successfulDeleteMessageAction"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message Actions" name="Failing to delete a message action" time="0.005365">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedDeleteMessageAction"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="6" tests="6" time="0.035434" name="Objects V2 Channel metadata">
    <testcase classname="Objects V2 Channel metadata" name="Get a channel metadata for id" time="0.005821">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getChannelMetadataOfChat"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Get a channel with custom metadata" time="0.004898">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getChannelMetadataOfDMWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Set a channel metadata" time="0.004602">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setChannelMetadataForChat"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Remove a channel metadata for id" time="0.008845">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeChannelMetadataOfChat"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Get all channel metadata" time="0.004566">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAllChannelMetadata"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Get all channel metadata with custom" time="0.006702">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAllChannelMetadataWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="5" tests="5" time="0.024538" name="Objects V2 Members">
    <testcase classname="Objects V2 Members" name="Get members for a channel" time="0.005446">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getMembersOfChatChannel"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Members" name="Get members for VipChat channel with custom and UUID with custom" time="0.004702">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getMembersOfVipChatChannelWithCustomAndUuidWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Members" name="Set member for a channel" time="0.005039">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setMembersForChatChannel"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Members" name="Set member with custom for a channel and UUID with custom" time="0.004667">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setMembersForChatChannelWithCustomAndUuidWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Members" name="Remove member for a channel" time="0.004684">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeMembersForChatChannel"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="7" tests="7" time="0.034742" name="Objects V2 Memberships">
    <testcase classname="Objects V2 Memberships" name="Get memberships for UUID" time="0.005794">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAliceMemberships"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Get memberships for current user" time="0.004668">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAliceMemberships"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Get memberships for UUID with custom and channel custom" time="0.004595">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getBobMembershipWithCustomAndChannelCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Set membership" time="0.004832">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setAliceMembership"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Set membership for current user" time="0.005230">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setAliceMembership"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Remove membership" time="0.004581">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeAliceMembership"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Remove membership for current user" time="0.005042">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeAliceMembership"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="7" tests="7" time="0.036343" name="Objects V2 UUID metadata">
    <testcase classname="Objects V2 UUID metadata" name="Get a UUID metadata for id" time="0.005276">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getUUIDMetadataOfAlice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Get a UUID with custom metadata, id stored in config" time="0.007280">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getUUIDMetadataOfBobWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Set a UUID metadata" time="0.004449">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setUUIDMetadataForAlice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Remove a UUID metadata for id" time="0.005447">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeUUIDMetadataOfAlice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Remove a UUID metadata, id stored in config" time="0.004760">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeUUIDMetadataOfAlice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Get all UUID metadata" time="0.004623">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAllUUIDMetadata"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Get all UUID metadata with custom" time="0.004508">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAllUUIDMetadataWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="9" tests="9" time="0.045535" name="Publish to Space">
    <testcase classname="Publish to Space" name="Publish message with space id and message type" time="0.005246">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message with space id and too short message type" time="0.004572">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithInvalidSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message with space id and too long message type" time="0.004544">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithInvalidSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message with short too space id and message type" time="0.004666">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithInvalidSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message with too long space id and message type" time="0.004616">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithInvalidSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message with space id containing unexpected chars" time="0.005367">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithInvalidSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message with space id containing reserved 'pn' prefix" time="0.005784">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithInvalidSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message with message type containing unexpected chars" time="0.005329">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithInvalidSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message with message type containing reserved 'pn' prefix" time="0.005412">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithInvalidSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="4" tests="4" time="0.023925" name="Publish a message">
    <testcase classname="Publish a message" name="Publishing a message" time="0.006231">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"simplePublish"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publishing a message with JSON metadata" time="0.005499">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"simplePublish"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publishing a message with string metadata" time="0.005643">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"simplePublish"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Failing publish" time="0.006552">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"invalidPublish"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="1" tests="1" time="0.005953" name="Signal">
    <testcase classname="Signal" name="Sending a signal" time="0.005953">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"successfulSignal"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="13" tests="13" time="0.056519" name="Push Notifications">
    <testcase classname="Push Notifications" name="Listing push channels for GCM gateway" time="0.005524">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"listingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Listing push channels for APNS2 without topic" time="0.001517">
      <skipped/>
      <system-out><![CDATA[Using mock
]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Listing push channels for APNS2" time="0.005724">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"listingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Adding push channels for GCM" time="0.006109">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"addingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Adding push channels for FCM" time="0.005724">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"addingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Adding push channels for APNS2 without topic" time="0.001982">
      <skipped/>
      <system-out><![CDATA[Using mock
]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Adding push channels for APNS2" time="0.004616">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"addingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing push channels for GCM" time="0.005933">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing push channels for APNS2 without topic" time="0.000842">
      <skipped/>
      <system-out><![CDATA[Using mock
]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing push channels for APNS2" time="0.005225">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing device for GCM" time="0.007212">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removingDevice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing device for APNS2 without topic" time="0.001008">
      <skipped/>
      <system-out><![CDATA[Using mock
]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing device for APNS2" time="0.005103">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removingDevice"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="7" tests="7" time="0.056268" name="Subscribe Loop auto-retry with access denied">
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry without auth key" time="0.013874">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeWithInvalidAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with invalid PAMv2 auth key" time="0.006029">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeWithInvalidAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with invalid PAMv3 token" time="0.006906">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeWithInvalidAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with invalid secret key" time="0.007950">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeWithInvalidAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with PAMv2 auth key permissions reset after subscribe" time="0.008347">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeInvalidatedAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with PAMv3 token revoked after subscribe" time="0.006959">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeInvalidatedAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with secret key invalidated after subscribe" time="0.006203">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeInvalidatedAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="1" tests="1" time="0.006374" name="Subscribe Loop">
    <testcase classname="Subscribe Loop" name="subscribe and recieve a published message" time="0.006374">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"simpleSubscribe"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="1" tests="1" time="0.004868" name="Time">
    <testcase classname="Time" name="Getting PubNub time" time="0.004868">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"successfulTime"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
</testsuites>
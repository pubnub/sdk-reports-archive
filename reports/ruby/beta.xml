<?xml version="1.0"?>
<testsuites failures="0" errors="0" tests="135" skipped="126">
  <testsuite failures="0" errors="0" skipped="0" tests="4" time="0.069436" name="Authorization Failure Reporting">
    <testcase classname="Authorization Failure Reporting" name="Publish simple message with valid ttl and auth permissions" time="0.041436">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Publish simple message with valid ttl and auth permissions"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"authSuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Authorization Failure Reporting" name="Publish simple message with expired auth token" time="0.008976">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Publish simple message with expired auth token"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"authFailureExpired"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Authorization Failure Reporting" name="Publish simple message with invalid auth permissions" time="0.009481">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Publish simple message with invalid auth permissions"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"authFailurePermissions"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Authorization Failure Reporting" name="Publish fails due to revoked token" time="0.009543">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Publish simple message with revoked auth token"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"authFailureRevoked"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="0" tests="1" time="0.012766" name="Grant an access token">
    <testcase classname="Grant an access token" name="Attempt to grant an access token when ttl provided exceeds the max ttl configured (use default max 43200 for the test)" time="0.012766">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Grant request with ttl exceed max ttl"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"grantWithTTLExceedMaxTTL"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="0" tests="4" time="0.048197" name="Revoke an access token">
    <testcase classname="Revoke an access token" name="Revoke existing valid token" time="0.025197">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Revoke existing valid token"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"revokeValidToken"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Revoke an access token" name="Revoke invalid token" time="0.008532">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Revoke an invalid token"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"revokeInvalidToken"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Revoke an access token" name="Revoke a token while it is disabled on a server" time="0.007261">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Revoke a token while it is disabled on a server"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"revokeFeatureDisabled"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Revoke an access token" name="Revoke a token with characters that require url encoding" time="0.007207">
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>["Revoke request verify characters with url encoding"]}, "validations"=>["The current document does not have any resource to match with."], "script"=>"revokeEncodePathParameter"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="2" tests="2" time="0.008157" name="Message encryption">
    <testcase classname="Message encryption" name="Receiving an encrypted message with correct crypto key" time="0.003844">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"messageEncryption"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message encryption" name="Receiving an encrypted message with invalid crypto key" time="0.004314">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"messageEncryption"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="3" tests="3" time="0.012624" name="Send a file to Space">
    <testcase classname="Send a file to Space" name="Send a file to space success" time="0.004595">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"sendFileWithSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a file to Space" name="Send a file to space fails when message type is too short, shorten than 3 characters" time="0.003995">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"sendFileWithTooShortMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a file to Space" name="Send a file to space fails when message type is too long, longer than 50 characters" time="0.004034">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"sendFileWithTooLongMessageType"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="5" tests="5" time="0.020390" name="Files">
    <testcase classname="Files" name="Listing files" time="0.004429">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"listingFiles"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Files" name="Publishing file message" time="0.004072">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishingFileMessage"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Files" name="Publishing file message failure" time="0.003820">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishingFileMessageFailure"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Files" name="Deleting a file" time="0.003915">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"deletingFile"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Files" name="Downloading a file" time="0.004153">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"downloadingFile"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="4" tests="4" time="0.017230" name="History for VSP">
    <testcase classname="History for VSP" name="Client can fetch history with PubNub message types using defaults" time="0.004394">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchHistoryWithPubNubMessageTypes"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="History for VSP" name="Client can fetch history with PubNub and user-defined message types using defaults" time="0.004347">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchHistoryWithUserAndPubNubMessageTypes"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="History for VSP" name="Client can fetch history without message types enabled by default" time="0.004370">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchHistoryWithoutMessageTypes"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="History for VSP" name="Client can fetch history with space id disabled by default" time="0.004118">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchHistoryWithSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="3" tests="3" time="0.012066" name="History">
    <testcase classname="History" name="Fetching message history" time="0.004104">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchMessageHistory"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="History" name="Fetching message history for multiple channels" time="0.004031">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchMessageHistoryMulti"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="History" name="Fetching message history with message actions" time="0.003931">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchMessageHistoryActions"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="5" tests="5" time="0.019495" name="Message Actions">
    <testcase classname="Message Actions" name="Adding a message action" time="0.003857">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"successfulAddMessageAction"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message Actions" name="Failing to add a message action" time="0.003845">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedAddMessageAction"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message Actions" name="Fetching message actions with pagination" time="0.004027">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"fetchMessageActions"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message Actions" name="Deleting a message action" time="0.003843">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"successfulDeleteMessageAction"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Message Actions" name="Failing to delete a message action" time="0.003923">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedDeleteMessageAction"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="6" tests="6" time="0.023706" name="Objects V2 Channel metadata">
    <testcase classname="Objects V2 Channel metadata" name="Get a channel metadata for id" time="0.004074">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getChannelMetadataOfChat"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Get a channel with custom metadata" time="0.004080">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getChannelMetadataOfDMWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Set a channel metadata" time="0.003932">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setChannelMetadataForChat"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Remove a channel metadata for id" time="0.003860">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeChannelMetadataOfChat"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Get all channel metadata" time="0.003941">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAllChannelMetadata"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Channel metadata" name="Get all channel metadata with custom" time="0.003820">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAllChannelMetadataWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="5" tests="5" time="0.043005" name="Objects V2 Members">
    <testcase classname="Objects V2 Members" name="Get members for a channel" time="0.003939">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getMembersOfChatChannel"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Members" name="Get members for VipChat channel with custom and UUID with custom" time="0.011235">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getMembersOfVipChatChannelWithCustomAndUuidWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Members" name="Set member for a channel" time="0.010686">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setMembersForChatChannel"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Members" name="Set member with custom for a channel and UUID with custom" time="0.010042">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setMembersForChatChannelWithCustomAndUuidWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Members" name="Remove member for a channel" time="0.007103">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeMembersForChatChannel"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="7" tests="7" time="0.089494" name="Objects V2 Memberships">
    <testcase classname="Objects V2 Memberships" name="Get memberships for UUID" time="0.036122">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAliceMemberships"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Get memberships for current user" time="0.012137">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAliceMemberships"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Get memberships for UUID with custom and channel custom" time="0.026809">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getBobMembershipWithCustomAndChannelCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Set membership" time="0.003861">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setAliceMembership"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Set membership for current user" time="0.003362">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setAliceMembership"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Remove membership" time="0.003750">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeAliceMembership"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 Memberships" name="Remove membership for current user" time="0.003454">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeAliceMembership"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="7" tests="7" time="0.030364" name="Objects V2 UUID metadata">
    <testcase classname="Objects V2 UUID metadata" name="Get a UUID metadata for id" time="0.003957">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getUUIDMetadataOfAlice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Get a UUID with custom metadata, id stored in config" time="0.003759">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getUUIDMetadataOfBobWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Set a UUID metadata" time="0.003990">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setUUIDMetadataForAlice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Remove a UUID metadata for id" time="0.006281">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeUUIDMetadataOfAlice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Remove a UUID metadata, id stored in config" time="0.004144">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removeUUIDMetadataOfAlice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Get all UUID metadata" time="0.004010">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAllUUIDMetadata"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Objects V2 UUID metadata" name="Get all UUID metadata with custom" time="0.004222">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getAllUUIDMetadataWithCustom"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="2" tests="2" time="0.009792" name="Get presence state">
    <testcase classname="Get presence state" name="Get presence state which has been set on channel using presence/data endpoint" time="0.005155">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getPresenceStateSetUsingPresenceDataEndpoint"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Get presence state" name="Get presence state which has been set on channel using presence/heartbeat endpoint" time="0.004637">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"getPresenceStateSetUsingPresenceHeartbeatEndpoint"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="3" tests="3" time="0.012580" name="Signal user presence">
    <testcase classname="Signal user presence" name="Heartbeat call for channel without 'state' query parameter when state not set" time="0.004647">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"heartbeatWithoutPresenceState"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Signal user presence" name="Heartbeat call for channel with 'state' query parameter when state is set with presence/data endpoint" time="0.004151">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"heartbeatWitPresenceStateSetWithPresenceDataEndpoint"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Signal user presence" name="Heartbeat call for channel with 'state' query parameter when state is set with presence/heartbeat endpoint" time="0.003781">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"heartbeatWitPresenceStateSetWithPresenceHeartbeatEndpoint"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="4" tests="4" time="0.017999" name="Get channels and groups presence">
    <testcase classname="Get channels and groups presence" name="Check active clients on channel without subscribers" time="0.005398">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"hereNowChannelWithNoSubscriptions"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Get channels and groups presence" name="Check active clients on channel with subscribers" time="0.004750">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"hereNowChannelWithSubscriptions"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Get channels and groups presence" name="Check active clients on channel without subscribers and with presence state set with presence/data endpoint" time="0.004175">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"hereNowChannelWithNoSubscriptionsAndPresenceState1"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Get channels and groups presence" name="Check active clients on channel without subscribers but with presence state set with presence/heartbeat endpoint" time="0.003676">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"hereNowChannelWithNoSubscriptionsAndPresenceState2"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="2" tests="2" time="0.007944" name="Set presence state">
    <testcase classname="Set presence state" name="Set presence state on channel using presence/data endpoint" time="0.004101">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setPresenceStateUsingPresenceDataEndpoint"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Set presence state" name="Set presence state on channel using presence/heartbeat endpoint" time="0.003843">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"setPresenceStateUsingPresenceHeartbeatEndpoint"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="15" tests="15" time="0.058327" name="Publish to Space">
    <testcase classname="Publish to Space" name="Publish message to space success" time="0.004918">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when message type is too short" time="0.005575">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithTooShortMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when message type is too long" time="0.003767">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithTooLongMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when space id is too short" time="0.003590">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithTooShortSpaceId"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when space id is too long" time="0.003593">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithTooLongSpaceId"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when space id starts with reserved 'pn-' (hyphen) string" time="0.003704">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithSpaceIdStartingWithReservedStrings"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when space id starts with reserved 'pn_' (underscore) string" time="0.003968">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithSpaceIdStartingWithReservedStrings"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when space id starts with not allowed '-' (hyphen) character" time="0.003620">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithSpaceIdStartingWithNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when space id starts with not allowed '_' (underscore) character" time="0.003487">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithSpaceIdStartingWithNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when space id contains not allowed characters" time="0.003581">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithSpaceIdContainingNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when message type starts with reserved 'pn-' (hyphen) string" time="0.003679">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithMessageTypeStartingWithReservedStrings"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when message type starts with reserved 'pn_' (underscore) string" time="0.003923">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithMessageTypeStartingWithReservedStrings"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when message type starts with not allowed '-' (hyphen) character" time="0.003590">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithMessageTypeStartingWithNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when message type starts with not allowed '_' (underscore) character" time="0.003496">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithMessageTypeStartingWithNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish to Space" name="Publish message to space fails when message type contains not allowed characters" time="0.003836">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishWithMessageTypeContainingNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="13" tests="13" time="0.051403" name="Publish a message">
    <testcase classname="Publish a message" name="Publish string success" time="0.004271">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithStringSuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish dictionary with compression success" time="0.003760">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithCompressionSuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish dictionary as POST body success" time="0.003822">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageAsPOSTBodySuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish number success" time="0.003695">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithNumberSuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish array success" time="0.004008">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithArraySuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish dictionary success" time="0.003891">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithDictionarySuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish message with meta success" time="0.004255">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithMetaSuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish message with store success" time="0.003815">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithStoreSuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish message with ttl success" time="0.003768">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithTTLSuccess"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish message fails when message payload is larger than 32 KiB" time="0.004097">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithTooLongMessageFail"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish message with meta fails when meta isn't dictionary" time="0.004061">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithMetaFail"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish message with the wrong publish key fail" time="0.004073">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithWrongPublishKeyFail"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Publish a message" name="Publish message with the wrong subscribe key fail" time="0.003887">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"publishMessageWithWrongSubscribeKeyFail"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="15" tests="15" time="0.055170" name="Send a signal to Space">
    <testcase classname="Send a signal to Space" name="Send a signal to space success" time="0.004022">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithSpaceIdAndMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when message type is too short" time="0.003927">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithTooShortMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when message type is too long" time="0.003870">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithTooLongMessageType"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when space id is too short" time="0.003678">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithTooShortSpaceId"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when space id is too long" time="0.003520">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithTooLongSpaceId"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when space id starts with reserved 'pn-' (hyphen) string" time="0.003491">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithSpaceIdStartingWithReservedStrings"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when space id starts with reserved 'pn_' (underscore) string" time="0.003456">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithSpaceIdStartingWithReservedStrings"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when space id starts with not allowed '-' (hyphen) character" time="0.003527">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithSpaceIdStartingWithNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when space id starts with not allowed '_' (underscore) character" time="0.003470">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithSpaceIdStartingWithNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when space id contains not allowed characters" time="0.003959">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithSpaceIdContainingNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when message type starts with reserved 'pn-' (hyphen) string" time="0.003615">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithMessageTypeStartingWithReservedStrings"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when message type starts with reserved 'pn_' (underscore) string" time="0.003485">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithMessageTypeStartingWithReservedStrings"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when message type starts with not allowed '-' (hyphen) character" time="0.004209">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithMessageTypeStartingWithNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when message type starts with not allowed '_' (underscore) character" time="0.003450">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithMessageTypeStartingWithNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Send a signal to Space" name="Send a signal to space fails when message type contains not allowed characters" time="0.003492">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"signalWithMessageTypeContainingNotAllowedCharacter"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="1" tests="1" time="0.003638" name="Signal">
    <testcase classname="Signal" name="Sending a signal" time="0.003638">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"successfulSignal"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="13" tests="13" time="0.057636" name="Push Notifications">
    <testcase classname="Push Notifications" name="Listing push channels for GCM gateway" time="0.004737">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"listingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Listing push channels for APNS2 without topic" time="0.000934">
      <skipped/>
      <system-out><![CDATA[Using mock
]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Listing push channels for APNS2" time="0.003647">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"listingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Adding push channels for GCM" time="0.004645">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"addingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Adding push channels for FCM" time="0.003262">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"addingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Adding push channels for APNS2 without topic" time="0.000661">
      <skipped/>
      <system-out><![CDATA[Using mock
]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Adding push channels for APNS2" time="0.003428">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"addingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing push channels for GCM" time="0.003216">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing push channels for APNS2 without topic" time="0.000633">
      <skipped/>
      <system-out><![CDATA[Using mock
]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing push channels for APNS2" time="0.003183">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removingPushChannels"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing device for GCM" time="0.003290">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removingDevice"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing device for APNS2 without topic" time="0.001281">
      <skipped/>
      <system-out><![CDATA[Using mock
]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Push Notifications" name="Removing device for APNS2" time="0.024720">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"removingDevice"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="7" tests="7" time="0.064348" name="Subscribe Loop auto-retry with access denied">
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry without auth key" time="0.007586">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeWithInvalidAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with invalid PAMv2 auth key" time="0.006576">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeWithInvalidAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with invalid PAMv3 token" time="0.010310">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeWithInvalidAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with invalid secret key" time="0.006449">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeWithInvalidAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with PAMv2 auth key permissions reset after subscribe" time="0.006607">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeInvalidatedAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with PAMv3 token revoked after subscribe" time="0.020737">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeInvalidatedAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe Loop auto-retry with access denied" name="don't auto-retry with secret key invalidated after subscribe" time="0.006084">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"failedSubscribeInvalidatedAuthKey"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="1" tests="1" time="0.006080" name="Subscribe Loop">
    <testcase classname="Subscribe Loop" name="subscribe and recieve a published message" time="0.006080">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"simpleSubscribe"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="2" tests="2" time="0.011417" name="Subscribe for VSP">
    <testcase classname="Subscribe for VSP" name="Client can subscribe and receive messages with PubNub message types" time="0.006998">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"subscribeReceiveMessagesWithPubNubMessageTypes"}]]></system-out>
      <system-err/>
    </testcase>
    <testcase classname="Subscribe for VSP" name="Client can subscribe and receive messages with PubNub and user-defined message types" time="0.004420">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"subscribeReceiveMessagesWithUserAndPubNubMessageTypes"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
  <testsuite failures="0" errors="0" skipped="1" tests="1" time="0.003786" name="Time">
    <testcase classname="Time" name="Getting PubNub time" time="0.003786">
      <skipped/>
      <system-out><![CDATA[Using mock
{"expectations"=>{"pending"=>[], "failed"=>[], "succeeded"=>[]}, "validations"=>[], "script"=>"successfulTime"}]]></system-out>
      <system-err/>
    </testcase>
  </testsuite>
</testsuites>